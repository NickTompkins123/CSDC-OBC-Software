
RTOSDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ec0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00081ec0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000138  20070438  000822f8  00010438  2**2
                  ALLOC
  3 .stack        00002000  20070570  00082430  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   000085ac  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001715  00000000  00000000  00018a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004138  00000000  00000000  0001a17d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b48  00000000  00000000  0001e2b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a48  00000000  00000000  0001edfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016af2  00000000  00000000  0001f845  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b7c2  00000000  00000000  00036337  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00064e9d  00000000  00000000  00041af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002540  00000000  00000000  000a6998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072570 	.word	0x20072570
   80004:	00080d4d 	.word	0x00080d4d
   80008:	00080d45 	.word	0x00080d45
   8000c:	00080d45 	.word	0x00080d45
   80010:	00080d45 	.word	0x00080d45
   80014:	00080d45 	.word	0x00080d45
   80018:	00080d45 	.word	0x00080d45
	...
   8002c:	000810b1 	.word	0x000810b1
   80030:	00080d45 	.word	0x00080d45
   80034:	00000000 	.word	0x00000000
   80038:	0008116d 	.word	0x0008116d
   8003c:	000811b1 	.word	0x000811b1
   80040:	00080d45 	.word	0x00080d45
   80044:	00080d45 	.word	0x00080d45
   80048:	00080d45 	.word	0x00080d45
   8004c:	00080d45 	.word	0x00080d45
   80050:	00080d45 	.word	0x00080d45
   80054:	00080d45 	.word	0x00080d45
   80058:	00080d45 	.word	0x00080d45
   8005c:	00080d45 	.word	0x00080d45
   80060:	00080d45 	.word	0x00080d45
   80064:	00080d45 	.word	0x00080d45
   80068:	00000000 	.word	0x00000000
   8006c:	000809a1 	.word	0x000809a1
   80070:	000809b9 	.word	0x000809b9
   80074:	000809d1 	.word	0x000809d1
   80078:	000809e9 	.word	0x000809e9
	...
   80084:	00081b09 	.word	0x00081b09
   80088:	00080d45 	.word	0x00080d45
   8008c:	00080d45 	.word	0x00080d45
   80090:	00080d45 	.word	0x00080d45
   80094:	00080d45 	.word	0x00080d45
   80098:	00080d45 	.word	0x00080d45
   8009c:	00080d45 	.word	0x00080d45
   800a0:	00080d45 	.word	0x00080d45
   800a4:	00000000 	.word	0x00000000
   800a8:	00080d45 	.word	0x00080d45
   800ac:	00080d45 	.word	0x00080d45
   800b0:	00080d45 	.word	0x00080d45
   800b4:	00080d45 	.word	0x00080d45
   800b8:	00080d45 	.word	0x00080d45
   800bc:	00080d45 	.word	0x00080d45
   800c0:	00080d45 	.word	0x00080d45
   800c4:	00080d45 	.word	0x00080d45
   800c8:	00080d45 	.word	0x00080d45
   800cc:	00080d45 	.word	0x00080d45
   800d0:	00080d45 	.word	0x00080d45
   800d4:	00080d45 	.word	0x00080d45
   800d8:	00080d45 	.word	0x00080d45
   800dc:	00080d45 	.word	0x00080d45
   800e0:	00080d45 	.word	0x00080d45
   800e4:	00080d45 	.word	0x00080d45
   800e8:	00080d45 	.word	0x00080d45
   800ec:	00080d45 	.word	0x00080d45
   800f0:	00080d45 	.word	0x00080d45

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00081ec0 	.word	0x00081ec0

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00081ec0 	.word	0x00081ec0
   8013c:	2007043c 	.word	0x2007043c
   80140:	00081ec0 	.word	0x00081ec0
   80144:	00000000 	.word	0x00000000

00080148 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80148:	b580      	push	{r7, lr}
   8014a:	b082      	sub	sp, #8
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	2b07      	cmp	r3, #7
   80154:	d82e      	bhi.n	801b4 <osc_enable+0x6c>
   80156:	a201      	add	r2, pc, #4	; (adr r2, 8015c <osc_enable+0x14>)
   80158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8015c:	000801b5 	.word	0x000801b5
   80160:	0008017d 	.word	0x0008017d
   80164:	00080185 	.word	0x00080185
   80168:	0008018d 	.word	0x0008018d
   8016c:	00080195 	.word	0x00080195
   80170:	0008019d 	.word	0x0008019d
   80174:	000801a5 	.word	0x000801a5
   80178:	000801ad 	.word	0x000801ad
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8017c:	2000      	movs	r0, #0
   8017e:	4b0f      	ldr	r3, [pc, #60]	; (801bc <osc_enable+0x74>)
   80180:	4798      	blx	r3
		break;
   80182:	e017      	b.n	801b4 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80184:	2001      	movs	r0, #1
   80186:	4b0d      	ldr	r3, [pc, #52]	; (801bc <osc_enable+0x74>)
   80188:	4798      	blx	r3
		break;
   8018a:	e013      	b.n	801b4 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8018c:	2000      	movs	r0, #0
   8018e:	4b0c      	ldr	r3, [pc, #48]	; (801c0 <osc_enable+0x78>)
   80190:	4798      	blx	r3
		break;
   80192:	e00f      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80194:	2010      	movs	r0, #16
   80196:	4b0a      	ldr	r3, [pc, #40]	; (801c0 <osc_enable+0x78>)
   80198:	4798      	blx	r3
		break;
   8019a:	e00b      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8019c:	2020      	movs	r0, #32
   8019e:	4b08      	ldr	r3, [pc, #32]	; (801c0 <osc_enable+0x78>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e007      	b.n	801b4 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   801a4:	2000      	movs	r0, #0
   801a6:	4b07      	ldr	r3, [pc, #28]	; (801c4 <osc_enable+0x7c>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e003      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   801ac:	2001      	movs	r0, #1
   801ae:	4b05      	ldr	r3, [pc, #20]	; (801c4 <osc_enable+0x7c>)
   801b0:	4798      	blx	r3
		break;
   801b2:	bf00      	nop
	}
}
   801b4:	3708      	adds	r7, #8
   801b6:	46bd      	mov	sp, r7
   801b8:	bd80      	pop	{r7, pc}
   801ba:	bf00      	nop
   801bc:	00080a85 	.word	0x00080a85
   801c0:	00080af5 	.word	0x00080af5
   801c4:	00080b95 	.word	0x00080b95

000801c8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801c8:	b580      	push	{r7, lr}
   801ca:	b082      	sub	sp, #8
   801cc:	af00      	add	r7, sp, #0
   801ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	2b07      	cmp	r3, #7
   801d4:	d826      	bhi.n	80224 <osc_is_ready+0x5c>
   801d6:	a201      	add	r2, pc, #4	; (adr r2, 801dc <osc_is_ready+0x14>)
   801d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801dc:	000801fd 	.word	0x000801fd
   801e0:	00080201 	.word	0x00080201
   801e4:	00080201 	.word	0x00080201
   801e8:	00080213 	.word	0x00080213
   801ec:	00080213 	.word	0x00080213
   801f0:	00080213 	.word	0x00080213
   801f4:	00080213 	.word	0x00080213
   801f8:	00080213 	.word	0x00080213
	case OSC_SLCK_32K_RC:
		return 1;
   801fc:	2301      	movs	r3, #1
   801fe:	e012      	b.n	80226 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80200:	4b0b      	ldr	r3, [pc, #44]	; (80230 <osc_is_ready+0x68>)
   80202:	4798      	blx	r3
   80204:	4603      	mov	r3, r0
   80206:	2b00      	cmp	r3, #0
   80208:	bf0c      	ite	eq
   8020a:	2300      	moveq	r3, #0
   8020c:	2301      	movne	r3, #1
   8020e:	b2db      	uxtb	r3, r3
   80210:	e009      	b.n	80226 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80212:	4b08      	ldr	r3, [pc, #32]	; (80234 <osc_is_ready+0x6c>)
   80214:	4798      	blx	r3
   80216:	4603      	mov	r3, r0
   80218:	2b00      	cmp	r3, #0
   8021a:	bf0c      	ite	eq
   8021c:	2300      	moveq	r3, #0
   8021e:	2301      	movne	r3, #1
   80220:	b2db      	uxtb	r3, r3
   80222:	e000      	b.n	80226 <osc_is_ready+0x5e>
	}

	return 0;
   80224:	2300      	movs	r3, #0
}
   80226:	4618      	mov	r0, r3
   80228:	3708      	adds	r7, #8
   8022a:	46bd      	mov	sp, r7
   8022c:	bd80      	pop	{r7, pc}
   8022e:	bf00      	nop
   80230:	00080ac1 	.word	0x00080ac1
   80234:	00080c01 	.word	0x00080c01

00080238 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80238:	b480      	push	{r7}
   8023a:	b083      	sub	sp, #12
   8023c:	af00      	add	r7, sp, #0
   8023e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80240:	687b      	ldr	r3, [r7, #4]
   80242:	2b07      	cmp	r3, #7
   80244:	d825      	bhi.n	80292 <osc_get_rate+0x5a>
   80246:	a201      	add	r2, pc, #4	; (adr r2, 8024c <osc_get_rate+0x14>)
   80248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8024c:	0008026d 	.word	0x0008026d
   80250:	00080273 	.word	0x00080273
   80254:	00080279 	.word	0x00080279
   80258:	0008027f 	.word	0x0008027f
   8025c:	00080283 	.word	0x00080283
   80260:	00080287 	.word	0x00080287
   80264:	0008028b 	.word	0x0008028b
   80268:	0008028f 	.word	0x0008028f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8026c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80270:	e010      	b.n	80294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80276:	e00d      	b.n	80294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8027c:	e00a      	b.n	80294 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8027e:	4b08      	ldr	r3, [pc, #32]	; (802a0 <osc_get_rate+0x68>)
   80280:	e008      	b.n	80294 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80282:	4b08      	ldr	r3, [pc, #32]	; (802a4 <osc_get_rate+0x6c>)
   80284:	e006      	b.n	80294 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80286:	4b08      	ldr	r3, [pc, #32]	; (802a8 <osc_get_rate+0x70>)
   80288:	e004      	b.n	80294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8028a:	4b07      	ldr	r3, [pc, #28]	; (802a8 <osc_get_rate+0x70>)
   8028c:	e002      	b.n	80294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8028e:	4b06      	ldr	r3, [pc, #24]	; (802a8 <osc_get_rate+0x70>)
   80290:	e000      	b.n	80294 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80292:	2300      	movs	r3, #0
}
   80294:	4618      	mov	r0, r3
   80296:	370c      	adds	r7, #12
   80298:	46bd      	mov	sp, r7
   8029a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8029e:	4770      	bx	lr
   802a0:	003d0900 	.word	0x003d0900
   802a4:	007a1200 	.word	0x007a1200
   802a8:	00b71b00 	.word	0x00b71b00

000802ac <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802ac:	b580      	push	{r7, lr}
   802ae:	b082      	sub	sp, #8
   802b0:	af00      	add	r7, sp, #0
   802b2:	4603      	mov	r3, r0
   802b4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802b6:	bf00      	nop
   802b8:	79fb      	ldrb	r3, [r7, #7]
   802ba:	4618      	mov	r0, r3
   802bc:	4b05      	ldr	r3, [pc, #20]	; (802d4 <osc_wait_ready+0x28>)
   802be:	4798      	blx	r3
   802c0:	4603      	mov	r3, r0
   802c2:	f083 0301 	eor.w	r3, r3, #1
   802c6:	b2db      	uxtb	r3, r3
   802c8:	2b00      	cmp	r3, #0
   802ca:	d1f5      	bne.n	802b8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802cc:	3708      	adds	r7, #8
   802ce:	46bd      	mov	sp, r7
   802d0:	bd80      	pop	{r7, pc}
   802d2:	bf00      	nop
   802d4:	000801c9 	.word	0x000801c9

000802d8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802d8:	b580      	push	{r7, lr}
   802da:	b086      	sub	sp, #24
   802dc:	af00      	add	r7, sp, #0
   802de:	60f8      	str	r0, [r7, #12]
   802e0:	607a      	str	r2, [r7, #4]
   802e2:	603b      	str	r3, [r7, #0]
   802e4:	460b      	mov	r3, r1
   802e6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802e8:	687b      	ldr	r3, [r7, #4]
   802ea:	2b00      	cmp	r3, #0
   802ec:	d107      	bne.n	802fe <pll_config_init+0x26>
   802ee:	683b      	ldr	r3, [r7, #0]
   802f0:	2b00      	cmp	r3, #0
   802f2:	d104      	bne.n	802fe <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802f4:	68fb      	ldr	r3, [r7, #12]
   802f6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802fa:	601a      	str	r2, [r3, #0]
   802fc:	e019      	b.n	80332 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802fe:	7afb      	ldrb	r3, [r7, #11]
   80300:	4618      	mov	r0, r3
   80302:	4b0d      	ldr	r3, [pc, #52]	; (80338 <pll_config_init+0x60>)
   80304:	4798      	blx	r3
   80306:	4602      	mov	r2, r0
   80308:	687b      	ldr	r3, [r7, #4]
   8030a:	fbb2 f3f3 	udiv	r3, r2, r3
   8030e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   80310:	697b      	ldr	r3, [r7, #20]
   80312:	683a      	ldr	r2, [r7, #0]
   80314:	fb02 f303 	mul.w	r3, r2, r3
   80318:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	3b01      	subs	r3, #1
   8031e:	041a      	lsls	r2, r3, #16
   80320:	4b06      	ldr	r3, [pc, #24]	; (8033c <pll_config_init+0x64>)
   80322:	4013      	ands	r3, r2
   80324:	687a      	ldr	r2, [r7, #4]
   80326:	b2d2      	uxtb	r2, r2
   80328:	4313      	orrs	r3, r2
   8032a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8032e:	68fb      	ldr	r3, [r7, #12]
   80330:	601a      	str	r2, [r3, #0]
	}
}
   80332:	3718      	adds	r7, #24
   80334:	46bd      	mov	sp, r7
   80336:	bd80      	pop	{r7, pc}
   80338:	00080239 	.word	0x00080239
   8033c:	07ff0000 	.word	0x07ff0000

00080340 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80340:	b580      	push	{r7, lr}
   80342:	b082      	sub	sp, #8
   80344:	af00      	add	r7, sp, #0
   80346:	6078      	str	r0, [r7, #4]
   80348:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   8034a:	683b      	ldr	r3, [r7, #0]
   8034c:	2b00      	cmp	r3, #0
   8034e:	d108      	bne.n	80362 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80350:	4b08      	ldr	r3, [pc, #32]	; (80374 <pll_enable+0x34>)
   80352:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80354:	4b08      	ldr	r3, [pc, #32]	; (80378 <pll_enable+0x38>)
   80356:	687a      	ldr	r2, [r7, #4]
   80358:	6812      	ldr	r2, [r2, #0]
   8035a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8035e:	629a      	str	r2, [r3, #40]	; 0x28
   80360:	e005      	b.n	8036e <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80362:	4b05      	ldr	r3, [pc, #20]	; (80378 <pll_enable+0x38>)
   80364:	687a      	ldr	r2, [r7, #4]
   80366:	6812      	ldr	r2, [r2, #0]
   80368:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8036c:	61da      	str	r2, [r3, #28]
	}
}
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	00080c1d 	.word	0x00080c1d
   80378:	400e0600 	.word	0x400e0600

0008037c <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80384:	687b      	ldr	r3, [r7, #4]
   80386:	2b00      	cmp	r3, #0
   80388:	d103      	bne.n	80392 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8038a:	4b05      	ldr	r3, [pc, #20]	; (803a0 <pll_is_locked+0x24>)
   8038c:	4798      	blx	r3
   8038e:	4603      	mov	r3, r0
   80390:	e002      	b.n	80398 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80392:	4b04      	ldr	r3, [pc, #16]	; (803a4 <pll_is_locked+0x28>)
   80394:	4798      	blx	r3
   80396:	4603      	mov	r3, r0
}
   80398:	4618      	mov	r0, r3
   8039a:	3708      	adds	r7, #8
   8039c:	46bd      	mov	sp, r7
   8039e:	bd80      	pop	{r7, pc}
   803a0:	00080c35 	.word	0x00080c35
   803a4:	00080c51 	.word	0x00080c51

000803a8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803a8:	b580      	push	{r7, lr}
   803aa:	b082      	sub	sp, #8
   803ac:	af00      	add	r7, sp, #0
   803ae:	4603      	mov	r3, r0
   803b0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803b2:	79fb      	ldrb	r3, [r7, #7]
   803b4:	3b03      	subs	r3, #3
   803b6:	2b04      	cmp	r3, #4
   803b8:	d808      	bhi.n	803cc <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803ba:	79fb      	ldrb	r3, [r7, #7]
   803bc:	4618      	mov	r0, r3
   803be:	4b05      	ldr	r3, [pc, #20]	; (803d4 <pll_enable_source+0x2c>)
   803c0:	4798      	blx	r3
		osc_wait_ready(e_src);
   803c2:	79fb      	ldrb	r3, [r7, #7]
   803c4:	4618      	mov	r0, r3
   803c6:	4b04      	ldr	r3, [pc, #16]	; (803d8 <pll_enable_source+0x30>)
   803c8:	4798      	blx	r3
		break;
   803ca:	e000      	b.n	803ce <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803cc:	bf00      	nop
	}
}
   803ce:	3708      	adds	r7, #8
   803d0:	46bd      	mov	sp, r7
   803d2:	bd80      	pop	{r7, pc}
   803d4:	00080149 	.word	0x00080149
   803d8:	000802ad 	.word	0x000802ad

000803dc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803dc:	b580      	push	{r7, lr}
   803de:	b082      	sub	sp, #8
   803e0:	af00      	add	r7, sp, #0
   803e2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803e4:	bf00      	nop
   803e6:	6878      	ldr	r0, [r7, #4]
   803e8:	4b04      	ldr	r3, [pc, #16]	; (803fc <pll_wait_for_lock+0x20>)
   803ea:	4798      	blx	r3
   803ec:	4603      	mov	r3, r0
   803ee:	2b00      	cmp	r3, #0
   803f0:	d0f9      	beq.n	803e6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   803f2:	2300      	movs	r3, #0
}
   803f4:	4618      	mov	r0, r3
   803f6:	3708      	adds	r7, #8
   803f8:	46bd      	mov	sp, r7
   803fa:	bd80      	pop	{r7, pc}
   803fc:	0008037d 	.word	0x0008037d

00080400 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80400:	b580      	push	{r7, lr}
   80402:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80404:	2006      	movs	r0, #6
   80406:	4b04      	ldr	r3, [pc, #16]	; (80418 <sysclk_get_main_hz+0x18>)
   80408:	4798      	blx	r3
   8040a:	4602      	mov	r2, r0
   8040c:	4613      	mov	r3, r2
   8040e:	00db      	lsls	r3, r3, #3
   80410:	1a9b      	subs	r3, r3, r2
   80412:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80414:	4618      	mov	r0, r3
   80416:	bd80      	pop	{r7, pc}
   80418:	00080239 	.word	0x00080239

0008041c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8041c:	b580      	push	{r7, lr}
   8041e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80420:	4b02      	ldr	r3, [pc, #8]	; (8042c <sysclk_get_cpu_hz+0x10>)
   80422:	4798      	blx	r3
   80424:	4603      	mov	r3, r0
   80426:	085b      	lsrs	r3, r3, #1
}
   80428:	4618      	mov	r0, r3
   8042a:	bd80      	pop	{r7, pc}
   8042c:	00080401 	.word	0x00080401

00080430 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80430:	b590      	push	{r4, r7, lr}
   80432:	b083      	sub	sp, #12
   80434:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80436:	4b10      	ldr	r3, [pc, #64]	; (80478 <sysclk_init+0x48>)
   80438:	4798      	blx	r3
   8043a:	4603      	mov	r3, r0
   8043c:	4618      	mov	r0, r3
   8043e:	4b0f      	ldr	r3, [pc, #60]	; (8047c <sysclk_init+0x4c>)
   80440:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80442:	2006      	movs	r0, #6
   80444:	4b0e      	ldr	r3, [pc, #56]	; (80480 <sysclk_init+0x50>)
   80446:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80448:	1d3b      	adds	r3, r7, #4
   8044a:	4618      	mov	r0, r3
   8044c:	2106      	movs	r1, #6
   8044e:	2201      	movs	r2, #1
   80450:	230e      	movs	r3, #14
   80452:	4c0c      	ldr	r4, [pc, #48]	; (80484 <sysclk_init+0x54>)
   80454:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80456:	1d3b      	adds	r3, r7, #4
   80458:	4618      	mov	r0, r3
   8045a:	2100      	movs	r1, #0
   8045c:	4b0a      	ldr	r3, [pc, #40]	; (80488 <sysclk_init+0x58>)
   8045e:	4798      	blx	r3
		pll_wait_for_lock(0);
   80460:	2000      	movs	r0, #0
   80462:	4b0a      	ldr	r3, [pc, #40]	; (8048c <sysclk_init+0x5c>)
   80464:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80466:	2010      	movs	r0, #16
   80468:	4b09      	ldr	r3, [pc, #36]	; (80490 <sysclk_init+0x60>)
   8046a:	4798      	blx	r3
		break;
   8046c:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8046e:	4b09      	ldr	r3, [pc, #36]	; (80494 <sysclk_init+0x64>)
   80470:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80472:	370c      	adds	r7, #12
   80474:	46bd      	mov	sp, r7
   80476:	bd90      	pop	{r4, r7, pc}
   80478:	0008041d 	.word	0x0008041d
   8047c:	00080f75 	.word	0x00080f75
   80480:	000803a9 	.word	0x000803a9
   80484:	000802d9 	.word	0x000802d9
   80488:	00080341 	.word	0x00080341
   8048c:	000803dd 	.word	0x000803dd
   80490:	00080a01 	.word	0x00080a01
   80494:	00080df5 	.word	0x00080df5

00080498 <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
   80498:	b580      	push	{r7, lr}
   8049a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8049c:	4b1a      	ldr	r3, [pc, #104]	; (80508 <board_init+0x70>)
   8049e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804a2:	605a      	str	r2, [r3, #4]
#endif

	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   804a4:	200d      	movs	r0, #13
   804a6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804aa:	4b18      	ldr	r3, [pc, #96]	; (8050c <board_init+0x74>)
   804ac:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   804ae:	200d      	movs	r0, #13
   804b0:	4b17      	ldr	r3, [pc, #92]	; (80510 <board_init+0x78>)
   804b2:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   804b4:	200c      	movs	r0, #12
   804b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804ba:	4b14      	ldr	r3, [pc, #80]	; (8050c <board_init+0x74>)
   804bc:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   804be:	202d      	movs	r0, #45	; 0x2d
   804c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804c4:	4b11      	ldr	r3, [pc, #68]	; (8050c <board_init+0x74>)
   804c6:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   804c8:	202c      	movs	r0, #44	; 0x2c
   804ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804ce:	4b0f      	ldr	r3, [pc, #60]	; (8050c <board_init+0x74>)
   804d0:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   804d2:	2087      	movs	r0, #135	; 0x87
   804d4:	490f      	ldr	r1, [pc, #60]	; (80514 <board_init+0x7c>)
   804d6:	4b0d      	ldr	r3, [pc, #52]	; (8050c <board_init+0x74>)
   804d8:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   804da:	2037      	movs	r0, #55	; 0x37
   804dc:	490e      	ldr	r1, [pc, #56]	; (80518 <board_init+0x80>)
   804de:	4b0b      	ldr	r3, [pc, #44]	; (8050c <board_init+0x74>)
   804e0:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   804e2:	200a      	movs	r0, #10
   804e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804e8:	4b08      	ldr	r3, [pc, #32]	; (8050c <board_init+0x74>)
   804ea:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   804ec:	200b      	movs	r0, #11
   804ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804f2:	4b06      	ldr	r3, [pc, #24]	; (8050c <board_init+0x74>)
   804f4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   804f6:	208e      	movs	r0, #142	; 0x8e
   804f8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804fc:	4b03      	ldr	r3, [pc, #12]	; (8050c <board_init+0x74>)
   804fe:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   80500:	208e      	movs	r0, #142	; 0x8e
   80502:	4b06      	ldr	r3, [pc, #24]	; (8051c <board_init+0x84>)
   80504:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   80506:	bd80      	pop	{r7, pc}
   80508:	400e1a50 	.word	0x400e1a50
   8050c:	000807c1 	.word	0x000807c1
   80510:	000806f9 	.word	0x000806f9
   80514:	28000079 	.word	0x28000079
   80518:	28000059 	.word	0x28000059
   8051c:	0008072d 	.word	0x0008072d

00080520 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   80520:	b480      	push	{r7}
   80522:	b085      	sub	sp, #20
   80524:	af00      	add	r7, sp, #0
   80526:	60f8      	str	r0, [r7, #12]
   80528:	60b9      	str	r1, [r7, #8]
   8052a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	2b00      	cmp	r3, #0
   80530:	d003      	beq.n	8053a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   80532:	68fb      	ldr	r3, [r7, #12]
   80534:	68ba      	ldr	r2, [r7, #8]
   80536:	665a      	str	r2, [r3, #100]	; 0x64
   80538:	e002      	b.n	80540 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8053a:	68fb      	ldr	r3, [r7, #12]
   8053c:	68ba      	ldr	r2, [r7, #8]
   8053e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   80540:	3714      	adds	r7, #20
   80542:	46bd      	mov	sp, r7
   80544:	f85d 7b04 	ldr.w	r7, [sp], #4
   80548:	4770      	bx	lr
   8054a:	bf00      	nop

0008054c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   8054c:	b480      	push	{r7}
   8054e:	b087      	sub	sp, #28
   80550:	af00      	add	r7, sp, #0
   80552:	60f8      	str	r0, [r7, #12]
   80554:	60b9      	str	r1, [r7, #8]
   80556:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80558:	68fb      	ldr	r3, [r7, #12]
   8055a:	687a      	ldr	r2, [r7, #4]
   8055c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8055e:	68bb      	ldr	r3, [r7, #8]
   80560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80564:	d01f      	beq.n	805a6 <pio_set_peripheral+0x5a>
   80566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8056a:	d805      	bhi.n	80578 <pio_set_peripheral+0x2c>
   8056c:	2b00      	cmp	r3, #0
   8056e:	d027      	beq.n	805c0 <pio_set_peripheral+0x74>
   80570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80574:	d00a      	beq.n	8058c <pio_set_peripheral+0x40>
   80576:	e01f      	b.n	805b8 <pio_set_peripheral+0x6c>
   80578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8057c:	d020      	beq.n	805c0 <pio_set_peripheral+0x74>
   8057e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80582:	d01d      	beq.n	805c0 <pio_set_peripheral+0x74>
   80584:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80588:	d01a      	beq.n	805c0 <pio_set_peripheral+0x74>
   8058a:	e015      	b.n	805b8 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8058c:	68fb      	ldr	r3, [r7, #12]
   8058e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80590:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80592:	68fb      	ldr	r3, [r7, #12]
   80594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80596:	687b      	ldr	r3, [r7, #4]
   80598:	43d9      	mvns	r1, r3
   8059a:	697b      	ldr	r3, [r7, #20]
   8059c:	400b      	ands	r3, r1
   8059e:	401a      	ands	r2, r3
   805a0:	68fb      	ldr	r3, [r7, #12]
   805a2:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   805a4:	e008      	b.n	805b8 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   805a6:	68fb      	ldr	r3, [r7, #12]
   805a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   805aa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   805ac:	687a      	ldr	r2, [r7, #4]
   805ae:	697b      	ldr	r3, [r7, #20]
   805b0:	431a      	orrs	r2, r3
   805b2:	68fb      	ldr	r3, [r7, #12]
   805b4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   805b6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   805b8:	68fb      	ldr	r3, [r7, #12]
   805ba:	687a      	ldr	r2, [r7, #4]
   805bc:	605a      	str	r2, [r3, #4]
   805be:	e000      	b.n	805c2 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   805c0:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   805c2:	371c      	adds	r7, #28
   805c4:	46bd      	mov	sp, r7
   805c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   805ca:	4770      	bx	lr

000805cc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   805cc:	b580      	push	{r7, lr}
   805ce:	b084      	sub	sp, #16
   805d0:	af00      	add	r7, sp, #0
   805d2:	60f8      	str	r0, [r7, #12]
   805d4:	60b9      	str	r1, [r7, #8]
   805d6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   805d8:	68f8      	ldr	r0, [r7, #12]
   805da:	68b9      	ldr	r1, [r7, #8]
   805dc:	4b18      	ldr	r3, [pc, #96]	; (80640 <pio_set_input+0x74>)
   805de:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   805e0:	687b      	ldr	r3, [r7, #4]
   805e2:	f003 0301 	and.w	r3, r3, #1
   805e6:	68f8      	ldr	r0, [r7, #12]
   805e8:	68b9      	ldr	r1, [r7, #8]
   805ea:	461a      	mov	r2, r3
   805ec:	4b15      	ldr	r3, [pc, #84]	; (80644 <pio_set_input+0x78>)
   805ee:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   805f0:	687b      	ldr	r3, [r7, #4]
   805f2:	f003 030a 	and.w	r3, r3, #10
   805f6:	2b00      	cmp	r3, #0
   805f8:	d003      	beq.n	80602 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   805fa:	68fb      	ldr	r3, [r7, #12]
   805fc:	68ba      	ldr	r2, [r7, #8]
   805fe:	621a      	str	r2, [r3, #32]
   80600:	e002      	b.n	80608 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80602:	68fb      	ldr	r3, [r7, #12]
   80604:	68ba      	ldr	r2, [r7, #8]
   80606:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80608:	687b      	ldr	r3, [r7, #4]
   8060a:	f003 0302 	and.w	r3, r3, #2
   8060e:	2b00      	cmp	r3, #0
   80610:	d004      	beq.n	8061c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   80612:	68fb      	ldr	r3, [r7, #12]
   80614:	68ba      	ldr	r2, [r7, #8]
   80616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8061a:	e008      	b.n	8062e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8061c:	687b      	ldr	r3, [r7, #4]
   8061e:	f003 0308 	and.w	r3, r3, #8
   80622:	2b00      	cmp	r3, #0
   80624:	d003      	beq.n	8062e <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   80626:	68fb      	ldr	r3, [r7, #12]
   80628:	68ba      	ldr	r2, [r7, #8]
   8062a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8062e:	68fb      	ldr	r3, [r7, #12]
   80630:	68ba      	ldr	r2, [r7, #8]
   80632:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   80634:	68fb      	ldr	r3, [r7, #12]
   80636:	68ba      	ldr	r2, [r7, #8]
   80638:	601a      	str	r2, [r3, #0]
}
   8063a:	3710      	adds	r7, #16
   8063c:	46bd      	mov	sp, r7
   8063e:	bd80      	pop	{r7, pc}
   80640:	000806ad 	.word	0x000806ad
   80644:	00080521 	.word	0x00080521

00080648 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80648:	b580      	push	{r7, lr}
   8064a:	b084      	sub	sp, #16
   8064c:	af00      	add	r7, sp, #0
   8064e:	60f8      	str	r0, [r7, #12]
   80650:	60b9      	str	r1, [r7, #8]
   80652:	607a      	str	r2, [r7, #4]
   80654:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   80656:	68f8      	ldr	r0, [r7, #12]
   80658:	68b9      	ldr	r1, [r7, #8]
   8065a:	4b12      	ldr	r3, [pc, #72]	; (806a4 <pio_set_output+0x5c>)
   8065c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8065e:	68f8      	ldr	r0, [r7, #12]
   80660:	68b9      	ldr	r1, [r7, #8]
   80662:	69ba      	ldr	r2, [r7, #24]
   80664:	4b10      	ldr	r3, [pc, #64]	; (806a8 <pio_set_output+0x60>)
   80666:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	2b00      	cmp	r3, #0
   8066c:	d003      	beq.n	80676 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   8066e:	68fb      	ldr	r3, [r7, #12]
   80670:	68ba      	ldr	r2, [r7, #8]
   80672:	651a      	str	r2, [r3, #80]	; 0x50
   80674:	e002      	b.n	8067c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80676:	68fb      	ldr	r3, [r7, #12]
   80678:	68ba      	ldr	r2, [r7, #8]
   8067a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8067c:	687b      	ldr	r3, [r7, #4]
   8067e:	2b00      	cmp	r3, #0
   80680:	d003      	beq.n	8068a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   80682:	68fb      	ldr	r3, [r7, #12]
   80684:	68ba      	ldr	r2, [r7, #8]
   80686:	631a      	str	r2, [r3, #48]	; 0x30
   80688:	e002      	b.n	80690 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8068a:	68fb      	ldr	r3, [r7, #12]
   8068c:	68ba      	ldr	r2, [r7, #8]
   8068e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80690:	68fb      	ldr	r3, [r7, #12]
   80692:	68ba      	ldr	r2, [r7, #8]
   80694:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   80696:	68fb      	ldr	r3, [r7, #12]
   80698:	68ba      	ldr	r2, [r7, #8]
   8069a:	601a      	str	r2, [r3, #0]
}
   8069c:	3710      	adds	r7, #16
   8069e:	46bd      	mov	sp, r7
   806a0:	bd80      	pop	{r7, pc}
   806a2:	bf00      	nop
   806a4:	000806ad 	.word	0x000806ad
   806a8:	00080521 	.word	0x00080521

000806ac <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   806ac:	b480      	push	{r7}
   806ae:	b083      	sub	sp, #12
   806b0:	af00      	add	r7, sp, #0
   806b2:	6078      	str	r0, [r7, #4]
   806b4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   806b6:	687b      	ldr	r3, [r7, #4]
   806b8:	683a      	ldr	r2, [r7, #0]
   806ba:	645a      	str	r2, [r3, #68]	; 0x44
}
   806bc:	370c      	adds	r7, #12
   806be:	46bd      	mov	sp, r7
   806c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   806c4:	4770      	bx	lr
   806c6:	bf00      	nop

000806c8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   806c8:	b480      	push	{r7}
   806ca:	b083      	sub	sp, #12
   806cc:	af00      	add	r7, sp, #0
   806ce:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   806d0:	687b      	ldr	r3, [r7, #4]
   806d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   806d4:	4618      	mov	r0, r3
   806d6:	370c      	adds	r7, #12
   806d8:	46bd      	mov	sp, r7
   806da:	f85d 7b04 	ldr.w	r7, [sp], #4
   806de:	4770      	bx	lr

000806e0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   806e0:	b480      	push	{r7}
   806e2:	b083      	sub	sp, #12
   806e4:	af00      	add	r7, sp, #0
   806e6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   806e8:	687b      	ldr	r3, [r7, #4]
   806ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   806ec:	4618      	mov	r0, r3
   806ee:	370c      	adds	r7, #12
   806f0:	46bd      	mov	sp, r7
   806f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   806f6:	4770      	bx	lr

000806f8 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   806f8:	b480      	push	{r7}
   806fa:	b085      	sub	sp, #20
   806fc:	af00      	add	r7, sp, #0
   806fe:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80700:	687b      	ldr	r3, [r7, #4]
   80702:	095b      	lsrs	r3, r3, #5
   80704:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80708:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8070c:	025b      	lsls	r3, r3, #9
   8070e:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80710:	687b      	ldr	r3, [r7, #4]
   80712:	f003 031f 	and.w	r3, r3, #31
   80716:	2201      	movs	r2, #1
   80718:	fa02 f303 	lsl.w	r3, r2, r3
   8071c:	461a      	mov	r2, r3
   8071e:	68fb      	ldr	r3, [r7, #12]
   80720:	631a      	str	r2, [r3, #48]	; 0x30
}
   80722:	3714      	adds	r7, #20
   80724:	46bd      	mov	sp, r7
   80726:	f85d 7b04 	ldr.w	r7, [sp], #4
   8072a:	4770      	bx	lr

0008072c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   8072c:	b480      	push	{r7}
   8072e:	b085      	sub	sp, #20
   80730:	af00      	add	r7, sp, #0
   80732:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80734:	687b      	ldr	r3, [r7, #4]
   80736:	095b      	lsrs	r3, r3, #5
   80738:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8073c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80740:	025b      	lsls	r3, r3, #9
   80742:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80744:	687b      	ldr	r3, [r7, #4]
   80746:	f003 031f 	and.w	r3, r3, #31
   8074a:	2201      	movs	r2, #1
   8074c:	fa02 f303 	lsl.w	r3, r2, r3
   80750:	461a      	mov	r2, r3
   80752:	68fb      	ldr	r3, [r7, #12]
   80754:	635a      	str	r2, [r3, #52]	; 0x34
}
   80756:	3714      	adds	r7, #20
   80758:	46bd      	mov	sp, r7
   8075a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8075e:	4770      	bx	lr

00080760 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   80760:	b480      	push	{r7}
   80762:	b085      	sub	sp, #20
   80764:	af00      	add	r7, sp, #0
   80766:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80768:	687b      	ldr	r3, [r7, #4]
   8076a:	095b      	lsrs	r3, r3, #5
   8076c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80770:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80774:	025b      	lsls	r3, r3, #9
   80776:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   80778:	68fb      	ldr	r3, [r7, #12]
   8077a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8077c:	687b      	ldr	r3, [r7, #4]
   8077e:	f003 031f 	and.w	r3, r3, #31
   80782:	2101      	movs	r1, #1
   80784:	fa01 f303 	lsl.w	r3, r1, r3
   80788:	4013      	ands	r3, r2
   8078a:	2b00      	cmp	r3, #0
   8078c:	d009      	beq.n	807a2 <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8078e:	687b      	ldr	r3, [r7, #4]
   80790:	f003 031f 	and.w	r3, r3, #31
   80794:	2201      	movs	r2, #1
   80796:	fa02 f303 	lsl.w	r3, r2, r3
   8079a:	461a      	mov	r2, r3
   8079c:	68fb      	ldr	r3, [r7, #12]
   8079e:	635a      	str	r2, [r3, #52]	; 0x34
   807a0:	e008      	b.n	807b4 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   807a2:	687b      	ldr	r3, [r7, #4]
   807a4:	f003 031f 	and.w	r3, r3, #31
   807a8:	2201      	movs	r2, #1
   807aa:	fa02 f303 	lsl.w	r3, r2, r3
   807ae:	461a      	mov	r2, r3
   807b0:	68fb      	ldr	r3, [r7, #12]
   807b2:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   807b4:	3714      	adds	r7, #20
   807b6:	46bd      	mov	sp, r7
   807b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   807bc:	4770      	bx	lr
   807be:	bf00      	nop

000807c0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   807c0:	b590      	push	{r4, r7, lr}
   807c2:	b087      	sub	sp, #28
   807c4:	af02      	add	r7, sp, #8
   807c6:	6078      	str	r0, [r7, #4]
   807c8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   807ca:	687b      	ldr	r3, [r7, #4]
   807cc:	095b      	lsrs	r3, r3, #5
   807ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   807d2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   807d6:	025b      	lsls	r3, r3, #9
   807d8:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   807da:	683b      	ldr	r3, [r7, #0]
   807dc:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   807e0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   807e4:	d048      	beq.n	80878 <pio_configure_pin+0xb8>
   807e6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   807ea:	d806      	bhi.n	807fa <pio_configure_pin+0x3a>
   807ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   807f0:	d00a      	beq.n	80808 <pio_configure_pin+0x48>
   807f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   807f6:	d023      	beq.n	80840 <pio_configure_pin+0x80>
   807f8:	e070      	b.n	808dc <pio_configure_pin+0x11c>
   807fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   807fe:	d047      	beq.n	80890 <pio_configure_pin+0xd0>
   80800:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80804:	d044      	beq.n	80890 <pio_configure_pin+0xd0>
   80806:	e069      	b.n	808dc <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80808:	687b      	ldr	r3, [r7, #4]
   8080a:	f003 031f 	and.w	r3, r3, #31
   8080e:	2201      	movs	r2, #1
   80810:	fa02 f303 	lsl.w	r3, r2, r3
   80814:	68f8      	ldr	r0, [r7, #12]
   80816:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8081a:	461a      	mov	r2, r3
   8081c:	4b33      	ldr	r3, [pc, #204]	; (808ec <pio_configure_pin+0x12c>)
   8081e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80820:	687b      	ldr	r3, [r7, #4]
   80822:	f003 031f 	and.w	r3, r3, #31
   80826:	2201      	movs	r2, #1
   80828:	fa02 f303 	lsl.w	r3, r2, r3
   8082c:	461a      	mov	r2, r3
   8082e:	683b      	ldr	r3, [r7, #0]
   80830:	f003 0301 	and.w	r3, r3, #1
   80834:	68f8      	ldr	r0, [r7, #12]
   80836:	4611      	mov	r1, r2
   80838:	461a      	mov	r2, r3
   8083a:	4b2d      	ldr	r3, [pc, #180]	; (808f0 <pio_configure_pin+0x130>)
   8083c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8083e:	e04f      	b.n	808e0 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80840:	687b      	ldr	r3, [r7, #4]
   80842:	f003 031f 	and.w	r3, r3, #31
   80846:	2201      	movs	r2, #1
   80848:	fa02 f303 	lsl.w	r3, r2, r3
   8084c:	68f8      	ldr	r0, [r7, #12]
   8084e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80852:	461a      	mov	r2, r3
   80854:	4b25      	ldr	r3, [pc, #148]	; (808ec <pio_configure_pin+0x12c>)
   80856:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80858:	687b      	ldr	r3, [r7, #4]
   8085a:	f003 031f 	and.w	r3, r3, #31
   8085e:	2201      	movs	r2, #1
   80860:	fa02 f303 	lsl.w	r3, r2, r3
   80864:	461a      	mov	r2, r3
   80866:	683b      	ldr	r3, [r7, #0]
   80868:	f003 0301 	and.w	r3, r3, #1
   8086c:	68f8      	ldr	r0, [r7, #12]
   8086e:	4611      	mov	r1, r2
   80870:	461a      	mov	r2, r3
   80872:	4b1f      	ldr	r3, [pc, #124]	; (808f0 <pio_configure_pin+0x130>)
   80874:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80876:	e033      	b.n	808e0 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80878:	687b      	ldr	r3, [r7, #4]
   8087a:	f003 031f 	and.w	r3, r3, #31
   8087e:	2201      	movs	r2, #1
   80880:	fa02 f303 	lsl.w	r3, r2, r3
   80884:	68f8      	ldr	r0, [r7, #12]
   80886:	4619      	mov	r1, r3
   80888:	683a      	ldr	r2, [r7, #0]
   8088a:	4b1a      	ldr	r3, [pc, #104]	; (808f4 <pio_configure_pin+0x134>)
   8088c:	4798      	blx	r3
		break;
   8088e:	e027      	b.n	808e0 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80890:	687b      	ldr	r3, [r7, #4]
   80892:	f003 031f 	and.w	r3, r3, #31
   80896:	2201      	movs	r2, #1
   80898:	fa02 f303 	lsl.w	r3, r2, r3
   8089c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8089e:	683b      	ldr	r3, [r7, #0]
   808a0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808a4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   808a8:	bf14      	ite	ne
   808aa:	2300      	movne	r3, #0
   808ac:	2301      	moveq	r3, #1
   808ae:	b2db      	uxtb	r3, r3
   808b0:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   808b2:	683b      	ldr	r3, [r7, #0]
   808b4:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808b8:	2b00      	cmp	r3, #0
   808ba:	bf0c      	ite	eq
   808bc:	2300      	moveq	r3, #0
   808be:	2301      	movne	r3, #1
   808c0:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   808c2:	6838      	ldr	r0, [r7, #0]
   808c4:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808c8:	2800      	cmp	r0, #0
   808ca:	bf0c      	ite	eq
   808cc:	2000      	moveq	r0, #0
   808ce:	2001      	movne	r0, #1
   808d0:	b2c0      	uxtb	r0, r0
   808d2:	9000      	str	r0, [sp, #0]
   808d4:	68f8      	ldr	r0, [r7, #12]
   808d6:	4c08      	ldr	r4, [pc, #32]	; (808f8 <pio_configure_pin+0x138>)
   808d8:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   808da:	e001      	b.n	808e0 <pio_configure_pin+0x120>

	default:
		return 0;
   808dc:	2300      	movs	r3, #0
   808de:	e000      	b.n	808e2 <pio_configure_pin+0x122>
	}

	return 1;
   808e0:	2301      	movs	r3, #1
}
   808e2:	4618      	mov	r0, r3
   808e4:	3714      	adds	r7, #20
   808e6:	46bd      	mov	sp, r7
   808e8:	bd90      	pop	{r4, r7, pc}
   808ea:	bf00      	nop
   808ec:	0008054d 	.word	0x0008054d
   808f0:	00080521 	.word	0x00080521
   808f4:	000805cd 	.word	0x000805cd
   808f8:	00080649 	.word	0x00080649

000808fc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   808fc:	b580      	push	{r7, lr}
   808fe:	b084      	sub	sp, #16
   80900:	af00      	add	r7, sp, #0
   80902:	6078      	str	r0, [r7, #4]
   80904:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80906:	6878      	ldr	r0, [r7, #4]
   80908:	4b22      	ldr	r3, [pc, #136]	; (80994 <pio_handler_process+0x98>)
   8090a:	4798      	blx	r3
   8090c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8090e:	6878      	ldr	r0, [r7, #4]
   80910:	4b21      	ldr	r3, [pc, #132]	; (80998 <pio_handler_process+0x9c>)
   80912:	4798      	blx	r3
   80914:	4603      	mov	r3, r0
   80916:	68fa      	ldr	r2, [r7, #12]
   80918:	4013      	ands	r3, r2
   8091a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   8091c:	68fb      	ldr	r3, [r7, #12]
   8091e:	2b00      	cmp	r3, #0
   80920:	d035      	beq.n	8098e <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   80922:	2300      	movs	r3, #0
   80924:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   80926:	e02f      	b.n	80988 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80928:	4a1c      	ldr	r2, [pc, #112]	; (8099c <pio_handler_process+0xa0>)
   8092a:	68bb      	ldr	r3, [r7, #8]
   8092c:	011b      	lsls	r3, r3, #4
   8092e:	4413      	add	r3, r2
   80930:	681a      	ldr	r2, [r3, #0]
   80932:	683b      	ldr	r3, [r7, #0]
   80934:	429a      	cmp	r2, r3
   80936:	d124      	bne.n	80982 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80938:	4a18      	ldr	r2, [pc, #96]	; (8099c <pio_handler_process+0xa0>)
   8093a:	68bb      	ldr	r3, [r7, #8]
   8093c:	011b      	lsls	r3, r3, #4
   8093e:	4413      	add	r3, r2
   80940:	685a      	ldr	r2, [r3, #4]
   80942:	68fb      	ldr	r3, [r7, #12]
   80944:	4013      	ands	r3, r2
   80946:	2b00      	cmp	r3, #0
   80948:	d01b      	beq.n	80982 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8094a:	4a14      	ldr	r2, [pc, #80]	; (8099c <pio_handler_process+0xa0>)
   8094c:	68bb      	ldr	r3, [r7, #8]
   8094e:	011b      	lsls	r3, r3, #4
   80950:	4413      	add	r3, r2
   80952:	3308      	adds	r3, #8
   80954:	685b      	ldr	r3, [r3, #4]
   80956:	4911      	ldr	r1, [pc, #68]	; (8099c <pio_handler_process+0xa0>)
   80958:	68ba      	ldr	r2, [r7, #8]
   8095a:	0112      	lsls	r2, r2, #4
   8095c:	440a      	add	r2, r1
   8095e:	6811      	ldr	r1, [r2, #0]
   80960:	480e      	ldr	r0, [pc, #56]	; (8099c <pio_handler_process+0xa0>)
   80962:	68ba      	ldr	r2, [r7, #8]
   80964:	0112      	lsls	r2, r2, #4
   80966:	4402      	add	r2, r0
   80968:	6852      	ldr	r2, [r2, #4]
   8096a:	4608      	mov	r0, r1
   8096c:	4611      	mov	r1, r2
   8096e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80970:	4a0a      	ldr	r2, [pc, #40]	; (8099c <pio_handler_process+0xa0>)
   80972:	68bb      	ldr	r3, [r7, #8]
   80974:	011b      	lsls	r3, r3, #4
   80976:	4413      	add	r3, r2
   80978:	685b      	ldr	r3, [r3, #4]
   8097a:	43db      	mvns	r3, r3
   8097c:	68fa      	ldr	r2, [r7, #12]
   8097e:	4013      	ands	r3, r2
   80980:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   80982:	68bb      	ldr	r3, [r7, #8]
   80984:	3301      	adds	r3, #1
   80986:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80988:	68fb      	ldr	r3, [r7, #12]
   8098a:	2b00      	cmp	r3, #0
   8098c:	d1cc      	bne.n	80928 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   8098e:	3710      	adds	r7, #16
   80990:	46bd      	mov	sp, r7
   80992:	bd80      	pop	{r7, pc}
   80994:	000806c9 	.word	0x000806c9
   80998:	000806e1 	.word	0x000806e1
   8099c:	20070454 	.word	0x20070454

000809a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   809a0:	b580      	push	{r7, lr}
   809a2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   809a4:	4802      	ldr	r0, [pc, #8]	; (809b0 <PIOA_Handler+0x10>)
   809a6:	210b      	movs	r1, #11
   809a8:	4b02      	ldr	r3, [pc, #8]	; (809b4 <PIOA_Handler+0x14>)
   809aa:	4798      	blx	r3
}
   809ac:	bd80      	pop	{r7, pc}
   809ae:	bf00      	nop
   809b0:	400e0e00 	.word	0x400e0e00
   809b4:	000808fd 	.word	0x000808fd

000809b8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   809b8:	b580      	push	{r7, lr}
   809ba:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   809bc:	4802      	ldr	r0, [pc, #8]	; (809c8 <PIOB_Handler+0x10>)
   809be:	210c      	movs	r1, #12
   809c0:	4b02      	ldr	r3, [pc, #8]	; (809cc <PIOB_Handler+0x14>)
   809c2:	4798      	blx	r3
}
   809c4:	bd80      	pop	{r7, pc}
   809c6:	bf00      	nop
   809c8:	400e1000 	.word	0x400e1000
   809cc:	000808fd 	.word	0x000808fd

000809d0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   809d0:	b580      	push	{r7, lr}
   809d2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   809d4:	4802      	ldr	r0, [pc, #8]	; (809e0 <PIOC_Handler+0x10>)
   809d6:	210d      	movs	r1, #13
   809d8:	4b02      	ldr	r3, [pc, #8]	; (809e4 <PIOC_Handler+0x14>)
   809da:	4798      	blx	r3
}
   809dc:	bd80      	pop	{r7, pc}
   809de:	bf00      	nop
   809e0:	400e1200 	.word	0x400e1200
   809e4:	000808fd 	.word	0x000808fd

000809e8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   809e8:	b580      	push	{r7, lr}
   809ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   809ec:	4802      	ldr	r0, [pc, #8]	; (809f8 <PIOD_Handler+0x10>)
   809ee:	210e      	movs	r1, #14
   809f0:	4b02      	ldr	r3, [pc, #8]	; (809fc <PIOD_Handler+0x14>)
   809f2:	4798      	blx	r3
}
   809f4:	bd80      	pop	{r7, pc}
   809f6:	bf00      	nop
   809f8:	400e1400 	.word	0x400e1400
   809fc:	000808fd 	.word	0x000808fd

00080a00 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   80a00:	b480      	push	{r7}
   80a02:	b085      	sub	sp, #20
   80a04:	af00      	add	r7, sp, #0
   80a06:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80a08:	4b1d      	ldr	r3, [pc, #116]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a0a:	4a1d      	ldr	r2, [pc, #116]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80a0e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80a12:	687a      	ldr	r2, [r7, #4]
   80a14:	430a      	orrs	r2, r1
   80a16:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a1c:	60fb      	str	r3, [r7, #12]
   80a1e:	e007      	b.n	80a30 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a20:	68fb      	ldr	r3, [r7, #12]
   80a22:	2b00      	cmp	r3, #0
   80a24:	d101      	bne.n	80a2a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   80a26:	2301      	movs	r3, #1
   80a28:	e023      	b.n	80a72 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   80a2a:	68fb      	ldr	r3, [r7, #12]
   80a2c:	3b01      	subs	r3, #1
   80a2e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a30:	4b13      	ldr	r3, [pc, #76]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a34:	f003 0308 	and.w	r3, r3, #8
   80a38:	2b00      	cmp	r3, #0
   80a3a:	d0f1      	beq.n	80a20 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80a3c:	4b10      	ldr	r3, [pc, #64]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a3e:	4a10      	ldr	r2, [pc, #64]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80a42:	f022 0203 	bic.w	r2, r2, #3
   80a46:	f042 0202 	orr.w	r2, r2, #2
   80a4a:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a50:	60fb      	str	r3, [r7, #12]
   80a52:	e007      	b.n	80a64 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a54:	68fb      	ldr	r3, [r7, #12]
   80a56:	2b00      	cmp	r3, #0
   80a58:	d101      	bne.n	80a5e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   80a5a:	2301      	movs	r3, #1
   80a5c:	e009      	b.n	80a72 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   80a5e:	68fb      	ldr	r3, [r7, #12]
   80a60:	3b01      	subs	r3, #1
   80a62:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a64:	4b06      	ldr	r3, [pc, #24]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a68:	f003 0308 	and.w	r3, r3, #8
   80a6c:	2b00      	cmp	r3, #0
   80a6e:	d0f1      	beq.n	80a54 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80a70:	2300      	movs	r3, #0
}
   80a72:	4618      	mov	r0, r3
   80a74:	3714      	adds	r7, #20
   80a76:	46bd      	mov	sp, r7
   80a78:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a7c:	4770      	bx	lr
   80a7e:	bf00      	nop
   80a80:	400e0600 	.word	0x400e0600

00080a84 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   80a84:	b480      	push	{r7}
   80a86:	b083      	sub	sp, #12
   80a88:	af00      	add	r7, sp, #0
   80a8a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   80a8c:	687b      	ldr	r3, [r7, #4]
   80a8e:	2b01      	cmp	r3, #1
   80a90:	d107      	bne.n	80aa2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   80a92:	4a0a      	ldr	r2, [pc, #40]	; (80abc <pmc_switch_sclk_to_32kxtal+0x38>)
   80a94:	4b09      	ldr	r3, [pc, #36]	; (80abc <pmc_switch_sclk_to_32kxtal+0x38>)
   80a96:	689b      	ldr	r3, [r3, #8]
   80a98:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80aa0:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   80aa2:	4a06      	ldr	r2, [pc, #24]	; (80abc <pmc_switch_sclk_to_32kxtal+0x38>)
   80aa4:	4b05      	ldr	r3, [pc, #20]	; (80abc <pmc_switch_sclk_to_32kxtal+0x38>)
   80aa6:	681b      	ldr	r3, [r3, #0]
   80aa8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80aac:	f043 0308 	orr.w	r3, r3, #8
   80ab0:	6013      	str	r3, [r2, #0]
}
   80ab2:	370c      	adds	r7, #12
   80ab4:	46bd      	mov	sp, r7
   80ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80aba:	4770      	bx	lr
   80abc:	400e1a10 	.word	0x400e1a10

00080ac0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   80ac0:	b480      	push	{r7}
   80ac2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   80ac4:	4b09      	ldr	r3, [pc, #36]	; (80aec <pmc_osc_is_ready_32kxtal+0x2c>)
   80ac6:	695b      	ldr	r3, [r3, #20]
   80ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   80acc:	2b00      	cmp	r3, #0
   80ace:	d007      	beq.n	80ae0 <pmc_osc_is_ready_32kxtal+0x20>
   80ad0:	4b07      	ldr	r3, [pc, #28]	; (80af0 <pmc_osc_is_ready_32kxtal+0x30>)
   80ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80ad8:	2b00      	cmp	r3, #0
   80ada:	d001      	beq.n	80ae0 <pmc_osc_is_ready_32kxtal+0x20>
   80adc:	2301      	movs	r3, #1
   80ade:	e000      	b.n	80ae2 <pmc_osc_is_ready_32kxtal+0x22>
   80ae0:	2300      	movs	r3, #0
}
   80ae2:	4618      	mov	r0, r3
   80ae4:	46bd      	mov	sp, r7
   80ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80aea:	4770      	bx	lr
   80aec:	400e1a10 	.word	0x400e1a10
   80af0:	400e0600 	.word	0x400e0600

00080af4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   80af4:	b480      	push	{r7}
   80af6:	b085      	sub	sp, #20
   80af8:	af00      	add	r7, sp, #0
   80afa:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   80afc:	2300      	movs	r3, #0
   80afe:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   80b00:	4b21      	ldr	r3, [pc, #132]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b02:	6a1b      	ldr	r3, [r3, #32]
   80b04:	f003 0301 	and.w	r3, r3, #1
   80b08:	2b00      	cmp	r3, #0
   80b0a:	d00e      	beq.n	80b2a <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b0c:	4a1e      	ldr	r2, [pc, #120]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b0e:	4b1e      	ldr	r3, [pc, #120]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b10:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   80b12:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b16:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   80b1a:	6879      	ldr	r1, [r7, #4]
   80b1c:	430b      	orrs	r3, r1
   80b1e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b22:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b26:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80b28:	e00b      	b.n	80b42 <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   80b2a:	2301      	movs	r3, #1
   80b2c:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b2e:	4a16      	ldr	r2, [pc, #88]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b30:	4b15      	ldr	r3, [pc, #84]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b32:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   80b34:	4b15      	ldr	r3, [pc, #84]	; (80b8c <pmc_switch_mainck_to_fastrc+0x98>)
   80b36:	400b      	ands	r3, r1
   80b38:	6879      	ldr	r1, [r7, #4]
   80b3a:	4319      	orrs	r1, r3
   80b3c:	4b14      	ldr	r3, [pc, #80]	; (80b90 <pmc_switch_mainck_to_fastrc+0x9c>)
   80b3e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b40:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80b42:	bf00      	nop
   80b44:	4b10      	ldr	r3, [pc, #64]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80b4c:	2b00      	cmp	r3, #0
   80b4e:	d0f9      	beq.n	80b44 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   80b50:	4a0d      	ldr	r2, [pc, #52]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b52:	4b0d      	ldr	r3, [pc, #52]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b54:	6a1b      	ldr	r3, [r3, #32]
   80b56:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   80b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80b5e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b62:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   80b64:	68fb      	ldr	r3, [r7, #12]
   80b66:	2b00      	cmp	r3, #0
   80b68:	d009      	beq.n	80b7e <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b6a:	4a07      	ldr	r2, [pc, #28]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b6c:	4b06      	ldr	r3, [pc, #24]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b6e:	6a1b      	ldr	r3, [r3, #32]
   80b70:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b74:	f023 0301 	bic.w	r3, r3, #1
   80b78:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b7c:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   80b7e:	3714      	adds	r7, #20
   80b80:	46bd      	mov	sp, r7
   80b82:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b86:	4770      	bx	lr
   80b88:	400e0600 	.word	0x400e0600
   80b8c:	ffc8c086 	.word	0xffc8c086
   80b90:	00373f09 	.word	0x00373f09

00080b94 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   80b94:	b480      	push	{r7}
   80b96:	b083      	sub	sp, #12
   80b98:	af00      	add	r7, sp, #0
   80b9a:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80b9c:	687b      	ldr	r3, [r7, #4]
   80b9e:	2b00      	cmp	r3, #0
   80ba0:	d008      	beq.n	80bb4 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80ba2:	4912      	ldr	r1, [pc, #72]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80ba4:	4b11      	ldr	r3, [pc, #68]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80ba6:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80ba8:	4a11      	ldr	r2, [pc, #68]	; (80bf0 <pmc_switch_mainck_to_xtal+0x5c>)
   80baa:	401a      	ands	r2, r3
   80bac:	4b11      	ldr	r3, [pc, #68]	; (80bf4 <pmc_switch_mainck_to_xtal+0x60>)
   80bae:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bb0:	620b      	str	r3, [r1, #32]
   80bb2:	e016      	b.n	80be2 <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bb4:	490d      	ldr	r1, [pc, #52]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bb6:	4b0d      	ldr	r3, [pc, #52]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bb8:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80bba:	4a0f      	ldr	r2, [pc, #60]	; (80bf8 <pmc_switch_mainck_to_xtal+0x64>)
   80bbc:	401a      	ands	r2, r3
   80bbe:	4b0f      	ldr	r3, [pc, #60]	; (80bfc <pmc_switch_mainck_to_xtal+0x68>)
   80bc0:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bc2:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80bc4:	bf00      	nop
   80bc6:	4b09      	ldr	r3, [pc, #36]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80bca:	f003 0301 	and.w	r3, r3, #1
   80bce:	2b00      	cmp	r3, #0
   80bd0:	d0f9      	beq.n	80bc6 <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80bd2:	4a06      	ldr	r2, [pc, #24]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bd4:	4b05      	ldr	r3, [pc, #20]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bd6:	6a1b      	ldr	r3, [r3, #32]
   80bd8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80be0:	6213      	str	r3, [r2, #32]
	}
}
   80be2:	370c      	adds	r7, #12
   80be4:	46bd      	mov	sp, r7
   80be6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80bea:	4770      	bx	lr
   80bec:	400e0600 	.word	0x400e0600
   80bf0:	fec8fffc 	.word	0xfec8fffc
   80bf4:	01370002 	.word	0x01370002
   80bf8:	ffc8c0fc 	.word	0xffc8c0fc
   80bfc:	00373f01 	.word	0x00373f01

00080c00 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   80c00:	b480      	push	{r7}
   80c02:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c04:	4b04      	ldr	r3, [pc, #16]	; (80c18 <pmc_osc_is_ready_mainck+0x18>)
   80c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   80c0c:	4618      	mov	r0, r3
   80c0e:	46bd      	mov	sp, r7
   80c10:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c14:	4770      	bx	lr
   80c16:	bf00      	nop
   80c18:	400e0600 	.word	0x400e0600

00080c1c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   80c1c:	b480      	push	{r7}
   80c1e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c20:	4b03      	ldr	r3, [pc, #12]	; (80c30 <pmc_disable_pllack+0x14>)
   80c22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c26:	629a      	str	r2, [r3, #40]	; 0x28
}
   80c28:	46bd      	mov	sp, r7
   80c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c2e:	4770      	bx	lr
   80c30:	400e0600 	.word	0x400e0600

00080c34 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   80c34:	b480      	push	{r7}
   80c36:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c38:	4b04      	ldr	r3, [pc, #16]	; (80c4c <pmc_is_locked_pllack+0x18>)
   80c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c3c:	f003 0302 	and.w	r3, r3, #2
}
   80c40:	4618      	mov	r0, r3
   80c42:	46bd      	mov	sp, r7
   80c44:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c48:	4770      	bx	lr
   80c4a:	bf00      	nop
   80c4c:	400e0600 	.word	0x400e0600

00080c50 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   80c50:	b480      	push	{r7}
   80c52:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   80c54:	4b04      	ldr	r3, [pc, #16]	; (80c68 <pmc_is_locked_upll+0x18>)
   80c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   80c5c:	4618      	mov	r0, r3
   80c5e:	46bd      	mov	sp, r7
   80c60:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c64:	4770      	bx	lr
   80c66:	bf00      	nop
   80c68:	400e0600 	.word	0x400e0600

00080c6c <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   80c6c:	b480      	push	{r7}
   80c6e:	b083      	sub	sp, #12
   80c70:	af00      	add	r7, sp, #0
   80c72:	6078      	str	r0, [r7, #4]
   80c74:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   80c76:	687b      	ldr	r3, [r7, #4]
   80c78:	683a      	ldr	r2, [r7, #0]
   80c7a:	60da      	str	r2, [r3, #12]
}
   80c7c:	370c      	adds	r7, #12
   80c7e:	46bd      	mov	sp, r7
   80c80:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c84:	4770      	bx	lr
   80c86:	bf00      	nop

00080c88 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   80c88:	b480      	push	{r7}
   80c8a:	b083      	sub	sp, #12
   80c8c:	af00      	add	r7, sp, #0
   80c8e:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   80c90:	687b      	ldr	r3, [r7, #4]
   80c92:	691b      	ldr	r3, [r3, #16]
}
   80c94:	4618      	mov	r0, r3
   80c96:	370c      	adds	r7, #12
   80c98:	46bd      	mov	sp, r7
   80c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c9e:	4770      	bx	lr

00080ca0 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   80ca0:	b480      	push	{r7}
   80ca2:	b083      	sub	sp, #12
   80ca4:	af00      	add	r7, sp, #0
   80ca6:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   80ca8:	687b      	ldr	r3, [r7, #4]
   80caa:	695b      	ldr	r3, [r3, #20]
}
   80cac:	4618      	mov	r0, r3
   80cae:	370c      	adds	r7, #12
   80cb0:	46bd      	mov	sp, r7
   80cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cb6:	4770      	bx	lr

00080cb8 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   80cb8:	b480      	push	{r7}
   80cba:	b085      	sub	sp, #20
   80cbc:	af00      	add	r7, sp, #0
   80cbe:	6078      	str	r0, [r7, #4]
   80cc0:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   80cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80cc6:	60fb      	str	r3, [r7, #12]

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80cc8:	e006      	b.n	80cd8 <usart_putchar+0x20>
		if (!timeout--) {
   80cca:	68fb      	ldr	r3, [r7, #12]
   80ccc:	1e5a      	subs	r2, r3, #1
   80cce:	60fa      	str	r2, [r7, #12]
   80cd0:	2b00      	cmp	r3, #0
   80cd2:	d101      	bne.n	80cd8 <usart_putchar+0x20>
			return 1;
   80cd4:	2301      	movs	r3, #1
   80cd6:	e00b      	b.n	80cf0 <usart_putchar+0x38>
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80cd8:	687b      	ldr	r3, [r7, #4]
   80cda:	695b      	ldr	r3, [r3, #20]
   80cdc:	f003 0302 	and.w	r3, r3, #2
   80ce0:	2b00      	cmp	r3, #0
   80ce2:	d0f2      	beq.n	80cca <usart_putchar+0x12>
		if (!timeout--) {
			return 1;
		}
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80ce4:	683b      	ldr	r3, [r7, #0]
   80ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   80cea:	687b      	ldr	r3, [r7, #4]
   80cec:	61da      	str	r2, [r3, #28]

	return 0;
   80cee:	2300      	movs	r3, #0
}
   80cf0:	4618      	mov	r0, r3
   80cf2:	3714      	adds	r7, #20
   80cf4:	46bd      	mov	sp, r7
   80cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cfa:	4770      	bx	lr

00080cfc <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   80cfc:	b480      	push	{r7}
   80cfe:	b085      	sub	sp, #20
   80d00:	af00      	add	r7, sp, #0
   80d02:	6078      	str	r0, [r7, #4]
   80d04:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   80d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80d0a:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80d0c:	e006      	b.n	80d1c <usart_getchar+0x20>
		if (!timeout--) {
   80d0e:	68fb      	ldr	r3, [r7, #12]
   80d10:	1e5a      	subs	r2, r3, #1
   80d12:	60fa      	str	r2, [r7, #12]
   80d14:	2b00      	cmp	r3, #0
   80d16:	d101      	bne.n	80d1c <usart_getchar+0x20>
			return 1;
   80d18:	2301      	movs	r3, #1
   80d1a:	e00c      	b.n	80d36 <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80d1c:	687b      	ldr	r3, [r7, #4]
   80d1e:	695b      	ldr	r3, [r3, #20]
   80d20:	f003 0301 	and.w	r3, r3, #1
   80d24:	2b00      	cmp	r3, #0
   80d26:	d0f2      	beq.n	80d0e <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80d28:	687b      	ldr	r3, [r7, #4]
   80d2a:	699b      	ldr	r3, [r3, #24]
   80d2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   80d30:	683b      	ldr	r3, [r7, #0]
   80d32:	601a      	str	r2, [r3, #0]

	return 0;
   80d34:	2300      	movs	r3, #0
}
   80d36:	4618      	mov	r0, r3
   80d38:	3714      	adds	r7, #20
   80d3a:	46bd      	mov	sp, r7
   80d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d40:	4770      	bx	lr
   80d42:	bf00      	nop

00080d44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80d44:	b480      	push	{r7}
   80d46:	af00      	add	r7, sp, #0
	while (1) {
	}
   80d48:	e7fe      	b.n	80d48 <Dummy_Handler+0x4>
   80d4a:	bf00      	nop

00080d4c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80d4c:	b580      	push	{r7, lr}
   80d4e:	b082      	sub	sp, #8
   80d50:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   80d52:	4b1e      	ldr	r3, [pc, #120]	; (80dcc <Reset_Handler+0x80>)
   80d54:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   80d56:	4b1e      	ldr	r3, [pc, #120]	; (80dd0 <Reset_Handler+0x84>)
   80d58:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   80d5a:	687a      	ldr	r2, [r7, #4]
   80d5c:	683b      	ldr	r3, [r7, #0]
   80d5e:	429a      	cmp	r2, r3
   80d60:	d00c      	beq.n	80d7c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   80d62:	e007      	b.n	80d74 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   80d64:	683b      	ldr	r3, [r7, #0]
   80d66:	1d1a      	adds	r2, r3, #4
   80d68:	603a      	str	r2, [r7, #0]
   80d6a:	687a      	ldr	r2, [r7, #4]
   80d6c:	1d11      	adds	r1, r2, #4
   80d6e:	6079      	str	r1, [r7, #4]
   80d70:	6812      	ldr	r2, [r2, #0]
   80d72:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80d74:	683a      	ldr	r2, [r7, #0]
   80d76:	4b17      	ldr	r3, [pc, #92]	; (80dd4 <Reset_Handler+0x88>)
   80d78:	429a      	cmp	r2, r3
   80d7a:	d3f3      	bcc.n	80d64 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d7c:	4b16      	ldr	r3, [pc, #88]	; (80dd8 <Reset_Handler+0x8c>)
   80d7e:	603b      	str	r3, [r7, #0]
   80d80:	e004      	b.n	80d8c <Reset_Handler+0x40>
		*pDest++ = 0;
   80d82:	683b      	ldr	r3, [r7, #0]
   80d84:	1d1a      	adds	r2, r3, #4
   80d86:	603a      	str	r2, [r7, #0]
   80d88:	2200      	movs	r2, #0
   80d8a:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d8c:	683a      	ldr	r2, [r7, #0]
   80d8e:	4b13      	ldr	r3, [pc, #76]	; (80ddc <Reset_Handler+0x90>)
   80d90:	429a      	cmp	r2, r3
   80d92:	d3f6      	bcc.n	80d82 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   80d94:	4b12      	ldr	r3, [pc, #72]	; (80de0 <Reset_Handler+0x94>)
   80d96:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80d98:	4a12      	ldr	r2, [pc, #72]	; (80de4 <Reset_Handler+0x98>)
   80d9a:	687b      	ldr	r3, [r7, #4]
   80d9c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80da0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80da4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80da6:	687b      	ldr	r3, [r7, #4]
   80da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   80dac:	d309      	bcc.n	80dc2 <Reset_Handler+0x76>
   80dae:	687a      	ldr	r2, [r7, #4]
   80db0:	4b0d      	ldr	r3, [pc, #52]	; (80de8 <Reset_Handler+0x9c>)
   80db2:	429a      	cmp	r2, r3
   80db4:	d805      	bhi.n	80dc2 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80db6:	4b0b      	ldr	r3, [pc, #44]	; (80de4 <Reset_Handler+0x98>)
   80db8:	4a0a      	ldr	r2, [pc, #40]	; (80de4 <Reset_Handler+0x98>)
   80dba:	6892      	ldr	r2, [r2, #8]
   80dbc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80dc0:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80dc2:	4b0a      	ldr	r3, [pc, #40]	; (80dec <Reset_Handler+0xa0>)
   80dc4:	4798      	blx	r3

	/* Branch to main function */
	main();
   80dc6:	4b0a      	ldr	r3, [pc, #40]	; (80df0 <Reset_Handler+0xa4>)
   80dc8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   80dca:	e7fe      	b.n	80dca <Reset_Handler+0x7e>
   80dcc:	00081ec0 	.word	0x00081ec0
   80dd0:	20070000 	.word	0x20070000
   80dd4:	20070438 	.word	0x20070438
   80dd8:	20070438 	.word	0x20070438
   80ddc:	20070570 	.word	0x20070570
   80de0:	00080000 	.word	0x00080000
   80de4:	e000ed00 	.word	0xe000ed00
   80de8:	200fffff 	.word	0x200fffff
   80dec:	00081bd9 	.word	0x00081bd9
   80df0:	000819e5 	.word	0x000819e5

00080df4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   80df4:	b480      	push	{r7}
   80df6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80df8:	4b56      	ldr	r3, [pc, #344]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80dfc:	f003 0303 	and.w	r3, r3, #3
   80e00:	2b03      	cmp	r3, #3
   80e02:	f200 808a 	bhi.w	80f1a <SystemCoreClockUpdate+0x126>
   80e06:	a101      	add	r1, pc, #4	; (adr r1, 80e0c <SystemCoreClockUpdate+0x18>)
   80e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   80e0c:	00080e1d 	.word	0x00080e1d
   80e10:	00080e3d 	.word	0x00080e3d
   80e14:	00080e8d 	.word	0x00080e8d
   80e18:	00080e8d 	.word	0x00080e8d
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80e1c:	4b4e      	ldr	r3, [pc, #312]	; (80f58 <SystemCoreClockUpdate+0x164>)
   80e1e:	695b      	ldr	r3, [r3, #20]
   80e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80e24:	2b00      	cmp	r3, #0
   80e26:	d004      	beq.n	80e32 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80e28:	4b4c      	ldr	r3, [pc, #304]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80e2e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   80e30:	e073      	b.n	80f1a <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80e32:	4b4a      	ldr	r3, [pc, #296]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e34:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   80e38:	601a      	str	r2, [r3, #0]
		}
		break;
   80e3a:	e06e      	b.n	80f1a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e3c:	4b45      	ldr	r3, [pc, #276]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80e3e:	6a1b      	ldr	r3, [r3, #32]
   80e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80e44:	2b00      	cmp	r3, #0
   80e46:	d003      	beq.n	80e50 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e48:	4b44      	ldr	r3, [pc, #272]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e4a:	4a45      	ldr	r2, [pc, #276]	; (80f60 <SystemCoreClockUpdate+0x16c>)
   80e4c:	601a      	str	r2, [r3, #0]
   80e4e:	e01c      	b.n	80e8a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e50:	4b42      	ldr	r3, [pc, #264]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e52:	4a44      	ldr	r2, [pc, #272]	; (80f64 <SystemCoreClockUpdate+0x170>)
   80e54:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e56:	4b3f      	ldr	r3, [pc, #252]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80e58:	6a1b      	ldr	r3, [r3, #32]
   80e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e5e:	2b10      	cmp	r3, #16
   80e60:	d004      	beq.n	80e6c <SystemCoreClockUpdate+0x78>
   80e62:	2b20      	cmp	r3, #32
   80e64:	d008      	beq.n	80e78 <SystemCoreClockUpdate+0x84>
   80e66:	2b00      	cmp	r3, #0
   80e68:	d00e      	beq.n	80e88 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   80e6a:	e00e      	b.n	80e8a <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80e6c:	4b3b      	ldr	r3, [pc, #236]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e6e:	681b      	ldr	r3, [r3, #0]
   80e70:	005a      	lsls	r2, r3, #1
   80e72:	4b3a      	ldr	r3, [pc, #232]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e74:	601a      	str	r2, [r3, #0]
				break;
   80e76:	e008      	b.n	80e8a <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80e78:	4b38      	ldr	r3, [pc, #224]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e7a:	681a      	ldr	r2, [r3, #0]
   80e7c:	4613      	mov	r3, r2
   80e7e:	005b      	lsls	r3, r3, #1
   80e80:	441a      	add	r2, r3
   80e82:	4b36      	ldr	r3, [pc, #216]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e84:	601a      	str	r2, [r3, #0]
				break;
   80e86:	e000      	b.n	80e8a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   80e88:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   80e8a:	e046      	b.n	80f1a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e8c:	4b31      	ldr	r3, [pc, #196]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80e8e:	6a1b      	ldr	r3, [r3, #32]
   80e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80e94:	2b00      	cmp	r3, #0
   80e96:	d003      	beq.n	80ea0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e98:	4b30      	ldr	r3, [pc, #192]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e9a:	4a31      	ldr	r2, [pc, #196]	; (80f60 <SystemCoreClockUpdate+0x16c>)
   80e9c:	601a      	str	r2, [r3, #0]
   80e9e:	e01c      	b.n	80eda <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ea0:	4b2e      	ldr	r3, [pc, #184]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ea2:	4a30      	ldr	r2, [pc, #192]	; (80f64 <SystemCoreClockUpdate+0x170>)
   80ea4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ea6:	4b2b      	ldr	r3, [pc, #172]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80ea8:	6a1b      	ldr	r3, [r3, #32]
   80eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80eae:	2b10      	cmp	r3, #16
   80eb0:	d004      	beq.n	80ebc <SystemCoreClockUpdate+0xc8>
   80eb2:	2b20      	cmp	r3, #32
   80eb4:	d008      	beq.n	80ec8 <SystemCoreClockUpdate+0xd4>
   80eb6:	2b00      	cmp	r3, #0
   80eb8:	d00e      	beq.n	80ed8 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   80eba:	e00e      	b.n	80eda <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80ebc:	4b27      	ldr	r3, [pc, #156]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ebe:	681b      	ldr	r3, [r3, #0]
   80ec0:	005a      	lsls	r2, r3, #1
   80ec2:	4b26      	ldr	r3, [pc, #152]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ec4:	601a      	str	r2, [r3, #0]
				break;
   80ec6:	e008      	b.n	80eda <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80ec8:	4b24      	ldr	r3, [pc, #144]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80eca:	681a      	ldr	r2, [r3, #0]
   80ecc:	4613      	mov	r3, r2
   80ece:	005b      	lsls	r3, r3, #1
   80ed0:	441a      	add	r2, r3
   80ed2:	4b22      	ldr	r3, [pc, #136]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ed4:	601a      	str	r2, [r3, #0]
				break;
   80ed6:	e000      	b.n	80eda <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   80ed8:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80eda:	4b1e      	ldr	r3, [pc, #120]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ede:	f003 0303 	and.w	r3, r3, #3
   80ee2:	2b02      	cmp	r3, #2
   80ee4:	d115      	bne.n	80f12 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80ee6:	4b1b      	ldr	r3, [pc, #108]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   80eea:	4b1f      	ldr	r3, [pc, #124]	; (80f68 <SystemCoreClockUpdate+0x174>)
   80eec:	4013      	ands	r3, r2
   80eee:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   80ef0:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80ef2:	4a1a      	ldr	r2, [pc, #104]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ef4:	6812      	ldr	r2, [r2, #0]
   80ef6:	fb02 f203 	mul.w	r2, r2, r3
   80efa:	4b18      	ldr	r3, [pc, #96]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80efc:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80efe:	4b17      	ldr	r3, [pc, #92]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f00:	681a      	ldr	r2, [r3, #0]
   80f02:	4b14      	ldr	r3, [pc, #80]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   80f06:	b2db      	uxtb	r3, r3
   80f08:	fbb2 f2f3 	udiv	r2, r2, r3
   80f0c:	4b13      	ldr	r3, [pc, #76]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f0e:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   80f10:	e002      	b.n	80f18 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f12:	4b12      	ldr	r3, [pc, #72]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f14:	4a15      	ldr	r2, [pc, #84]	; (80f6c <SystemCoreClockUpdate+0x178>)
   80f16:	601a      	str	r2, [r3, #0]
		}
		break;
   80f18:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80f1a:	4b0e      	ldr	r3, [pc, #56]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f22:	2b70      	cmp	r3, #112	; 0x70
   80f24:	d108      	bne.n	80f38 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   80f26:	4b0d      	ldr	r3, [pc, #52]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f28:	681a      	ldr	r2, [r3, #0]
   80f2a:	4b11      	ldr	r3, [pc, #68]	; (80f70 <SystemCoreClockUpdate+0x17c>)
   80f2c:	fba3 1302 	umull	r1, r3, r3, r2
   80f30:	085a      	lsrs	r2, r3, #1
   80f32:	4b0a      	ldr	r3, [pc, #40]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f34:	601a      	str	r2, [r3, #0]
   80f36:	e009      	b.n	80f4c <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80f38:	4b08      	ldr	r3, [pc, #32]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f3a:	681a      	ldr	r2, [r3, #0]
   80f3c:	4b05      	ldr	r3, [pc, #20]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f44:	091b      	lsrs	r3, r3, #4
   80f46:	40da      	lsrs	r2, r3
   80f48:	4b04      	ldr	r3, [pc, #16]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f4a:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   80f4c:	46bd      	mov	sp, r7
   80f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f52:	4770      	bx	lr
   80f54:	400e0600 	.word	0x400e0600
   80f58:	400e1a10 	.word	0x400e1a10
   80f5c:	20070000 	.word	0x20070000
   80f60:	00b71b00 	.word	0x00b71b00
   80f64:	003d0900 	.word	0x003d0900
   80f68:	07ff0000 	.word	0x07ff0000
   80f6c:	0e4e1c00 	.word	0x0e4e1c00
   80f70:	aaaaaaab 	.word	0xaaaaaaab

00080f74 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   80f74:	b480      	push	{r7}
   80f76:	b083      	sub	sp, #12
   80f78:	af00      	add	r7, sp, #0
   80f7a:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80f7c:	687a      	ldr	r2, [r7, #4]
   80f7e:	4b1f      	ldr	r3, [pc, #124]	; (80ffc <system_init_flash+0x88>)
   80f80:	429a      	cmp	r2, r3
   80f82:	d806      	bhi.n	80f92 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80f84:	4b1e      	ldr	r3, [pc, #120]	; (81000 <system_init_flash+0x8c>)
   80f86:	2200      	movs	r2, #0
   80f88:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   80f8a:	4b1e      	ldr	r3, [pc, #120]	; (81004 <system_init_flash+0x90>)
   80f8c:	2200      	movs	r2, #0
   80f8e:	601a      	str	r2, [r3, #0]
   80f90:	e02e      	b.n	80ff0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   80f92:	687a      	ldr	r2, [r7, #4]
   80f94:	4b1c      	ldr	r3, [pc, #112]	; (81008 <system_init_flash+0x94>)
   80f96:	429a      	cmp	r2, r3
   80f98:	d808      	bhi.n	80fac <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   80f9a:	4b19      	ldr	r3, [pc, #100]	; (81000 <system_init_flash+0x8c>)
   80f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
   80fa0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   80fa2:	4b18      	ldr	r3, [pc, #96]	; (81004 <system_init_flash+0x90>)
   80fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
   80fa8:	601a      	str	r2, [r3, #0]
   80faa:	e021      	b.n	80ff0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   80fac:	687a      	ldr	r2, [r7, #4]
   80fae:	4b17      	ldr	r3, [pc, #92]	; (8100c <system_init_flash+0x98>)
   80fb0:	429a      	cmp	r2, r3
   80fb2:	d808      	bhi.n	80fc6 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   80fb4:	4b12      	ldr	r3, [pc, #72]	; (81000 <system_init_flash+0x8c>)
   80fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
   80fba:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   80fbc:	4b11      	ldr	r3, [pc, #68]	; (81004 <system_init_flash+0x90>)
   80fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
   80fc2:	601a      	str	r2, [r3, #0]
   80fc4:	e014      	b.n	80ff0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   80fc6:	687a      	ldr	r2, [r7, #4]
   80fc8:	4b11      	ldr	r3, [pc, #68]	; (81010 <system_init_flash+0x9c>)
   80fca:	429a      	cmp	r2, r3
   80fcc:	d808      	bhi.n	80fe0 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   80fce:	4b0c      	ldr	r3, [pc, #48]	; (81000 <system_init_flash+0x8c>)
   80fd0:	f44f 7240 	mov.w	r2, #768	; 0x300
   80fd4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   80fd6:	4b0b      	ldr	r3, [pc, #44]	; (81004 <system_init_flash+0x90>)
   80fd8:	f44f 7240 	mov.w	r2, #768	; 0x300
   80fdc:	601a      	str	r2, [r3, #0]
   80fde:	e007      	b.n	80ff0 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80fe0:	4b07      	ldr	r3, [pc, #28]	; (81000 <system_init_flash+0x8c>)
   80fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80fe6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80fe8:	4b06      	ldr	r3, [pc, #24]	; (81004 <system_init_flash+0x90>)
   80fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80fee:	601a      	str	r2, [r3, #0]
	}
}
   80ff0:	370c      	adds	r7, #12
   80ff2:	46bd      	mov	sp, r7
   80ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ff8:	4770      	bx	lr
   80ffa:	bf00      	nop
   80ffc:	0157529f 	.word	0x0157529f
   81000:	400e0a00 	.word	0x400e0a00
   81004:	400e0c00 	.word	0x400e0c00
   81008:	0206cc7f 	.word	0x0206cc7f
   8100c:	0328b73f 	.word	0x0328b73f
   81010:	04a62f7f 	.word	0x04a62f7f

00081014 <vListInsertEnd>:
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   81014:	b480      	push	{r7}
   81016:	b085      	sub	sp, #20
   81018:	af00      	add	r7, sp, #0
   8101a:	6078      	str	r0, [r7, #4]
   8101c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   8101e:	687b      	ldr	r3, [r7, #4]
   81020:	685b      	ldr	r3, [r3, #4]
   81022:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   81024:	683b      	ldr	r3, [r7, #0]
   81026:	68fa      	ldr	r2, [r7, #12]
   81028:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   8102a:	68fb      	ldr	r3, [r7, #12]
   8102c:	689a      	ldr	r2, [r3, #8]
   8102e:	683b      	ldr	r3, [r7, #0]
   81030:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   81032:	68fb      	ldr	r3, [r7, #12]
   81034:	689b      	ldr	r3, [r3, #8]
   81036:	683a      	ldr	r2, [r7, #0]
   81038:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   8103a:	68fb      	ldr	r3, [r7, #12]
   8103c:	683a      	ldr	r2, [r7, #0]
   8103e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81040:	683b      	ldr	r3, [r7, #0]
   81042:	687a      	ldr	r2, [r7, #4]
   81044:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   81046:	687b      	ldr	r3, [r7, #4]
   81048:	681b      	ldr	r3, [r3, #0]
   8104a:	1c5a      	adds	r2, r3, #1
   8104c:	687b      	ldr	r3, [r7, #4]
   8104e:	601a      	str	r2, [r3, #0]
}
   81050:	3714      	adds	r7, #20
   81052:	46bd      	mov	sp, r7
   81054:	f85d 7b04 	ldr.w	r7, [sp], #4
   81058:	4770      	bx	lr
   8105a:	bf00      	nop

0008105c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   8105c:	b480      	push	{r7}
   8105e:	b085      	sub	sp, #20
   81060:	af00      	add	r7, sp, #0
   81062:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   81064:	687b      	ldr	r3, [r7, #4]
   81066:	691b      	ldr	r3, [r3, #16]
   81068:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8106a:	687b      	ldr	r3, [r7, #4]
   8106c:	685b      	ldr	r3, [r3, #4]
   8106e:	687a      	ldr	r2, [r7, #4]
   81070:	6892      	ldr	r2, [r2, #8]
   81072:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81074:	687b      	ldr	r3, [r7, #4]
   81076:	689b      	ldr	r3, [r3, #8]
   81078:	687a      	ldr	r2, [r7, #4]
   8107a:	6852      	ldr	r2, [r2, #4]
   8107c:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8107e:	68fb      	ldr	r3, [r7, #12]
   81080:	685a      	ldr	r2, [r3, #4]
   81082:	687b      	ldr	r3, [r7, #4]
   81084:	429a      	cmp	r2, r3
   81086:	d103      	bne.n	81090 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81088:	687b      	ldr	r3, [r7, #4]
   8108a:	689a      	ldr	r2, [r3, #8]
   8108c:	68fb      	ldr	r3, [r7, #12]
   8108e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   81090:	687b      	ldr	r3, [r7, #4]
   81092:	2200      	movs	r2, #0
   81094:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   81096:	68fb      	ldr	r3, [r7, #12]
   81098:	681b      	ldr	r3, [r3, #0]
   8109a:	1e5a      	subs	r2, r3, #1
   8109c:	68fb      	ldr	r3, [r7, #12]
   8109e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   810a0:	68fb      	ldr	r3, [r7, #12]
   810a2:	681b      	ldr	r3, [r3, #0]
}
   810a4:	4618      	mov	r0, r3
   810a6:	3714      	adds	r7, #20
   810a8:	46bd      	mov	sp, r7
   810aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   810ae:	4770      	bx	lr

000810b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   810b0:	4b07      	ldr	r3, [pc, #28]	; (810d0 <pxCurrentTCBConst2>)
   810b2:	6819      	ldr	r1, [r3, #0]
   810b4:	6808      	ldr	r0, [r1, #0]
   810b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   810ba:	f380 8809 	msr	PSP, r0
   810be:	f3bf 8f6f 	isb	sy
   810c2:	f04f 0000 	mov.w	r0, #0
   810c6:	f380 8811 	msr	BASEPRI, r0
   810ca:	f04e 0e0d 	orr.w	lr, lr, #13
   810ce:	4770      	bx	lr

000810d0 <pxCurrentTCBConst2>:
   810d0:	200704cc 	.word	0x200704cc

000810d4 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   810d4:	b580      	push	{r7, lr}
   810d6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   810d8:	4b0c      	ldr	r3, [pc, #48]	; (8110c <vPortEnterCritical+0x38>)
   810da:	4798      	blx	r3
	uxCriticalNesting++;
   810dc:	4b0c      	ldr	r3, [pc, #48]	; (81110 <vPortEnterCritical+0x3c>)
   810de:	681b      	ldr	r3, [r3, #0]
   810e0:	1c5a      	adds	r2, r3, #1
   810e2:	4b0b      	ldr	r3, [pc, #44]	; (81110 <vPortEnterCritical+0x3c>)
   810e4:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   810e6:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   810ea:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   810ee:	4b08      	ldr	r3, [pc, #32]	; (81110 <vPortEnterCritical+0x3c>)
   810f0:	681b      	ldr	r3, [r3, #0]
   810f2:	2b01      	cmp	r3, #1
   810f4:	d108      	bne.n	81108 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   810f6:	4b07      	ldr	r3, [pc, #28]	; (81114 <vPortEnterCritical+0x40>)
   810f8:	681b      	ldr	r3, [r3, #0]
   810fa:	f003 031f 	and.w	r3, r3, #31
   810fe:	2b00      	cmp	r3, #0
   81100:	d002      	beq.n	81108 <vPortEnterCritical+0x34>
   81102:	4b02      	ldr	r3, [pc, #8]	; (8110c <vPortEnterCritical+0x38>)
   81104:	4798      	blx	r3
   81106:	e7fe      	b.n	81106 <vPortEnterCritical+0x32>
	}
}
   81108:	bd80      	pop	{r7, pc}
   8110a:	bf00      	nop
   8110c:	00081151 	.word	0x00081151
   81110:	20070004 	.word	0x20070004
   81114:	e000ed04 	.word	0xe000ed04

00081118 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81118:	b580      	push	{r7, lr}
   8111a:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   8111c:	4b09      	ldr	r3, [pc, #36]	; (81144 <vPortExitCritical+0x2c>)
   8111e:	681b      	ldr	r3, [r3, #0]
   81120:	2b00      	cmp	r3, #0
   81122:	d102      	bne.n	8112a <vPortExitCritical+0x12>
   81124:	4b08      	ldr	r3, [pc, #32]	; (81148 <vPortExitCritical+0x30>)
   81126:	4798      	blx	r3
   81128:	e7fe      	b.n	81128 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   8112a:	4b06      	ldr	r3, [pc, #24]	; (81144 <vPortExitCritical+0x2c>)
   8112c:	681b      	ldr	r3, [r3, #0]
   8112e:	1e5a      	subs	r2, r3, #1
   81130:	4b04      	ldr	r3, [pc, #16]	; (81144 <vPortExitCritical+0x2c>)
   81132:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   81134:	4b03      	ldr	r3, [pc, #12]	; (81144 <vPortExitCritical+0x2c>)
   81136:	681b      	ldr	r3, [r3, #0]
   81138:	2b00      	cmp	r3, #0
   8113a:	d102      	bne.n	81142 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   8113c:	2000      	movs	r0, #0
   8113e:	4b03      	ldr	r3, [pc, #12]	; (8114c <vPortExitCritical+0x34>)
   81140:	4798      	blx	r3
	}
}
   81142:	bd80      	pop	{r7, pc}
   81144:	20070004 	.word	0x20070004
   81148:	00081151 	.word	0x00081151
   8114c:	00081165 	.word	0x00081165

00081150 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81150:	f3ef 8011 	mrs	r0, BASEPRI
   81154:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81158:	f381 8811 	msr	BASEPRI, r1
   8115c:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   8115e:	2300      	movs	r3, #0
}
   81160:	4618      	mov	r0, r3
   81162:	bf00      	nop

00081164 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   81164:	f380 8811 	msr	BASEPRI, r0
   81168:	4770      	bx	lr
   8116a:	bf00      	nop

0008116c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   8116c:	f3ef 8009 	mrs	r0, PSP
   81170:	f3bf 8f6f 	isb	sy
   81174:	4b0d      	ldr	r3, [pc, #52]	; (811ac <pxCurrentTCBConst>)
   81176:	681a      	ldr	r2, [r3, #0]
   81178:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8117c:	6010      	str	r0, [r2, #0]
   8117e:	e92d 4008 	stmdb	sp!, {r3, lr}
   81182:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81186:	f380 8811 	msr	BASEPRI, r0
   8118a:	f000 fa93 	bl	816b4 <vTaskSwitchContext>
   8118e:	f04f 0000 	mov.w	r0, #0
   81192:	f380 8811 	msr	BASEPRI, r0
   81196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8119a:	6819      	ldr	r1, [r3, #0]
   8119c:	6808      	ldr	r0, [r1, #0]
   8119e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   811a2:	f380 8809 	msr	PSP, r0
   811a6:	f3bf 8f6f 	isb	sy
   811aa:	4770      	bx	lr

000811ac <pxCurrentTCBConst>:
   811ac:	200704cc 	.word	0x200704cc

000811b0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   811b0:	b580      	push	{r7, lr}
   811b2:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   811b4:	4b07      	ldr	r3, [pc, #28]	; (811d4 <SysTick_Handler+0x24>)
   811b6:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   811b8:	4b07      	ldr	r3, [pc, #28]	; (811d8 <SysTick_Handler+0x28>)
   811ba:	4798      	blx	r3
   811bc:	4603      	mov	r3, r0
   811be:	2b00      	cmp	r3, #0
   811c0:	d003      	beq.n	811ca <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   811c2:	4b06      	ldr	r3, [pc, #24]	; (811dc <SysTick_Handler+0x2c>)
   811c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   811c8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   811ca:	2000      	movs	r0, #0
   811cc:	4b04      	ldr	r3, [pc, #16]	; (811e0 <SysTick_Handler+0x30>)
   811ce:	4798      	blx	r3
}
   811d0:	bd80      	pop	{r7, pc}
   811d2:	bf00      	nop
   811d4:	00081151 	.word	0x00081151
   811d8:	00081539 	.word	0x00081539
   811dc:	e000ed04 	.word	0xe000ed04
   811e0:	00081165 	.word	0x00081165

000811e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   811e4:	b580      	push	{r7, lr}
   811e6:	b082      	sub	sp, #8
   811e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   811ea:	f3ef 8305 	mrs	r3, IPSR
   811ee:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   811f0:	687b      	ldr	r3, [r7, #4]
   811f2:	2b0f      	cmp	r3, #15
   811f4:	d90c      	bls.n	81210 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   811f6:	4a0d      	ldr	r2, [pc, #52]	; (8122c <vPortValidateInterruptPriority+0x48>)
   811f8:	687b      	ldr	r3, [r7, #4]
   811fa:	4413      	add	r3, r2
   811fc:	781b      	ldrb	r3, [r3, #0]
   811fe:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   81200:	4b0b      	ldr	r3, [pc, #44]	; (81230 <vPortValidateInterruptPriority+0x4c>)
   81202:	781b      	ldrb	r3, [r3, #0]
   81204:	78fa      	ldrb	r2, [r7, #3]
   81206:	429a      	cmp	r2, r3
   81208:	d202      	bcs.n	81210 <vPortValidateInterruptPriority+0x2c>
   8120a:	4b0a      	ldr	r3, [pc, #40]	; (81234 <vPortValidateInterruptPriority+0x50>)
   8120c:	4798      	blx	r3
   8120e:	e7fe      	b.n	8120e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   81210:	4b09      	ldr	r3, [pc, #36]	; (81238 <vPortValidateInterruptPriority+0x54>)
   81212:	681b      	ldr	r3, [r3, #0]
   81214:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   81218:	4b08      	ldr	r3, [pc, #32]	; (8123c <vPortValidateInterruptPriority+0x58>)
   8121a:	681b      	ldr	r3, [r3, #0]
   8121c:	429a      	cmp	r2, r3
   8121e:	d902      	bls.n	81226 <vPortValidateInterruptPriority+0x42>
   81220:	4b04      	ldr	r3, [pc, #16]	; (81234 <vPortValidateInterruptPriority+0x50>)
   81222:	4798      	blx	r3
   81224:	e7fe      	b.n	81224 <vPortValidateInterruptPriority+0x40>
	}
   81226:	3708      	adds	r7, #8
   81228:	46bd      	mov	sp, r7
   8122a:	bd80      	pop	{r7, pc}
   8122c:	e000e3f0 	.word	0xe000e3f0
   81230:	200704c4 	.word	0x200704c4
   81234:	00081151 	.word	0x00081151
   81238:	e000ed0c 	.word	0xe000ed0c
   8123c:	200704c8 	.word	0x200704c8

00081240 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   81240:	b580      	push	{r7, lr}
   81242:	b088      	sub	sp, #32
   81244:	af00      	add	r7, sp, #0
   81246:	60f8      	str	r0, [r7, #12]
   81248:	60b9      	str	r1, [r7, #8]
   8124a:	607a      	str	r2, [r7, #4]
   8124c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8124e:	68fb      	ldr	r3, [r7, #12]
   81250:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   81252:	69bb      	ldr	r3, [r7, #24]
   81254:	2b00      	cmp	r3, #0
   81256:	d102      	bne.n	8125e <xQueueGenericSendFromISR+0x1e>
   81258:	4b33      	ldr	r3, [pc, #204]	; (81328 <xQueueGenericSendFromISR+0xe8>)
   8125a:	4798      	blx	r3
   8125c:	e7fe      	b.n	8125c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8125e:	68bb      	ldr	r3, [r7, #8]
   81260:	2b00      	cmp	r3, #0
   81262:	d103      	bne.n	8126c <xQueueGenericSendFromISR+0x2c>
   81264:	69bb      	ldr	r3, [r7, #24]
   81266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81268:	2b00      	cmp	r3, #0
   8126a:	d101      	bne.n	81270 <xQueueGenericSendFromISR+0x30>
   8126c:	2301      	movs	r3, #1
   8126e:	e000      	b.n	81272 <xQueueGenericSendFromISR+0x32>
   81270:	2300      	movs	r3, #0
   81272:	2b00      	cmp	r3, #0
   81274:	d102      	bne.n	8127c <xQueueGenericSendFromISR+0x3c>
   81276:	4b2c      	ldr	r3, [pc, #176]	; (81328 <xQueueGenericSendFromISR+0xe8>)
   81278:	4798      	blx	r3
   8127a:	e7fe      	b.n	8127a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   8127c:	683b      	ldr	r3, [r7, #0]
   8127e:	2b02      	cmp	r3, #2
   81280:	d103      	bne.n	8128a <xQueueGenericSendFromISR+0x4a>
   81282:	69bb      	ldr	r3, [r7, #24]
   81284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81286:	2b01      	cmp	r3, #1
   81288:	d101      	bne.n	8128e <xQueueGenericSendFromISR+0x4e>
   8128a:	2301      	movs	r3, #1
   8128c:	e000      	b.n	81290 <xQueueGenericSendFromISR+0x50>
   8128e:	2300      	movs	r3, #0
   81290:	2b00      	cmp	r3, #0
   81292:	d102      	bne.n	8129a <xQueueGenericSendFromISR+0x5a>
   81294:	4b24      	ldr	r3, [pc, #144]	; (81328 <xQueueGenericSendFromISR+0xe8>)
   81296:	4798      	blx	r3
   81298:	e7fe      	b.n	81298 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   8129a:	4b24      	ldr	r3, [pc, #144]	; (8132c <xQueueGenericSendFromISR+0xec>)
   8129c:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   8129e:	4b22      	ldr	r3, [pc, #136]	; (81328 <xQueueGenericSendFromISR+0xe8>)
   812a0:	4798      	blx	r3
   812a2:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   812a4:	69bb      	ldr	r3, [r7, #24]
   812a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   812a8:	69bb      	ldr	r3, [r7, #24]
   812aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   812ac:	429a      	cmp	r2, r3
   812ae:	d302      	bcc.n	812b6 <xQueueGenericSendFromISR+0x76>
   812b0:	683b      	ldr	r3, [r7, #0]
   812b2:	2b02      	cmp	r3, #2
   812b4:	d12d      	bne.n	81312 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   812b6:	69b8      	ldr	r0, [r7, #24]
   812b8:	68b9      	ldr	r1, [r7, #8]
   812ba:	683a      	ldr	r2, [r7, #0]
   812bc:	4b1c      	ldr	r3, [pc, #112]	; (81330 <xQueueGenericSendFromISR+0xf0>)
   812be:	4798      	blx	r3
   812c0:	4603      	mov	r3, r0
   812c2:	2b00      	cmp	r3, #0
   812c4:	d005      	beq.n	812d2 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   812c6:	687b      	ldr	r3, [r7, #4]
   812c8:	2b00      	cmp	r3, #0
   812ca:	d002      	beq.n	812d2 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   812cc:	687b      	ldr	r3, [r7, #4]
   812ce:	2201      	movs	r2, #1
   812d0:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   812d2:	69bb      	ldr	r3, [r7, #24]
   812d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   812d6:	f1b3 3fff 	cmp.w	r3, #4294967295
   812da:	d112      	bne.n	81302 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   812dc:	69bb      	ldr	r3, [r7, #24]
   812de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   812e0:	2b00      	cmp	r3, #0
   812e2:	d013      	beq.n	8130c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   812e4:	69bb      	ldr	r3, [r7, #24]
   812e6:	3324      	adds	r3, #36	; 0x24
   812e8:	4618      	mov	r0, r3
   812ea:	4b12      	ldr	r3, [pc, #72]	; (81334 <xQueueGenericSendFromISR+0xf4>)
   812ec:	4798      	blx	r3
   812ee:	4603      	mov	r3, r0
   812f0:	2b00      	cmp	r3, #0
   812f2:	d00b      	beq.n	8130c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   812f4:	687b      	ldr	r3, [r7, #4]
   812f6:	2b00      	cmp	r3, #0
   812f8:	d008      	beq.n	8130c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   812fa:	687b      	ldr	r3, [r7, #4]
   812fc:	2201      	movs	r2, #1
   812fe:	601a      	str	r2, [r3, #0]
   81300:	e004      	b.n	8130c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81302:	69bb      	ldr	r3, [r7, #24]
   81304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81306:	1c5a      	adds	r2, r3, #1
   81308:	69bb      	ldr	r3, [r7, #24]
   8130a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   8130c:	2301      	movs	r3, #1
   8130e:	61fb      	str	r3, [r7, #28]
   81310:	e001      	b.n	81316 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81312:	2300      	movs	r3, #0
   81314:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81316:	6978      	ldr	r0, [r7, #20]
   81318:	4b07      	ldr	r3, [pc, #28]	; (81338 <xQueueGenericSendFromISR+0xf8>)
   8131a:	4798      	blx	r3

	return xReturn;
   8131c:	69fb      	ldr	r3, [r7, #28]
}
   8131e:	4618      	mov	r0, r3
   81320:	3720      	adds	r7, #32
   81322:	46bd      	mov	sp, r7
   81324:	bd80      	pop	{r7, pc}
   81326:	bf00      	nop
   81328:	00081151 	.word	0x00081151
   8132c:	000811e5 	.word	0x000811e5
   81330:	00081405 	.word	0x00081405
   81334:	000817b1 	.word	0x000817b1
   81338:	00081165 	.word	0x00081165

0008133c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
   8133c:	b580      	push	{r7, lr}
   8133e:	b088      	sub	sp, #32
   81340:	af00      	add	r7, sp, #0
   81342:	60f8      	str	r0, [r7, #12]
   81344:	60b9      	str	r1, [r7, #8]
   81346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81348:	68fb      	ldr	r3, [r7, #12]
   8134a:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   8134c:	69bb      	ldr	r3, [r7, #24]
   8134e:	2b00      	cmp	r3, #0
   81350:	d102      	bne.n	81358 <xQueueReceiveFromISR+0x1c>
   81352:	4b27      	ldr	r3, [pc, #156]	; (813f0 <xQueueReceiveFromISR+0xb4>)
   81354:	4798      	blx	r3
   81356:	e7fe      	b.n	81356 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81358:	68bb      	ldr	r3, [r7, #8]
   8135a:	2b00      	cmp	r3, #0
   8135c:	d103      	bne.n	81366 <xQueueReceiveFromISR+0x2a>
   8135e:	69bb      	ldr	r3, [r7, #24]
   81360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81362:	2b00      	cmp	r3, #0
   81364:	d101      	bne.n	8136a <xQueueReceiveFromISR+0x2e>
   81366:	2301      	movs	r3, #1
   81368:	e000      	b.n	8136c <xQueueReceiveFromISR+0x30>
   8136a:	2300      	movs	r3, #0
   8136c:	2b00      	cmp	r3, #0
   8136e:	d102      	bne.n	81376 <xQueueReceiveFromISR+0x3a>
   81370:	4b1f      	ldr	r3, [pc, #124]	; (813f0 <xQueueReceiveFromISR+0xb4>)
   81372:	4798      	blx	r3
   81374:	e7fe      	b.n	81374 <xQueueReceiveFromISR+0x38>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   81376:	4b1f      	ldr	r3, [pc, #124]	; (813f4 <xQueueReceiveFromISR+0xb8>)
   81378:	4798      	blx	r3

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   8137a:	4b1d      	ldr	r3, [pc, #116]	; (813f0 <xQueueReceiveFromISR+0xb4>)
   8137c:	4798      	blx	r3
   8137e:	6178      	str	r0, [r7, #20]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   81380:	69bb      	ldr	r3, [r7, #24]
   81382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81384:	2b00      	cmp	r3, #0
   81386:	d028      	beq.n	813da <xQueueReceiveFromISR+0x9e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   81388:	69b8      	ldr	r0, [r7, #24]
   8138a:	68b9      	ldr	r1, [r7, #8]
   8138c:	4b1a      	ldr	r3, [pc, #104]	; (813f8 <xQueueReceiveFromISR+0xbc>)
   8138e:	4798      	blx	r3
			--( pxQueue->uxMessagesWaiting );
   81390:	69bb      	ldr	r3, [r7, #24]
   81392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81394:	1e5a      	subs	r2, r3, #1
   81396:	69bb      	ldr	r3, [r7, #24]
   81398:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   8139a:	69bb      	ldr	r3, [r7, #24]
   8139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8139e:	f1b3 3fff 	cmp.w	r3, #4294967295
   813a2:	d112      	bne.n	813ca <xQueueReceiveFromISR+0x8e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   813a4:	69bb      	ldr	r3, [r7, #24]
   813a6:	691b      	ldr	r3, [r3, #16]
   813a8:	2b00      	cmp	r3, #0
   813aa:	d013      	beq.n	813d4 <xQueueReceiveFromISR+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   813ac:	69bb      	ldr	r3, [r7, #24]
   813ae:	3310      	adds	r3, #16
   813b0:	4618      	mov	r0, r3
   813b2:	4b12      	ldr	r3, [pc, #72]	; (813fc <xQueueReceiveFromISR+0xc0>)
   813b4:	4798      	blx	r3
   813b6:	4603      	mov	r3, r0
   813b8:	2b00      	cmp	r3, #0
   813ba:	d00b      	beq.n	813d4 <xQueueReceiveFromISR+0x98>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   813bc:	687b      	ldr	r3, [r7, #4]
   813be:	2b00      	cmp	r3, #0
   813c0:	d008      	beq.n	813d4 <xQueueReceiveFromISR+0x98>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   813c2:	687b      	ldr	r3, [r7, #4]
   813c4:	2201      	movs	r2, #1
   813c6:	601a      	str	r2, [r3, #0]
   813c8:	e004      	b.n	813d4 <xQueueReceiveFromISR+0x98>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   813ca:	69bb      	ldr	r3, [r7, #24]
   813cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   813ce:	1c5a      	adds	r2, r3, #1
   813d0:	69bb      	ldr	r3, [r7, #24]
   813d2:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   813d4:	2301      	movs	r3, #1
   813d6:	61fb      	str	r3, [r7, #28]
   813d8:	e001      	b.n	813de <xQueueReceiveFromISR+0xa2>
		}
		else
		{
			xReturn = pdFAIL;
   813da:	2300      	movs	r3, #0
   813dc:	61fb      	str	r3, [r7, #28]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   813de:	6978      	ldr	r0, [r7, #20]
   813e0:	4b07      	ldr	r3, [pc, #28]	; (81400 <xQueueReceiveFromISR+0xc4>)
   813e2:	4798      	blx	r3

	return xReturn;
   813e4:	69fb      	ldr	r3, [r7, #28]
}
   813e6:	4618      	mov	r0, r3
   813e8:	3720      	adds	r7, #32
   813ea:	46bd      	mov	sp, r7
   813ec:	bd80      	pop	{r7, pc}
   813ee:	bf00      	nop
   813f0:	00081151 	.word	0x00081151
   813f4:	000811e5 	.word	0x000811e5
   813f8:	000814e9 	.word	0x000814e9
   813fc:	000817b1 	.word	0x000817b1
   81400:	00081165 	.word	0x00081165

00081404 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   81404:	b580      	push	{r7, lr}
   81406:	b086      	sub	sp, #24
   81408:	af00      	add	r7, sp, #0
   8140a:	60f8      	str	r0, [r7, #12]
   8140c:	60b9      	str	r1, [r7, #8]
   8140e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   81410:	2300      	movs	r3, #0
   81412:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   81414:	68fb      	ldr	r3, [r7, #12]
   81416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81418:	2b00      	cmp	r3, #0
   8141a:	d10d      	bne.n	81438 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8141c:	68fb      	ldr	r3, [r7, #12]
   8141e:	681b      	ldr	r3, [r3, #0]
   81420:	2b00      	cmp	r3, #0
   81422:	d152      	bne.n	814ca <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81424:	68fb      	ldr	r3, [r7, #12]
   81426:	685b      	ldr	r3, [r3, #4]
   81428:	4618      	mov	r0, r3
   8142a:	4b2d      	ldr	r3, [pc, #180]	; (814e0 <prvCopyDataToQueue+0xdc>)
   8142c:	4798      	blx	r3
   8142e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   81430:	68fb      	ldr	r3, [r7, #12]
   81432:	2200      	movs	r2, #0
   81434:	605a      	str	r2, [r3, #4]
   81436:	e048      	b.n	814ca <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   81438:	687b      	ldr	r3, [r7, #4]
   8143a:	2b00      	cmp	r3, #0
   8143c:	d11a      	bne.n	81474 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   8143e:	68fb      	ldr	r3, [r7, #12]
   81440:	689a      	ldr	r2, [r3, #8]
   81442:	68fb      	ldr	r3, [r7, #12]
   81444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81446:	4610      	mov	r0, r2
   81448:	68b9      	ldr	r1, [r7, #8]
   8144a:	461a      	mov	r2, r3
   8144c:	4b25      	ldr	r3, [pc, #148]	; (814e4 <prvCopyDataToQueue+0xe0>)
   8144e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81450:	68fb      	ldr	r3, [r7, #12]
   81452:	689a      	ldr	r2, [r3, #8]
   81454:	68fb      	ldr	r3, [r7, #12]
   81456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81458:	441a      	add	r2, r3
   8145a:	68fb      	ldr	r3, [r7, #12]
   8145c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   8145e:	68fb      	ldr	r3, [r7, #12]
   81460:	689a      	ldr	r2, [r3, #8]
   81462:	68fb      	ldr	r3, [r7, #12]
   81464:	685b      	ldr	r3, [r3, #4]
   81466:	429a      	cmp	r2, r3
   81468:	d32f      	bcc.n	814ca <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8146a:	68fb      	ldr	r3, [r7, #12]
   8146c:	681a      	ldr	r2, [r3, #0]
   8146e:	68fb      	ldr	r3, [r7, #12]
   81470:	609a      	str	r2, [r3, #8]
   81472:	e02a      	b.n	814ca <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   81474:	68fb      	ldr	r3, [r7, #12]
   81476:	68da      	ldr	r2, [r3, #12]
   81478:	68fb      	ldr	r3, [r7, #12]
   8147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8147c:	4610      	mov	r0, r2
   8147e:	68b9      	ldr	r1, [r7, #8]
   81480:	461a      	mov	r2, r3
   81482:	4b18      	ldr	r3, [pc, #96]	; (814e4 <prvCopyDataToQueue+0xe0>)
   81484:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   81486:	68fb      	ldr	r3, [r7, #12]
   81488:	68da      	ldr	r2, [r3, #12]
   8148a:	68fb      	ldr	r3, [r7, #12]
   8148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8148e:	425b      	negs	r3, r3
   81490:	441a      	add	r2, r3
   81492:	68fb      	ldr	r3, [r7, #12]
   81494:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   81496:	68fb      	ldr	r3, [r7, #12]
   81498:	68da      	ldr	r2, [r3, #12]
   8149a:	68fb      	ldr	r3, [r7, #12]
   8149c:	681b      	ldr	r3, [r3, #0]
   8149e:	429a      	cmp	r2, r3
   814a0:	d207      	bcs.n	814b2 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   814a2:	68fb      	ldr	r3, [r7, #12]
   814a4:	685a      	ldr	r2, [r3, #4]
   814a6:	68fb      	ldr	r3, [r7, #12]
   814a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   814aa:	425b      	negs	r3, r3
   814ac:	441a      	add	r2, r3
   814ae:	68fb      	ldr	r3, [r7, #12]
   814b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   814b2:	687b      	ldr	r3, [r7, #4]
   814b4:	2b02      	cmp	r3, #2
   814b6:	d108      	bne.n	814ca <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   814b8:	68fb      	ldr	r3, [r7, #12]
   814ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   814bc:	2b00      	cmp	r3, #0
   814be:	d004      	beq.n	814ca <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   814c0:	68fb      	ldr	r3, [r7, #12]
   814c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   814c4:	1e5a      	subs	r2, r3, #1
   814c6:	68fb      	ldr	r3, [r7, #12]
   814c8:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   814ca:	68fb      	ldr	r3, [r7, #12]
   814cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   814ce:	1c5a      	adds	r2, r3, #1
   814d0:	68fb      	ldr	r3, [r7, #12]
   814d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   814d4:	697b      	ldr	r3, [r7, #20]
}
   814d6:	4618      	mov	r0, r3
   814d8:	3718      	adds	r7, #24
   814da:	46bd      	mov	sp, r7
   814dc:	bd80      	pop	{r7, pc}
   814de:	bf00      	nop
   814e0:	000818b9 	.word	0x000818b9
   814e4:	00081c91 	.word	0x00081c91

000814e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   814e8:	b580      	push	{r7, lr}
   814ea:	b082      	sub	sp, #8
   814ec:	af00      	add	r7, sp, #0
   814ee:	6078      	str	r0, [r7, #4]
   814f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   814f2:	687b      	ldr	r3, [r7, #4]
   814f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   814f6:	2b00      	cmp	r3, #0
   814f8:	d019      	beq.n	8152e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   814fa:	687b      	ldr	r3, [r7, #4]
   814fc:	68da      	ldr	r2, [r3, #12]
   814fe:	687b      	ldr	r3, [r7, #4]
   81500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81502:	441a      	add	r2, r3
   81504:	687b      	ldr	r3, [r7, #4]
   81506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   81508:	687b      	ldr	r3, [r7, #4]
   8150a:	68da      	ldr	r2, [r3, #12]
   8150c:	687b      	ldr	r3, [r7, #4]
   8150e:	685b      	ldr	r3, [r3, #4]
   81510:	429a      	cmp	r2, r3
   81512:	d303      	bcc.n	8151c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   81514:	687b      	ldr	r3, [r7, #4]
   81516:	681a      	ldr	r2, [r3, #0]
   81518:	687b      	ldr	r3, [r7, #4]
   8151a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   8151c:	687b      	ldr	r3, [r7, #4]
   8151e:	68da      	ldr	r2, [r3, #12]
   81520:	687b      	ldr	r3, [r7, #4]
   81522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81524:	6838      	ldr	r0, [r7, #0]
   81526:	4611      	mov	r1, r2
   81528:	461a      	mov	r2, r3
   8152a:	4b02      	ldr	r3, [pc, #8]	; (81534 <prvCopyDataFromQueue+0x4c>)
   8152c:	4798      	blx	r3
	}
}
   8152e:	3708      	adds	r7, #8
   81530:	46bd      	mov	sp, r7
   81532:	bd80      	pop	{r7, pc}
   81534:	00081c91 	.word	0x00081c91

00081538 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   81538:	b580      	push	{r7, lr}
   8153a:	b086      	sub	sp, #24
   8153c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   8153e:	2300      	movs	r3, #0
   81540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   81542:	4b4d      	ldr	r3, [pc, #308]	; (81678 <xTaskIncrementTick+0x140>)
   81544:	681b      	ldr	r3, [r3, #0]
   81546:	2b00      	cmp	r3, #0
   81548:	f040 8086 	bne.w	81658 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   8154c:	4b4b      	ldr	r3, [pc, #300]	; (8167c <xTaskIncrementTick+0x144>)
   8154e:	681b      	ldr	r3, [r3, #0]
   81550:	1c5a      	adds	r2, r3, #1
   81552:	4b4a      	ldr	r3, [pc, #296]	; (8167c <xTaskIncrementTick+0x144>)
   81554:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   81556:	4b49      	ldr	r3, [pc, #292]	; (8167c <xTaskIncrementTick+0x144>)
   81558:	681b      	ldr	r3, [r3, #0]
   8155a:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   8155c:	693b      	ldr	r3, [r7, #16]
   8155e:	2b00      	cmp	r3, #0
   81560:	d118      	bne.n	81594 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   81562:	4b47      	ldr	r3, [pc, #284]	; (81680 <xTaskIncrementTick+0x148>)
   81564:	681b      	ldr	r3, [r3, #0]
   81566:	681b      	ldr	r3, [r3, #0]
   81568:	2b00      	cmp	r3, #0
   8156a:	d002      	beq.n	81572 <xTaskIncrementTick+0x3a>
   8156c:	4b45      	ldr	r3, [pc, #276]	; (81684 <xTaskIncrementTick+0x14c>)
   8156e:	4798      	blx	r3
   81570:	e7fe      	b.n	81570 <xTaskIncrementTick+0x38>
   81572:	4b43      	ldr	r3, [pc, #268]	; (81680 <xTaskIncrementTick+0x148>)
   81574:	681b      	ldr	r3, [r3, #0]
   81576:	60fb      	str	r3, [r7, #12]
   81578:	4b43      	ldr	r3, [pc, #268]	; (81688 <xTaskIncrementTick+0x150>)
   8157a:	681a      	ldr	r2, [r3, #0]
   8157c:	4b40      	ldr	r3, [pc, #256]	; (81680 <xTaskIncrementTick+0x148>)
   8157e:	601a      	str	r2, [r3, #0]
   81580:	4b41      	ldr	r3, [pc, #260]	; (81688 <xTaskIncrementTick+0x150>)
   81582:	68fa      	ldr	r2, [r7, #12]
   81584:	601a      	str	r2, [r3, #0]
   81586:	4b41      	ldr	r3, [pc, #260]	; (8168c <xTaskIncrementTick+0x154>)
   81588:	681b      	ldr	r3, [r3, #0]
   8158a:	1c5a      	adds	r2, r3, #1
   8158c:	4b3f      	ldr	r3, [pc, #252]	; (8168c <xTaskIncrementTick+0x154>)
   8158e:	601a      	str	r2, [r3, #0]
   81590:	4b3f      	ldr	r3, [pc, #252]	; (81690 <xTaskIncrementTick+0x158>)
   81592:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   81594:	4b3f      	ldr	r3, [pc, #252]	; (81694 <xTaskIncrementTick+0x15c>)
   81596:	681b      	ldr	r3, [r3, #0]
   81598:	693a      	ldr	r2, [r7, #16]
   8159a:	429a      	cmp	r2, r3
   8159c:	d34d      	bcc.n	8163a <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8159e:	4b38      	ldr	r3, [pc, #224]	; (81680 <xTaskIncrementTick+0x148>)
   815a0:	681b      	ldr	r3, [r3, #0]
   815a2:	681b      	ldr	r3, [r3, #0]
   815a4:	2b00      	cmp	r3, #0
   815a6:	d101      	bne.n	815ac <xTaskIncrementTick+0x74>
   815a8:	2301      	movs	r3, #1
   815aa:	e000      	b.n	815ae <xTaskIncrementTick+0x76>
   815ac:	2300      	movs	r3, #0
   815ae:	2b00      	cmp	r3, #0
   815b0:	d004      	beq.n	815bc <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   815b2:	4b38      	ldr	r3, [pc, #224]	; (81694 <xTaskIncrementTick+0x15c>)
   815b4:	f04f 32ff 	mov.w	r2, #4294967295
   815b8:	601a      	str	r2, [r3, #0]
						break;
   815ba:	e03e      	b.n	8163a <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   815bc:	4b30      	ldr	r3, [pc, #192]	; (81680 <xTaskIncrementTick+0x148>)
   815be:	681b      	ldr	r3, [r3, #0]
   815c0:	68db      	ldr	r3, [r3, #12]
   815c2:	68db      	ldr	r3, [r3, #12]
   815c4:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   815c6:	68bb      	ldr	r3, [r7, #8]
   815c8:	685b      	ldr	r3, [r3, #4]
   815ca:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   815cc:	693a      	ldr	r2, [r7, #16]
   815ce:	687b      	ldr	r3, [r7, #4]
   815d0:	429a      	cmp	r2, r3
   815d2:	d203      	bcs.n	815dc <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   815d4:	4b2f      	ldr	r3, [pc, #188]	; (81694 <xTaskIncrementTick+0x15c>)
   815d6:	687a      	ldr	r2, [r7, #4]
   815d8:	601a      	str	r2, [r3, #0]
							break;
   815da:	e02e      	b.n	8163a <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   815dc:	68bb      	ldr	r3, [r7, #8]
   815de:	3304      	adds	r3, #4
   815e0:	4618      	mov	r0, r3
   815e2:	4b2d      	ldr	r3, [pc, #180]	; (81698 <xTaskIncrementTick+0x160>)
   815e4:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   815e6:	68bb      	ldr	r3, [r7, #8]
   815e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   815ea:	2b00      	cmp	r3, #0
   815ec:	d004      	beq.n	815f8 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   815ee:	68bb      	ldr	r3, [r7, #8]
   815f0:	3318      	adds	r3, #24
   815f2:	4618      	mov	r0, r3
   815f4:	4b28      	ldr	r3, [pc, #160]	; (81698 <xTaskIncrementTick+0x160>)
   815f6:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   815f8:	68bb      	ldr	r3, [r7, #8]
   815fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   815fc:	2201      	movs	r2, #1
   815fe:	409a      	lsls	r2, r3
   81600:	4b26      	ldr	r3, [pc, #152]	; (8169c <xTaskIncrementTick+0x164>)
   81602:	681b      	ldr	r3, [r3, #0]
   81604:	431a      	orrs	r2, r3
   81606:	4b25      	ldr	r3, [pc, #148]	; (8169c <xTaskIncrementTick+0x164>)
   81608:	601a      	str	r2, [r3, #0]
   8160a:	68bb      	ldr	r3, [r7, #8]
   8160c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8160e:	4613      	mov	r3, r2
   81610:	009b      	lsls	r3, r3, #2
   81612:	4413      	add	r3, r2
   81614:	009b      	lsls	r3, r3, #2
   81616:	4a22      	ldr	r2, [pc, #136]	; (816a0 <xTaskIncrementTick+0x168>)
   81618:	441a      	add	r2, r3
   8161a:	68bb      	ldr	r3, [r7, #8]
   8161c:	3304      	adds	r3, #4
   8161e:	4610      	mov	r0, r2
   81620:	4619      	mov	r1, r3
   81622:	4b20      	ldr	r3, [pc, #128]	; (816a4 <xTaskIncrementTick+0x16c>)
   81624:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81626:	68bb      	ldr	r3, [r7, #8]
   81628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8162a:	4b1f      	ldr	r3, [pc, #124]	; (816a8 <xTaskIncrementTick+0x170>)
   8162c:	681b      	ldr	r3, [r3, #0]
   8162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81630:	429a      	cmp	r2, r3
   81632:	d301      	bcc.n	81638 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   81634:	2301      	movs	r3, #1
   81636:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   81638:	e7b1      	b.n	8159e <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   8163a:	4b1b      	ldr	r3, [pc, #108]	; (816a8 <xTaskIncrementTick+0x170>)
   8163c:	681b      	ldr	r3, [r3, #0]
   8163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81640:	4917      	ldr	r1, [pc, #92]	; (816a0 <xTaskIncrementTick+0x168>)
   81642:	4613      	mov	r3, r2
   81644:	009b      	lsls	r3, r3, #2
   81646:	4413      	add	r3, r2
   81648:	009b      	lsls	r3, r3, #2
   8164a:	440b      	add	r3, r1
   8164c:	681b      	ldr	r3, [r3, #0]
   8164e:	2b01      	cmp	r3, #1
   81650:	d907      	bls.n	81662 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   81652:	2301      	movs	r3, #1
   81654:	617b      	str	r3, [r7, #20]
   81656:	e004      	b.n	81662 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   81658:	4b14      	ldr	r3, [pc, #80]	; (816ac <xTaskIncrementTick+0x174>)
   8165a:	681b      	ldr	r3, [r3, #0]
   8165c:	1c5a      	adds	r2, r3, #1
   8165e:	4b13      	ldr	r3, [pc, #76]	; (816ac <xTaskIncrementTick+0x174>)
   81660:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   81662:	4b13      	ldr	r3, [pc, #76]	; (816b0 <xTaskIncrementTick+0x178>)
   81664:	681b      	ldr	r3, [r3, #0]
   81666:	2b00      	cmp	r3, #0
   81668:	d001      	beq.n	8166e <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   8166a:	2301      	movs	r3, #1
   8166c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   8166e:	697b      	ldr	r3, [r7, #20]
}
   81670:	4618      	mov	r0, r3
   81672:	3718      	adds	r7, #24
   81674:	46bd      	mov	sp, r7
   81676:	bd80      	pop	{r7, pc}
   81678:	20070564 	.word	0x20070564
   8167c:	20070550 	.word	0x20070550
   81680:	20070534 	.word	0x20070534
   81684:	00081151 	.word	0x00081151
   81688:	20070538 	.word	0x20070538
   8168c:	20070560 	.word	0x20070560
   81690:	00081871 	.word	0x00081871
   81694:	20070008 	.word	0x20070008
   81698:	0008105d 	.word	0x0008105d
   8169c:	20070554 	.word	0x20070554
   816a0:	200704d0 	.word	0x200704d0
   816a4:	00081015 	.word	0x00081015
   816a8:	200704cc 	.word	0x200704cc
   816ac:	20070558 	.word	0x20070558
   816b0:	2007055c 	.word	0x2007055c

000816b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   816b4:	b580      	push	{r7, lr}
   816b6:	b084      	sub	sp, #16
   816b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   816ba:	4b34      	ldr	r3, [pc, #208]	; (8178c <vTaskSwitchContext+0xd8>)
   816bc:	681b      	ldr	r3, [r3, #0]
   816be:	2b00      	cmp	r3, #0
   816c0:	d003      	beq.n	816ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   816c2:	4b33      	ldr	r3, [pc, #204]	; (81790 <vTaskSwitchContext+0xdc>)
   816c4:	2201      	movs	r2, #1
   816c6:	601a      	str	r2, [r3, #0]
   816c8:	e05c      	b.n	81784 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   816ca:	4b31      	ldr	r3, [pc, #196]	; (81790 <vTaskSwitchContext+0xdc>)
   816cc:	2200      	movs	r2, #0
   816ce:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   816d0:	4b30      	ldr	r3, [pc, #192]	; (81794 <vTaskSwitchContext+0xe0>)
   816d2:	681b      	ldr	r3, [r3, #0]
   816d4:	681a      	ldr	r2, [r3, #0]
   816d6:	4b2f      	ldr	r3, [pc, #188]	; (81794 <vTaskSwitchContext+0xe0>)
   816d8:	681b      	ldr	r3, [r3, #0]
   816da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   816dc:	429a      	cmp	r2, r3
   816de:	d808      	bhi.n	816f2 <vTaskSwitchContext+0x3e>
   816e0:	4b2c      	ldr	r3, [pc, #176]	; (81794 <vTaskSwitchContext+0xe0>)
   816e2:	681a      	ldr	r2, [r3, #0]
   816e4:	4b2b      	ldr	r3, [pc, #172]	; (81794 <vTaskSwitchContext+0xe0>)
   816e6:	681b      	ldr	r3, [r3, #0]
   816e8:	3334      	adds	r3, #52	; 0x34
   816ea:	4610      	mov	r0, r2
   816ec:	4619      	mov	r1, r3
   816ee:	4b2a      	ldr	r3, [pc, #168]	; (81798 <vTaskSwitchContext+0xe4>)
   816f0:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   816f2:	4b28      	ldr	r3, [pc, #160]	; (81794 <vTaskSwitchContext+0xe0>)
   816f4:	681b      	ldr	r3, [r3, #0]
   816f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   816f8:	4618      	mov	r0, r3
   816fa:	4928      	ldr	r1, [pc, #160]	; (8179c <vTaskSwitchContext+0xe8>)
   816fc:	2214      	movs	r2, #20
   816fe:	4b28      	ldr	r3, [pc, #160]	; (817a0 <vTaskSwitchContext+0xec>)
   81700:	4798      	blx	r3
   81702:	4603      	mov	r3, r0
   81704:	2b00      	cmp	r3, #0
   81706:	d008      	beq.n	8171a <vTaskSwitchContext+0x66>
   81708:	4b22      	ldr	r3, [pc, #136]	; (81794 <vTaskSwitchContext+0xe0>)
   8170a:	681a      	ldr	r2, [r3, #0]
   8170c:	4b21      	ldr	r3, [pc, #132]	; (81794 <vTaskSwitchContext+0xe0>)
   8170e:	681b      	ldr	r3, [r3, #0]
   81710:	3334      	adds	r3, #52	; 0x34
   81712:	4610      	mov	r0, r2
   81714:	4619      	mov	r1, r3
   81716:	4b20      	ldr	r3, [pc, #128]	; (81798 <vTaskSwitchContext+0xe4>)
   81718:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8171a:	4b22      	ldr	r3, [pc, #136]	; (817a4 <vTaskSwitchContext+0xf0>)
   8171c:	681b      	ldr	r3, [r3, #0]
   8171e:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   81720:	687b      	ldr	r3, [r7, #4]
   81722:	fab3 f383 	clz	r3, r3
   81726:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   81728:	78fb      	ldrb	r3, [r7, #3]
   8172a:	f1c3 031f 	rsb	r3, r3, #31
   8172e:	60fb      	str	r3, [r7, #12]
   81730:	491d      	ldr	r1, [pc, #116]	; (817a8 <vTaskSwitchContext+0xf4>)
   81732:	68fa      	ldr	r2, [r7, #12]
   81734:	4613      	mov	r3, r2
   81736:	009b      	lsls	r3, r3, #2
   81738:	4413      	add	r3, r2
   8173a:	009b      	lsls	r3, r3, #2
   8173c:	440b      	add	r3, r1
   8173e:	681b      	ldr	r3, [r3, #0]
   81740:	2b00      	cmp	r3, #0
   81742:	d102      	bne.n	8174a <vTaskSwitchContext+0x96>
   81744:	4b19      	ldr	r3, [pc, #100]	; (817ac <vTaskSwitchContext+0xf8>)
   81746:	4798      	blx	r3
   81748:	e7fe      	b.n	81748 <vTaskSwitchContext+0x94>
   8174a:	68fa      	ldr	r2, [r7, #12]
   8174c:	4613      	mov	r3, r2
   8174e:	009b      	lsls	r3, r3, #2
   81750:	4413      	add	r3, r2
   81752:	009b      	lsls	r3, r3, #2
   81754:	4a14      	ldr	r2, [pc, #80]	; (817a8 <vTaskSwitchContext+0xf4>)
   81756:	4413      	add	r3, r2
   81758:	60bb      	str	r3, [r7, #8]
   8175a:	68bb      	ldr	r3, [r7, #8]
   8175c:	685b      	ldr	r3, [r3, #4]
   8175e:	685a      	ldr	r2, [r3, #4]
   81760:	68bb      	ldr	r3, [r7, #8]
   81762:	605a      	str	r2, [r3, #4]
   81764:	68bb      	ldr	r3, [r7, #8]
   81766:	685a      	ldr	r2, [r3, #4]
   81768:	68bb      	ldr	r3, [r7, #8]
   8176a:	3308      	adds	r3, #8
   8176c:	429a      	cmp	r2, r3
   8176e:	d104      	bne.n	8177a <vTaskSwitchContext+0xc6>
   81770:	68bb      	ldr	r3, [r7, #8]
   81772:	685b      	ldr	r3, [r3, #4]
   81774:	685a      	ldr	r2, [r3, #4]
   81776:	68bb      	ldr	r3, [r7, #8]
   81778:	605a      	str	r2, [r3, #4]
   8177a:	68bb      	ldr	r3, [r7, #8]
   8177c:	685b      	ldr	r3, [r3, #4]
   8177e:	68da      	ldr	r2, [r3, #12]
   81780:	4b04      	ldr	r3, [pc, #16]	; (81794 <vTaskSwitchContext+0xe0>)
   81782:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   81784:	3710      	adds	r7, #16
   81786:	46bd      	mov	sp, r7
   81788:	bd80      	pop	{r7, pc}
   8178a:	bf00      	nop
   8178c:	20070564 	.word	0x20070564
   81790:	2007055c 	.word	0x2007055c
   81794:	200704cc 	.word	0x200704cc
   81798:	00081a3d 	.word	0x00081a3d
   8179c:	00081e74 	.word	0x00081e74
   817a0:	00081c29 	.word	0x00081c29
   817a4:	20070554 	.word	0x20070554
   817a8:	200704d0 	.word	0x200704d0
   817ac:	00081151 	.word	0x00081151

000817b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   817b0:	b580      	push	{r7, lr}
   817b2:	b084      	sub	sp, #16
   817b4:	af00      	add	r7, sp, #0
   817b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   817b8:	687b      	ldr	r3, [r7, #4]
   817ba:	68db      	ldr	r3, [r3, #12]
   817bc:	68db      	ldr	r3, [r3, #12]
   817be:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   817c0:	68bb      	ldr	r3, [r7, #8]
   817c2:	2b00      	cmp	r3, #0
   817c4:	d102      	bne.n	817cc <xTaskRemoveFromEventList+0x1c>
   817c6:	4b21      	ldr	r3, [pc, #132]	; (8184c <xTaskRemoveFromEventList+0x9c>)
   817c8:	4798      	blx	r3
   817ca:	e7fe      	b.n	817ca <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   817cc:	68bb      	ldr	r3, [r7, #8]
   817ce:	3318      	adds	r3, #24
   817d0:	4618      	mov	r0, r3
   817d2:	4b1f      	ldr	r3, [pc, #124]	; (81850 <xTaskRemoveFromEventList+0xa0>)
   817d4:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   817d6:	4b1f      	ldr	r3, [pc, #124]	; (81854 <xTaskRemoveFromEventList+0xa4>)
   817d8:	681b      	ldr	r3, [r3, #0]
   817da:	2b00      	cmp	r3, #0
   817dc:	d11c      	bne.n	81818 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   817de:	68bb      	ldr	r3, [r7, #8]
   817e0:	3304      	adds	r3, #4
   817e2:	4618      	mov	r0, r3
   817e4:	4b1a      	ldr	r3, [pc, #104]	; (81850 <xTaskRemoveFromEventList+0xa0>)
   817e6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   817e8:	68bb      	ldr	r3, [r7, #8]
   817ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   817ec:	2201      	movs	r2, #1
   817ee:	409a      	lsls	r2, r3
   817f0:	4b19      	ldr	r3, [pc, #100]	; (81858 <xTaskRemoveFromEventList+0xa8>)
   817f2:	681b      	ldr	r3, [r3, #0]
   817f4:	431a      	orrs	r2, r3
   817f6:	4b18      	ldr	r3, [pc, #96]	; (81858 <xTaskRemoveFromEventList+0xa8>)
   817f8:	601a      	str	r2, [r3, #0]
   817fa:	68bb      	ldr	r3, [r7, #8]
   817fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   817fe:	4613      	mov	r3, r2
   81800:	009b      	lsls	r3, r3, #2
   81802:	4413      	add	r3, r2
   81804:	009b      	lsls	r3, r3, #2
   81806:	4a15      	ldr	r2, [pc, #84]	; (8185c <xTaskRemoveFromEventList+0xac>)
   81808:	441a      	add	r2, r3
   8180a:	68bb      	ldr	r3, [r7, #8]
   8180c:	3304      	adds	r3, #4
   8180e:	4610      	mov	r0, r2
   81810:	4619      	mov	r1, r3
   81812:	4b13      	ldr	r3, [pc, #76]	; (81860 <xTaskRemoveFromEventList+0xb0>)
   81814:	4798      	blx	r3
   81816:	e005      	b.n	81824 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81818:	68bb      	ldr	r3, [r7, #8]
   8181a:	3318      	adds	r3, #24
   8181c:	4811      	ldr	r0, [pc, #68]	; (81864 <xTaskRemoveFromEventList+0xb4>)
   8181e:	4619      	mov	r1, r3
   81820:	4b0f      	ldr	r3, [pc, #60]	; (81860 <xTaskRemoveFromEventList+0xb0>)
   81822:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   81824:	68bb      	ldr	r3, [r7, #8]
   81826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81828:	4b0f      	ldr	r3, [pc, #60]	; (81868 <xTaskRemoveFromEventList+0xb8>)
   8182a:	681b      	ldr	r3, [r3, #0]
   8182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8182e:	429a      	cmp	r2, r3
   81830:	d905      	bls.n	8183e <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   81832:	2301      	movs	r3, #1
   81834:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   81836:	4b0d      	ldr	r3, [pc, #52]	; (8186c <xTaskRemoveFromEventList+0xbc>)
   81838:	2201      	movs	r2, #1
   8183a:	601a      	str	r2, [r3, #0]
   8183c:	e001      	b.n	81842 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   8183e:	2300      	movs	r3, #0
   81840:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   81842:	68fb      	ldr	r3, [r7, #12]
}
   81844:	4618      	mov	r0, r3
   81846:	3710      	adds	r7, #16
   81848:	46bd      	mov	sp, r7
   8184a:	bd80      	pop	{r7, pc}
   8184c:	00081151 	.word	0x00081151
   81850:	0008105d 	.word	0x0008105d
   81854:	20070564 	.word	0x20070564
   81858:	20070554 	.word	0x20070554
   8185c:	200704d0 	.word	0x200704d0
   81860:	00081015 	.word	0x00081015
   81864:	2007053c 	.word	0x2007053c
   81868:	200704cc 	.word	0x200704cc
   8186c:	2007055c 	.word	0x2007055c

00081870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   81870:	b480      	push	{r7}
   81872:	b083      	sub	sp, #12
   81874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81876:	4b0e      	ldr	r3, [pc, #56]	; (818b0 <prvResetNextTaskUnblockTime+0x40>)
   81878:	681b      	ldr	r3, [r3, #0]
   8187a:	681b      	ldr	r3, [r3, #0]
   8187c:	2b00      	cmp	r3, #0
   8187e:	d101      	bne.n	81884 <prvResetNextTaskUnblockTime+0x14>
   81880:	2301      	movs	r3, #1
   81882:	e000      	b.n	81886 <prvResetNextTaskUnblockTime+0x16>
   81884:	2300      	movs	r3, #0
   81886:	2b00      	cmp	r3, #0
   81888:	d004      	beq.n	81894 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   8188a:	4b0a      	ldr	r3, [pc, #40]	; (818b4 <prvResetNextTaskUnblockTime+0x44>)
   8188c:	f04f 32ff 	mov.w	r2, #4294967295
   81890:	601a      	str	r2, [r3, #0]
   81892:	e008      	b.n	818a6 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81894:	4b06      	ldr	r3, [pc, #24]	; (818b0 <prvResetNextTaskUnblockTime+0x40>)
   81896:	681b      	ldr	r3, [r3, #0]
   81898:	68db      	ldr	r3, [r3, #12]
   8189a:	68db      	ldr	r3, [r3, #12]
   8189c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8189e:	687b      	ldr	r3, [r7, #4]
   818a0:	685a      	ldr	r2, [r3, #4]
   818a2:	4b04      	ldr	r3, [pc, #16]	; (818b4 <prvResetNextTaskUnblockTime+0x44>)
   818a4:	601a      	str	r2, [r3, #0]
	}
}
   818a6:	370c      	adds	r7, #12
   818a8:	46bd      	mov	sp, r7
   818aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   818ae:	4770      	bx	lr
   818b0:	20070534 	.word	0x20070534
   818b4:	20070008 	.word	0x20070008

000818b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   818b8:	b580      	push	{r7, lr}
   818ba:	b084      	sub	sp, #16
   818bc:	af00      	add	r7, sp, #0
   818be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   818c0:	687b      	ldr	r3, [r7, #4]
   818c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   818c4:	2300      	movs	r3, #0
   818c6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   818c8:	687b      	ldr	r3, [r7, #4]
   818ca:	2b00      	cmp	r3, #0
   818cc:	d056      	beq.n	8197c <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   818ce:	68bb      	ldr	r3, [r7, #8]
   818d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   818d2:	2b00      	cmp	r3, #0
   818d4:	d102      	bne.n	818dc <xTaskPriorityDisinherit+0x24>
   818d6:	4b2c      	ldr	r3, [pc, #176]	; (81988 <xTaskPriorityDisinherit+0xd0>)
   818d8:	4798      	blx	r3
   818da:	e7fe      	b.n	818da <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   818dc:	68bb      	ldr	r3, [r7, #8]
   818de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   818e0:	1e5a      	subs	r2, r3, #1
   818e2:	68bb      	ldr	r3, [r7, #8]
   818e4:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   818e6:	68bb      	ldr	r3, [r7, #8]
   818e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   818ea:	68bb      	ldr	r3, [r7, #8]
   818ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   818ee:	429a      	cmp	r2, r3
   818f0:	d044      	beq.n	8197c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   818f2:	68bb      	ldr	r3, [r7, #8]
   818f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   818f6:	2b00      	cmp	r3, #0
   818f8:	d140      	bne.n	8197c <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   818fa:	68bb      	ldr	r3, [r7, #8]
   818fc:	3304      	adds	r3, #4
   818fe:	4618      	mov	r0, r3
   81900:	4b22      	ldr	r3, [pc, #136]	; (8198c <xTaskPriorityDisinherit+0xd4>)
   81902:	4798      	blx	r3
   81904:	4603      	mov	r3, r0
   81906:	2b00      	cmp	r3, #0
   81908:	d115      	bne.n	81936 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   8190a:	68bb      	ldr	r3, [r7, #8]
   8190c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8190e:	4920      	ldr	r1, [pc, #128]	; (81990 <xTaskPriorityDisinherit+0xd8>)
   81910:	4613      	mov	r3, r2
   81912:	009b      	lsls	r3, r3, #2
   81914:	4413      	add	r3, r2
   81916:	009b      	lsls	r3, r3, #2
   81918:	440b      	add	r3, r1
   8191a:	681b      	ldr	r3, [r3, #0]
   8191c:	2b00      	cmp	r3, #0
   8191e:	d10a      	bne.n	81936 <xTaskPriorityDisinherit+0x7e>
   81920:	68bb      	ldr	r3, [r7, #8]
   81922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81924:	2201      	movs	r2, #1
   81926:	fa02 f303 	lsl.w	r3, r2, r3
   8192a:	43da      	mvns	r2, r3
   8192c:	4b19      	ldr	r3, [pc, #100]	; (81994 <xTaskPriorityDisinherit+0xdc>)
   8192e:	681b      	ldr	r3, [r3, #0]
   81930:	401a      	ands	r2, r3
   81932:	4b18      	ldr	r3, [pc, #96]	; (81994 <xTaskPriorityDisinherit+0xdc>)
   81934:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   81936:	68bb      	ldr	r3, [r7, #8]
   81938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8193a:	68bb      	ldr	r3, [r7, #8]
   8193c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8193e:	68bb      	ldr	r3, [r7, #8]
   81940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81942:	f1c3 0205 	rsb	r2, r3, #5
   81946:	68bb      	ldr	r3, [r7, #8]
   81948:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   8194a:	68bb      	ldr	r3, [r7, #8]
   8194c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8194e:	2201      	movs	r2, #1
   81950:	409a      	lsls	r2, r3
   81952:	4b10      	ldr	r3, [pc, #64]	; (81994 <xTaskPriorityDisinherit+0xdc>)
   81954:	681b      	ldr	r3, [r3, #0]
   81956:	431a      	orrs	r2, r3
   81958:	4b0e      	ldr	r3, [pc, #56]	; (81994 <xTaskPriorityDisinherit+0xdc>)
   8195a:	601a      	str	r2, [r3, #0]
   8195c:	68bb      	ldr	r3, [r7, #8]
   8195e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   81960:	4613      	mov	r3, r2
   81962:	009b      	lsls	r3, r3, #2
   81964:	4413      	add	r3, r2
   81966:	009b      	lsls	r3, r3, #2
   81968:	4a09      	ldr	r2, [pc, #36]	; (81990 <xTaskPriorityDisinherit+0xd8>)
   8196a:	441a      	add	r2, r3
   8196c:	68bb      	ldr	r3, [r7, #8]
   8196e:	3304      	adds	r3, #4
   81970:	4610      	mov	r0, r2
   81972:	4619      	mov	r1, r3
   81974:	4b08      	ldr	r3, [pc, #32]	; (81998 <xTaskPriorityDisinherit+0xe0>)
   81976:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   81978:	2301      	movs	r3, #1
   8197a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   8197c:	68fb      	ldr	r3, [r7, #12]
	}
   8197e:	4618      	mov	r0, r3
   81980:	3710      	adds	r7, #16
   81982:	46bd      	mov	sp, r7
   81984:	bd80      	pop	{r7, pc}
   81986:	bf00      	nop
   81988:	00081151 	.word	0x00081151
   8198c:	0008105d 	.word	0x0008105d
   81990:	200704d0 	.word	0x200704d0
   81994:	20070554 	.word	0x20070554
   81998:	00081015 	.word	0x00081015

0008199c <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   8199c:	b480      	push	{r7}
   8199e:	b085      	sub	sp, #20
   819a0:	af00      	add	r7, sp, #0
   819a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   819a4:	687b      	ldr	r3, [r7, #4]
   819a6:	f003 0307 	and.w	r3, r3, #7
   819aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   819ac:	4b0c      	ldr	r3, [pc, #48]	; (819e0 <NVIC_SetPriorityGrouping+0x44>)
   819ae:	68db      	ldr	r3, [r3, #12]
   819b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   819b2:	68ba      	ldr	r2, [r7, #8]
   819b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   819b8:	4013      	ands	r3, r2
   819ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   819bc:	68fb      	ldr	r3, [r7, #12]
   819be:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   819c0:	68bb      	ldr	r3, [r7, #8]
   819c2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   819c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   819c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   819cc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   819ce:	4b04      	ldr	r3, [pc, #16]	; (819e0 <NVIC_SetPriorityGrouping+0x44>)
   819d0:	68ba      	ldr	r2, [r7, #8]
   819d2:	60da      	str	r2, [r3, #12]
}
   819d4:	3714      	adds	r7, #20
   819d6:	46bd      	mov	sp, r7
   819d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   819dc:	4770      	bx	lr
   819de:	bf00      	nop
   819e0:	e000ed00 	.word	0xe000ed00

000819e4 <main>:

/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
   819e4:	b580      	push	{r7, lr}
   819e6:	b082      	sub	sp, #8
   819e8:	af00      	add	r7, sp, #0
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
   819ea:	4b07      	ldr	r3, [pc, #28]	; (81a08 <main+0x24>)
   819ec:	4798      	blx	r3
	int x =1 ;
   819ee:	2301      	movs	r3, #1
   819f0:	607b      	str	r3, [r7, #4]
	uint32_t test = PIO_PB14_IDX;
   819f2:	232e      	movs	r3, #46	; 0x2e
   819f4:	603b      	str	r3, [r7, #0]
	gpio_configure_pin(test, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   819f6:	6838      	ldr	r0, [r7, #0]
   819f8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   819fc:	4b03      	ldr	r3, [pc, #12]	; (81a0c <main+0x28>)
   819fe:	4798      	blx	r3
	while (1) {
		pio_toggle_pin(test);
   81a00:	6838      	ldr	r0, [r7, #0]
   81a02:	4b03      	ldr	r3, [pc, #12]	; (81a10 <main+0x2c>)
   81a04:	4798      	blx	r3
	}
   81a06:	e7fb      	b.n	81a00 <main+0x1c>
   81a08:	00081a15 	.word	0x00081a15
   81a0c:	000807c1 	.word	0x000807c1
   81a10:	00080761 	.word	0x00080761

00081a14 <prvSetupHardware>:
	return 0;
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
   81a14:	b580      	push	{r7, lr}
   81a16:	af00      	add	r7, sp, #0
extern void SystemCoreClockUpdate( void );

	/* ASF function to setup clocking. */
	sysclk_init();
   81a18:	4b04      	ldr	r3, [pc, #16]	; (81a2c <prvSetupHardware+0x18>)
   81a1a:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping( 0 );
   81a1c:	2000      	movs	r0, #0
   81a1e:	4b04      	ldr	r3, [pc, #16]	; (81a30 <prvSetupHardware+0x1c>)
   81a20:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   81a22:	4b04      	ldr	r3, [pc, #16]	; (81a34 <prvSetupHardware+0x20>)
   81a24:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   81a26:	4b04      	ldr	r3, [pc, #16]	; (81a38 <prvSetupHardware+0x24>)
   81a28:	4798      	blx	r3
}
   81a2a:	bd80      	pop	{r7, pc}
   81a2c:	00080431 	.word	0x00080431
   81a30:	0008199d 	.word	0x0008199d
   81a34:	00080499 	.word	0x00080499
   81a38:	00081a51 	.word	0x00081a51

00081a3c <vApplicationStackOverflowHook>:
	memory allocated by the kernel to any task that has since been deleted. */
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
   81a3c:	b580      	push	{r7, lr}
   81a3e:	b082      	sub	sp, #8
   81a40:	af00      	add	r7, sp, #0
   81a42:	6078      	str	r0, [r7, #4]
   81a44:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   81a46:	4b01      	ldr	r3, [pc, #4]	; (81a4c <vApplicationStackOverflowHook+0x10>)
   81a48:	4798      	blx	r3
	for( ;; );
   81a4a:	e7fe      	b.n	81a4a <vApplicationStackOverflowHook+0xe>
   81a4c:	00081151 	.word	0x00081151

00081a50 <vParTestInitialise>:
static const uint32_t ulLED[] = { LED2_GPIO, LED0_GPIO, LED1_GPIO };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
   81a50:	b580      	push	{r7, lr}
   81a52:	b082      	sub	sp, #8
   81a54:	af00      	add	r7, sp, #0
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   81a56:	2300      	movs	r3, #0
   81a58:	607b      	str	r3, [r7, #4]
   81a5a:	e00f      	b.n	81a7c <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   81a5c:	4b0a      	ldr	r3, [pc, #40]	; (81a88 <vParTestInitialise+0x38>)
   81a5e:	687a      	ldr	r2, [r7, #4]
   81a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   81a64:	4618      	mov	r0, r3
   81a66:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81a6a:	4b08      	ldr	r3, [pc, #32]	; (81a8c <vParTestInitialise+0x3c>)
   81a6c:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   81a6e:	6878      	ldr	r0, [r7, #4]
   81a70:	2100      	movs	r1, #0
   81a72:	4b07      	ldr	r3, [pc, #28]	; (81a90 <vParTestInitialise+0x40>)
   81a74:	4798      	blx	r3

void vParTestInitialise( void )
{
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   81a76:	687b      	ldr	r3, [r7, #4]
   81a78:	3301      	adds	r3, #1
   81a7a:	607b      	str	r3, [r7, #4]
   81a7c:	687b      	ldr	r3, [r7, #4]
   81a7e:	2b02      	cmp	r3, #2
   81a80:	d9ec      	bls.n	81a5c <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   81a82:	3708      	adds	r7, #8
   81a84:	46bd      	mov	sp, r7
   81a86:	bd80      	pop	{r7, pc}
   81a88:	00081e88 	.word	0x00081e88
   81a8c:	000807c1 	.word	0x000807c1
   81a90:	00081a95 	.word	0x00081a95

00081a94 <vParTestSetLED>:
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   81a94:	b580      	push	{r7, lr}
   81a96:	b082      	sub	sp, #8
   81a98:	af00      	add	r7, sp, #0
   81a9a:	6078      	str	r0, [r7, #4]
   81a9c:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   81a9e:	687b      	ldr	r3, [r7, #4]
   81aa0:	2b02      	cmp	r3, #2
   81aa2:	d823      	bhi.n	81aec <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   81aa4:	687b      	ldr	r3, [r7, #4]
   81aa6:	2b00      	cmp	r3, #0
   81aa8:	d106      	bne.n	81ab8 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   81aaa:	683b      	ldr	r3, [r7, #0]
   81aac:	2b00      	cmp	r3, #0
   81aae:	bf14      	ite	ne
   81ab0:	2300      	movne	r3, #0
   81ab2:	2301      	moveq	r3, #1
   81ab4:	b2db      	uxtb	r3, r3
   81ab6:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   81ab8:	683b      	ldr	r3, [r7, #0]
   81aba:	2b00      	cmp	r3, #0
   81abc:	d00b      	beq.n	81ad6 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   81abe:	4b0d      	ldr	r3, [pc, #52]	; (81af4 <vParTestSetLED+0x60>)
   81ac0:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   81ac2:	4b0d      	ldr	r3, [pc, #52]	; (81af8 <vParTestSetLED+0x64>)
   81ac4:	687a      	ldr	r2, [r7, #4]
   81ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   81aca:	4618      	mov	r0, r3
   81acc:	4b0b      	ldr	r3, [pc, #44]	; (81afc <vParTestSetLED+0x68>)
   81ace:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   81ad0:	4b0b      	ldr	r3, [pc, #44]	; (81b00 <vParTestSetLED+0x6c>)
   81ad2:	4798      	blx	r3
   81ad4:	e00a      	b.n	81aec <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   81ad6:	4b07      	ldr	r3, [pc, #28]	; (81af4 <vParTestSetLED+0x60>)
   81ad8:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   81ada:	4b07      	ldr	r3, [pc, #28]	; (81af8 <vParTestSetLED+0x64>)
   81adc:	687a      	ldr	r2, [r7, #4]
   81ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   81ae2:	4618      	mov	r0, r3
   81ae4:	4b07      	ldr	r3, [pc, #28]	; (81b04 <vParTestSetLED+0x70>)
   81ae6:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   81ae8:	4b05      	ldr	r3, [pc, #20]	; (81b00 <vParTestSetLED+0x6c>)
   81aea:	4798      	blx	r3
		}
	}
}
   81aec:	3708      	adds	r7, #8
   81aee:	46bd      	mov	sp, r7
   81af0:	bd80      	pop	{r7, pc}
   81af2:	bf00      	nop
   81af4:	000810d5 	.word	0x000810d5
   81af8:	00081e88 	.word	0x00081e88
   81afc:	0008072d 	.word	0x0008072d
   81b00:	00081119 	.word	0x00081119
   81b04:	000806f9 	.word	0x000806f9

00081b08 <USART0_Handler>:
 * inside an interrupt service routine.  The serial driver used here is *not*
 * intended to represent an efficient implementation.  Real applications should
 * make use of the USARTS peripheral DMA channel (PDC).
 */
void USART0_Handler( void )
{
   81b08:	b590      	push	{r4, r7, lr}
   81b0a:	b087      	sub	sp, #28
   81b0c:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   81b0e:	2300      	movs	r3, #0
   81b10:	60fb      	str	r3, [r7, #12]
uint8_t ucChar;
uint32_t ulChar;
uint32_t ulUSARTStatus, ulUSARTMask;

	ulUSARTStatus = usart_get_status( serUSART_PORT );
   81b12:	4826      	ldr	r0, [pc, #152]	; (81bac <USART0_Handler+0xa4>)
   81b14:	4b26      	ldr	r3, [pc, #152]	; (81bb0 <USART0_Handler+0xa8>)
   81b16:	4798      	blx	r3
   81b18:	6178      	str	r0, [r7, #20]
	ulUSARTMask = usart_get_interrupt_mask( serUSART_PORT );
   81b1a:	4824      	ldr	r0, [pc, #144]	; (81bac <USART0_Handler+0xa4>)
   81b1c:	4b25      	ldr	r3, [pc, #148]	; (81bb4 <USART0_Handler+0xac>)
   81b1e:	4798      	blx	r3
   81b20:	6138      	str	r0, [r7, #16]
	ulUSARTStatus &= ulUSARTMask;
   81b22:	697a      	ldr	r2, [r7, #20]
   81b24:	693b      	ldr	r3, [r7, #16]
   81b26:	4013      	ands	r3, r2
   81b28:	617b      	str	r3, [r7, #20]

	if( ( ulUSARTStatus & US_CSR_TXRDY ) != 0UL )
   81b2a:	697b      	ldr	r3, [r7, #20]
   81b2c:	f003 0302 	and.w	r3, r3, #2
   81b30:	2b00      	cmp	r3, #0
   81b32:	d017      	beq.n	81b64 <USART0_Handler+0x5c>
	{
		/* The interrupt was caused by the TX register becoming empty.  Are
		there any more characters to transmit? */
		if( xQueueReceiveFromISR( xCharsForTx, &ucChar, &xHigherPriorityTaskWoken ) == pdTRUE )
   81b34:	4b20      	ldr	r3, [pc, #128]	; (81bb8 <USART0_Handler+0xb0>)
   81b36:	6819      	ldr	r1, [r3, #0]
   81b38:	f107 020b 	add.w	r2, r7, #11
   81b3c:	f107 030c 	add.w	r3, r7, #12
   81b40:	4608      	mov	r0, r1
   81b42:	4611      	mov	r1, r2
   81b44:	461a      	mov	r2, r3
   81b46:	4b1d      	ldr	r3, [pc, #116]	; (81bbc <USART0_Handler+0xb4>)
   81b48:	4798      	blx	r3
   81b4a:	4603      	mov	r3, r0
   81b4c:	2b01      	cmp	r3, #1
   81b4e:	d105      	bne.n	81b5c <USART0_Handler+0x54>
		{
			/* A character was retrieved from the queue so can be sent to the
			USART now. */
			usart_putchar( serUSART_PORT, ( uint32_t ) ucChar );
   81b50:	7afb      	ldrb	r3, [r7, #11]
   81b52:	4816      	ldr	r0, [pc, #88]	; (81bac <USART0_Handler+0xa4>)
   81b54:	4619      	mov	r1, r3
   81b56:	4b1a      	ldr	r3, [pc, #104]	; (81bc0 <USART0_Handler+0xb8>)
   81b58:	4798      	blx	r3
   81b5a:	e003      	b.n	81b64 <USART0_Handler+0x5c>
		}
		else
		{
			usart_disable_interrupt( serUSART_PORT, US_IER_TXRDY );
   81b5c:	4813      	ldr	r0, [pc, #76]	; (81bac <USART0_Handler+0xa4>)
   81b5e:	2102      	movs	r1, #2
   81b60:	4b18      	ldr	r3, [pc, #96]	; (81bc4 <USART0_Handler+0xbc>)
   81b62:	4798      	blx	r3
		}
	}

	if( ( ulUSARTStatus & US_CSR_RXRDY ) != 0UL )
   81b64:	697b      	ldr	r3, [r7, #20]
   81b66:	f003 0301 	and.w	r3, r3, #1
   81b6a:	2b00      	cmp	r3, #0
   81b6c:	d013      	beq.n	81b96 <USART0_Handler+0x8e>
	{
		/* A character has been received on the USART, send it to the Rx
		handler task. */
		usart_getchar( serUSART_PORT, &ulChar );
   81b6e:	1d3b      	adds	r3, r7, #4
   81b70:	480e      	ldr	r0, [pc, #56]	; (81bac <USART0_Handler+0xa4>)
   81b72:	4619      	mov	r1, r3
   81b74:	4b14      	ldr	r3, [pc, #80]	; (81bc8 <USART0_Handler+0xc0>)
   81b76:	4798      	blx	r3
		ucChar = ( uint8_t ) ( ulChar & 0xffUL );
   81b78:	687b      	ldr	r3, [r7, #4]
   81b7a:	b2db      	uxtb	r3, r3
   81b7c:	72fb      	strb	r3, [r7, #11]
		xQueueSendFromISR( xRxedChars, &ucChar, &xHigherPriorityTaskWoken );
   81b7e:	4b13      	ldr	r3, [pc, #76]	; (81bcc <USART0_Handler+0xc4>)
   81b80:	6819      	ldr	r1, [r3, #0]
   81b82:	f107 020b 	add.w	r2, r7, #11
   81b86:	f107 030c 	add.w	r3, r7, #12
   81b8a:	4608      	mov	r0, r1
   81b8c:	4611      	mov	r1, r2
   81b8e:	461a      	mov	r2, r3
   81b90:	2300      	movs	r3, #0
   81b92:	4c0f      	ldr	r4, [pc, #60]	; (81bd0 <USART0_Handler+0xc8>)
   81b94:	47a0      	blx	r4
	the unblocked task has a priority equal to or higher than the currently
	running task (the task this ISR interrupted), then xHigherPriorityTaskWoken
	will have automatically been set to pdTRUE within the queue send or receive
	function.  portEND_SWITCHING_ISR() will then ensure that this ISR returns
	directly to the higher priority unblocked task. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
   81b96:	68fb      	ldr	r3, [r7, #12]
   81b98:	2b00      	cmp	r3, #0
   81b9a:	d003      	beq.n	81ba4 <USART0_Handler+0x9c>
   81b9c:	4b0d      	ldr	r3, [pc, #52]	; (81bd4 <USART0_Handler+0xcc>)
   81b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81ba2:	601a      	str	r2, [r3, #0]
}
   81ba4:	371c      	adds	r7, #28
   81ba6:	46bd      	mov	sp, r7
   81ba8:	bd90      	pop	{r4, r7, pc}
   81baa:	bf00      	nop
   81bac:	40098000 	.word	0x40098000
   81bb0:	00080ca1 	.word	0x00080ca1
   81bb4:	00080c89 	.word	0x00080c89
   81bb8:	2007056c 	.word	0x2007056c
   81bbc:	0008133d 	.word	0x0008133d
   81bc0:	00080cb9 	.word	0x00080cb9
   81bc4:	00080c6d 	.word	0x00080c6d
   81bc8:	00080cfd 	.word	0x00080cfd
   81bcc:	20070568 	.word	0x20070568
   81bd0:	00081241 	.word	0x00081241
   81bd4:	e000ed04 	.word	0xe000ed04

00081bd8 <__libc_init_array>:
   81bd8:	b570      	push	{r4, r5, r6, lr}
   81bda:	4e0f      	ldr	r6, [pc, #60]	; (81c18 <__libc_init_array+0x40>)
   81bdc:	4d0f      	ldr	r5, [pc, #60]	; (81c1c <__libc_init_array+0x44>)
   81bde:	1b76      	subs	r6, r6, r5
   81be0:	10b6      	asrs	r6, r6, #2
   81be2:	d007      	beq.n	81bf4 <__libc_init_array+0x1c>
   81be4:	3d04      	subs	r5, #4
   81be6:	2400      	movs	r4, #0
   81be8:	3401      	adds	r4, #1
   81bea:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81bee:	4798      	blx	r3
   81bf0:	42a6      	cmp	r6, r4
   81bf2:	d1f9      	bne.n	81be8 <__libc_init_array+0x10>
   81bf4:	4e0a      	ldr	r6, [pc, #40]	; (81c20 <__libc_init_array+0x48>)
   81bf6:	4d0b      	ldr	r5, [pc, #44]	; (81c24 <__libc_init_array+0x4c>)
   81bf8:	f000 f950 	bl	81e9c <_init>
   81bfc:	1b76      	subs	r6, r6, r5
   81bfe:	10b6      	asrs	r6, r6, #2
   81c00:	d008      	beq.n	81c14 <__libc_init_array+0x3c>
   81c02:	3d04      	subs	r5, #4
   81c04:	2400      	movs	r4, #0
   81c06:	3401      	adds	r4, #1
   81c08:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81c0c:	4798      	blx	r3
   81c0e:	42a6      	cmp	r6, r4
   81c10:	d1f9      	bne.n	81c06 <__libc_init_array+0x2e>
   81c12:	bd70      	pop	{r4, r5, r6, pc}
   81c14:	bd70      	pop	{r4, r5, r6, pc}
   81c16:	bf00      	nop
   81c18:	00081ea8 	.word	0x00081ea8
   81c1c:	00081ea8 	.word	0x00081ea8
   81c20:	00081eb0 	.word	0x00081eb0
   81c24:	00081ea8 	.word	0x00081ea8

00081c28 <memcmp>:
   81c28:	2a03      	cmp	r2, #3
   81c2a:	b470      	push	{r4, r5, r6}
   81c2c:	d928      	bls.n	81c80 <memcmp+0x58>
   81c2e:	ea40 0301 	orr.w	r3, r0, r1
   81c32:	079b      	lsls	r3, r3, #30
   81c34:	d013      	beq.n	81c5e <memcmp+0x36>
   81c36:	7805      	ldrb	r5, [r0, #0]
   81c38:	780c      	ldrb	r4, [r1, #0]
   81c3a:	42a5      	cmp	r5, r4
   81c3c:	d124      	bne.n	81c88 <memcmp+0x60>
   81c3e:	3a01      	subs	r2, #1
   81c40:	2300      	movs	r3, #0
   81c42:	e005      	b.n	81c50 <memcmp+0x28>
   81c44:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   81c48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   81c4c:	42a5      	cmp	r5, r4
   81c4e:	d11b      	bne.n	81c88 <memcmp+0x60>
   81c50:	4293      	cmp	r3, r2
   81c52:	f103 0301 	add.w	r3, r3, #1
   81c56:	d1f5      	bne.n	81c44 <memcmp+0x1c>
   81c58:	2000      	movs	r0, #0
   81c5a:	bc70      	pop	{r4, r5, r6}
   81c5c:	4770      	bx	lr
   81c5e:	460c      	mov	r4, r1
   81c60:	4603      	mov	r3, r0
   81c62:	6825      	ldr	r5, [r4, #0]
   81c64:	681e      	ldr	r6, [r3, #0]
   81c66:	4621      	mov	r1, r4
   81c68:	42ae      	cmp	r6, r5
   81c6a:	4618      	mov	r0, r3
   81c6c:	f104 0404 	add.w	r4, r4, #4
   81c70:	f103 0304 	add.w	r3, r3, #4
   81c74:	d104      	bne.n	81c80 <memcmp+0x58>
   81c76:	3a04      	subs	r2, #4
   81c78:	2a03      	cmp	r2, #3
   81c7a:	4618      	mov	r0, r3
   81c7c:	4621      	mov	r1, r4
   81c7e:	d8f0      	bhi.n	81c62 <memcmp+0x3a>
   81c80:	2a00      	cmp	r2, #0
   81c82:	d1d8      	bne.n	81c36 <memcmp+0xe>
   81c84:	4610      	mov	r0, r2
   81c86:	e7e8      	b.n	81c5a <memcmp+0x32>
   81c88:	1b28      	subs	r0, r5, r4
   81c8a:	bc70      	pop	{r4, r5, r6}
   81c8c:	4770      	bx	lr
   81c8e:	bf00      	nop

00081c90 <memcpy>:
   81c90:	4684      	mov	ip, r0
   81c92:	ea41 0300 	orr.w	r3, r1, r0
   81c96:	f013 0303 	ands.w	r3, r3, #3
   81c9a:	d149      	bne.n	81d30 <memcpy+0xa0>
   81c9c:	3a40      	subs	r2, #64	; 0x40
   81c9e:	d323      	bcc.n	81ce8 <memcpy+0x58>
   81ca0:	680b      	ldr	r3, [r1, #0]
   81ca2:	6003      	str	r3, [r0, #0]
   81ca4:	684b      	ldr	r3, [r1, #4]
   81ca6:	6043      	str	r3, [r0, #4]
   81ca8:	688b      	ldr	r3, [r1, #8]
   81caa:	6083      	str	r3, [r0, #8]
   81cac:	68cb      	ldr	r3, [r1, #12]
   81cae:	60c3      	str	r3, [r0, #12]
   81cb0:	690b      	ldr	r3, [r1, #16]
   81cb2:	6103      	str	r3, [r0, #16]
   81cb4:	694b      	ldr	r3, [r1, #20]
   81cb6:	6143      	str	r3, [r0, #20]
   81cb8:	698b      	ldr	r3, [r1, #24]
   81cba:	6183      	str	r3, [r0, #24]
   81cbc:	69cb      	ldr	r3, [r1, #28]
   81cbe:	61c3      	str	r3, [r0, #28]
   81cc0:	6a0b      	ldr	r3, [r1, #32]
   81cc2:	6203      	str	r3, [r0, #32]
   81cc4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81cc6:	6243      	str	r3, [r0, #36]	; 0x24
   81cc8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81cca:	6283      	str	r3, [r0, #40]	; 0x28
   81ccc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81cce:	62c3      	str	r3, [r0, #44]	; 0x2c
   81cd0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81cd2:	6303      	str	r3, [r0, #48]	; 0x30
   81cd4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81cd6:	6343      	str	r3, [r0, #52]	; 0x34
   81cd8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81cda:	6383      	str	r3, [r0, #56]	; 0x38
   81cdc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81cde:	63c3      	str	r3, [r0, #60]	; 0x3c
   81ce0:	3040      	adds	r0, #64	; 0x40
   81ce2:	3140      	adds	r1, #64	; 0x40
   81ce4:	3a40      	subs	r2, #64	; 0x40
   81ce6:	d2db      	bcs.n	81ca0 <memcpy+0x10>
   81ce8:	3230      	adds	r2, #48	; 0x30
   81cea:	d30b      	bcc.n	81d04 <memcpy+0x74>
   81cec:	680b      	ldr	r3, [r1, #0]
   81cee:	6003      	str	r3, [r0, #0]
   81cf0:	684b      	ldr	r3, [r1, #4]
   81cf2:	6043      	str	r3, [r0, #4]
   81cf4:	688b      	ldr	r3, [r1, #8]
   81cf6:	6083      	str	r3, [r0, #8]
   81cf8:	68cb      	ldr	r3, [r1, #12]
   81cfa:	60c3      	str	r3, [r0, #12]
   81cfc:	3010      	adds	r0, #16
   81cfe:	3110      	adds	r1, #16
   81d00:	3a10      	subs	r2, #16
   81d02:	d2f3      	bcs.n	81cec <memcpy+0x5c>
   81d04:	320c      	adds	r2, #12
   81d06:	d305      	bcc.n	81d14 <memcpy+0x84>
   81d08:	f851 3b04 	ldr.w	r3, [r1], #4
   81d0c:	f840 3b04 	str.w	r3, [r0], #4
   81d10:	3a04      	subs	r2, #4
   81d12:	d2f9      	bcs.n	81d08 <memcpy+0x78>
   81d14:	3204      	adds	r2, #4
   81d16:	d008      	beq.n	81d2a <memcpy+0x9a>
   81d18:	07d2      	lsls	r2, r2, #31
   81d1a:	bf1c      	itt	ne
   81d1c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81d20:	f800 3b01 	strbne.w	r3, [r0], #1
   81d24:	d301      	bcc.n	81d2a <memcpy+0x9a>
   81d26:	880b      	ldrh	r3, [r1, #0]
   81d28:	8003      	strh	r3, [r0, #0]
   81d2a:	4660      	mov	r0, ip
   81d2c:	4770      	bx	lr
   81d2e:	bf00      	nop
   81d30:	2a08      	cmp	r2, #8
   81d32:	d313      	bcc.n	81d5c <memcpy+0xcc>
   81d34:	078b      	lsls	r3, r1, #30
   81d36:	d0b1      	beq.n	81c9c <memcpy+0xc>
   81d38:	f010 0303 	ands.w	r3, r0, #3
   81d3c:	d0ae      	beq.n	81c9c <memcpy+0xc>
   81d3e:	f1c3 0304 	rsb	r3, r3, #4
   81d42:	1ad2      	subs	r2, r2, r3
   81d44:	07db      	lsls	r3, r3, #31
   81d46:	bf1c      	itt	ne
   81d48:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81d4c:	f800 3b01 	strbne.w	r3, [r0], #1
   81d50:	d3a4      	bcc.n	81c9c <memcpy+0xc>
   81d52:	f831 3b02 	ldrh.w	r3, [r1], #2
   81d56:	f820 3b02 	strh.w	r3, [r0], #2
   81d5a:	e79f      	b.n	81c9c <memcpy+0xc>
   81d5c:	3a04      	subs	r2, #4
   81d5e:	d3d9      	bcc.n	81d14 <memcpy+0x84>
   81d60:	3a01      	subs	r2, #1
   81d62:	f811 3b01 	ldrb.w	r3, [r1], #1
   81d66:	f800 3b01 	strb.w	r3, [r0], #1
   81d6a:	d2f9      	bcs.n	81d60 <memcpy+0xd0>
   81d6c:	780b      	ldrb	r3, [r1, #0]
   81d6e:	7003      	strb	r3, [r0, #0]
   81d70:	784b      	ldrb	r3, [r1, #1]
   81d72:	7043      	strb	r3, [r0, #1]
   81d74:	788b      	ldrb	r3, [r1, #2]
   81d76:	7083      	strb	r3, [r0, #2]
   81d78:	4660      	mov	r0, ip
   81d7a:	4770      	bx	lr

00081d7c <register_fini>:
   81d7c:	4b02      	ldr	r3, [pc, #8]	; (81d88 <register_fini+0xc>)
   81d7e:	b113      	cbz	r3, 81d86 <register_fini+0xa>
   81d80:	4802      	ldr	r0, [pc, #8]	; (81d8c <register_fini+0x10>)
   81d82:	f000 b805 	b.w	81d90 <atexit>
   81d86:	4770      	bx	lr
   81d88:	00000000 	.word	0x00000000
   81d8c:	00081d9d 	.word	0x00081d9d

00081d90 <atexit>:
   81d90:	4601      	mov	r1, r0
   81d92:	2000      	movs	r0, #0
   81d94:	4602      	mov	r2, r0
   81d96:	4603      	mov	r3, r0
   81d98:	f000 b818 	b.w	81dcc <__register_exitproc>

00081d9c <__libc_fini_array>:
   81d9c:	b538      	push	{r3, r4, r5, lr}
   81d9e:	4d09      	ldr	r5, [pc, #36]	; (81dc4 <__libc_fini_array+0x28>)
   81da0:	4c09      	ldr	r4, [pc, #36]	; (81dc8 <__libc_fini_array+0x2c>)
   81da2:	1b64      	subs	r4, r4, r5
   81da4:	10a4      	asrs	r4, r4, #2
   81da6:	bf18      	it	ne
   81da8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   81dac:	d005      	beq.n	81dba <__libc_fini_array+0x1e>
   81dae:	3c01      	subs	r4, #1
   81db0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   81db4:	4798      	blx	r3
   81db6:	2c00      	cmp	r4, #0
   81db8:	d1f9      	bne.n	81dae <__libc_fini_array+0x12>
   81dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81dbe:	f000 b877 	b.w	81eb0 <_fini>
   81dc2:	bf00      	nop
   81dc4:	00081ebc 	.word	0x00081ebc
   81dc8:	00081ec0 	.word	0x00081ec0

00081dcc <__register_exitproc>:
   81dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   81dce:	4c27      	ldr	r4, [pc, #156]	; (81e6c <__register_exitproc+0xa0>)
   81dd0:	b085      	sub	sp, #20
   81dd2:	6826      	ldr	r6, [r4, #0]
   81dd4:	4607      	mov	r7, r0
   81dd6:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   81dda:	2c00      	cmp	r4, #0
   81ddc:	d040      	beq.n	81e60 <__register_exitproc+0x94>
   81dde:	6865      	ldr	r5, [r4, #4]
   81de0:	2d1f      	cmp	r5, #31
   81de2:	dd1e      	ble.n	81e22 <__register_exitproc+0x56>
   81de4:	4822      	ldr	r0, [pc, #136]	; (81e70 <__register_exitproc+0xa4>)
   81de6:	b918      	cbnz	r0, 81df0 <__register_exitproc+0x24>
   81de8:	f04f 30ff 	mov.w	r0, #4294967295
   81dec:	b005      	add	sp, #20
   81dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81df0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81df4:	9103      	str	r1, [sp, #12]
   81df6:	9202      	str	r2, [sp, #8]
   81df8:	9301      	str	r3, [sp, #4]
   81dfa:	f3af 8000 	nop.w
   81dfe:	9903      	ldr	r1, [sp, #12]
   81e00:	4604      	mov	r4, r0
   81e02:	9a02      	ldr	r2, [sp, #8]
   81e04:	9b01      	ldr	r3, [sp, #4]
   81e06:	2800      	cmp	r0, #0
   81e08:	d0ee      	beq.n	81de8 <__register_exitproc+0x1c>
   81e0a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   81e0e:	2000      	movs	r0, #0
   81e10:	6025      	str	r5, [r4, #0]
   81e12:	6060      	str	r0, [r4, #4]
   81e14:	4605      	mov	r5, r0
   81e16:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81e1a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   81e1e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   81e22:	b93f      	cbnz	r7, 81e34 <__register_exitproc+0x68>
   81e24:	1c6b      	adds	r3, r5, #1
   81e26:	2000      	movs	r0, #0
   81e28:	3502      	adds	r5, #2
   81e2a:	6063      	str	r3, [r4, #4]
   81e2c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   81e30:	b005      	add	sp, #20
   81e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81e34:	2601      	movs	r6, #1
   81e36:	40ae      	lsls	r6, r5
   81e38:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   81e3c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   81e40:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   81e44:	2f02      	cmp	r7, #2
   81e46:	ea42 0206 	orr.w	r2, r2, r6
   81e4a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   81e4e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   81e52:	d1e7      	bne.n	81e24 <__register_exitproc+0x58>
   81e54:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   81e58:	431e      	orrs	r6, r3
   81e5a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   81e5e:	e7e1      	b.n	81e24 <__register_exitproc+0x58>
   81e60:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81e64:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   81e68:	e7b9      	b.n	81dde <__register_exitproc+0x12>
   81e6a:	bf00      	nop
   81e6c:	00081e98 	.word	0x00081e98
   81e70:	00000000 	.word	0x00000000

00081e74 <ucExpectedStackBytes.5295>:
   81e74:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   81e84:	a5a5a5a5                                ....

00081e88 <ulLED>:
   81e88:	0000002c 0000000c 0000002d 00000043     ,.......-...C...

00081e98 <_global_impure_ptr>:
   81e98:	20070010                                ... 

00081e9c <_init>:
   81e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81e9e:	bf00      	nop
   81ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81ea2:	bc08      	pop	{r3}
   81ea4:	469e      	mov	lr, r3
   81ea6:	4770      	bx	lr

00081ea8 <__init_array_start>:
   81ea8:	00081d7d 	.word	0x00081d7d

00081eac <__frame_dummy_init_array_entry>:
   81eac:	00080119                                ....

00081eb0 <_fini>:
   81eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81eb2:	bf00      	nop
   81eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81eb6:	bc08      	pop	{r3}
   81eb8:	469e      	mov	lr, r3
   81eba:	4770      	bx	lr

00081ebc <__fini_array_start>:
   81ebc:	000800f5 	.word	0x000800f5
