
RTOSDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006808  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00086808  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a300  20070438  00086c40  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007a738  00090f40  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000b117  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002581  00000000  00000000  0001b5d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000523a  00000000  00000000  0001db54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f28  00000000  00000000  00022d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d38  00000000  00000000  00023cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000184ce  00000000  00000000  000249ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000106c4  00000000  00000000  0003cebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000671a9  00000000  00000000  0004d580  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002fdc  00000000  00000000  000b472c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c738 	.word	0x2007c738
   80004:	00080d4d 	.word	0x00080d4d
   80008:	00080d45 	.word	0x00080d45
   8000c:	00080d45 	.word	0x00080d45
   80010:	00080d45 	.word	0x00080d45
   80014:	00080d45 	.word	0x00080d45
   80018:	00080d45 	.word	0x00080d45
	...
   8002c:	000811f5 	.word	0x000811f5
   80030:	00080d45 	.word	0x00080d45
   80034:	00000000 	.word	0x00000000
   80038:	000813b9 	.word	0x000813b9
   8003c:	000813fd 	.word	0x000813fd
   80040:	00080d45 	.word	0x00080d45
   80044:	00080d45 	.word	0x00080d45
   80048:	00080d45 	.word	0x00080d45
   8004c:	00080d45 	.word	0x00080d45
   80050:	00080d45 	.word	0x00080d45
   80054:	00080d45 	.word	0x00080d45
   80058:	00080d45 	.word	0x00080d45
   8005c:	00080d45 	.word	0x00080d45
   80060:	00080d45 	.word	0x00080d45
   80064:	00080d45 	.word	0x00080d45
   80068:	00000000 	.word	0x00000000
   8006c:	000809a1 	.word	0x000809a1
   80070:	000809b9 	.word	0x000809b9
   80074:	000809d1 	.word	0x000809d1
   80078:	000809e9 	.word	0x000809e9
	...
   80084:	00086299 	.word	0x00086299
   80088:	00080d45 	.word	0x00080d45
   8008c:	00080d45 	.word	0x00080d45
   80090:	00080d45 	.word	0x00080d45
   80094:	00080d45 	.word	0x00080d45
   80098:	00080d45 	.word	0x00080d45
   8009c:	00080d45 	.word	0x00080d45
   800a0:	00080d45 	.word	0x00080d45
   800a4:	00000000 	.word	0x00000000
   800a8:	00080d45 	.word	0x00080d45
   800ac:	00080d45 	.word	0x00080d45
   800b0:	00080d45 	.word	0x00080d45
   800b4:	00080d45 	.word	0x00080d45
   800b8:	00080d45 	.word	0x00080d45
   800bc:	00080d45 	.word	0x00080d45
   800c0:	00080d45 	.word	0x00080d45
   800c4:	00080d45 	.word	0x00080d45
   800c8:	00080d45 	.word	0x00080d45
   800cc:	00080d45 	.word	0x00080d45
   800d0:	00080d45 	.word	0x00080d45
   800d4:	00080d45 	.word	0x00080d45
   800d8:	00080d45 	.word	0x00080d45
   800dc:	00080d45 	.word	0x00080d45
   800e0:	00080d45 	.word	0x00080d45
   800e4:	00080d45 	.word	0x00080d45
   800e8:	00080d45 	.word	0x00080d45
   800ec:	00080d45 	.word	0x00080d45
   800f0:	00080d45 	.word	0x00080d45

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00086808 	.word	0x00086808

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086808 	.word	0x00086808
   8013c:	2007043c 	.word	0x2007043c
   80140:	00086808 	.word	0x00086808
   80144:	00000000 	.word	0x00000000

00080148 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80148:	b580      	push	{r7, lr}
   8014a:	b082      	sub	sp, #8
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	2b07      	cmp	r3, #7
   80154:	d82e      	bhi.n	801b4 <osc_enable+0x6c>
   80156:	a201      	add	r2, pc, #4	; (adr r2, 8015c <osc_enable+0x14>)
   80158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8015c:	000801b5 	.word	0x000801b5
   80160:	0008017d 	.word	0x0008017d
   80164:	00080185 	.word	0x00080185
   80168:	0008018d 	.word	0x0008018d
   8016c:	00080195 	.word	0x00080195
   80170:	0008019d 	.word	0x0008019d
   80174:	000801a5 	.word	0x000801a5
   80178:	000801ad 	.word	0x000801ad
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8017c:	2000      	movs	r0, #0
   8017e:	4b0f      	ldr	r3, [pc, #60]	; (801bc <osc_enable+0x74>)
   80180:	4798      	blx	r3
		break;
   80182:	e017      	b.n	801b4 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80184:	2001      	movs	r0, #1
   80186:	4b0d      	ldr	r3, [pc, #52]	; (801bc <osc_enable+0x74>)
   80188:	4798      	blx	r3
		break;
   8018a:	e013      	b.n	801b4 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8018c:	2000      	movs	r0, #0
   8018e:	4b0c      	ldr	r3, [pc, #48]	; (801c0 <osc_enable+0x78>)
   80190:	4798      	blx	r3
		break;
   80192:	e00f      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80194:	2010      	movs	r0, #16
   80196:	4b0a      	ldr	r3, [pc, #40]	; (801c0 <osc_enable+0x78>)
   80198:	4798      	blx	r3
		break;
   8019a:	e00b      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8019c:	2020      	movs	r0, #32
   8019e:	4b08      	ldr	r3, [pc, #32]	; (801c0 <osc_enable+0x78>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e007      	b.n	801b4 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   801a4:	2000      	movs	r0, #0
   801a6:	4b07      	ldr	r3, [pc, #28]	; (801c4 <osc_enable+0x7c>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e003      	b.n	801b4 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   801ac:	2001      	movs	r0, #1
   801ae:	4b05      	ldr	r3, [pc, #20]	; (801c4 <osc_enable+0x7c>)
   801b0:	4798      	blx	r3
		break;
   801b2:	bf00      	nop
	}
}
   801b4:	3708      	adds	r7, #8
   801b6:	46bd      	mov	sp, r7
   801b8:	bd80      	pop	{r7, pc}
   801ba:	bf00      	nop
   801bc:	00080a85 	.word	0x00080a85
   801c0:	00080af5 	.word	0x00080af5
   801c4:	00080b95 	.word	0x00080b95

000801c8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801c8:	b580      	push	{r7, lr}
   801ca:	b082      	sub	sp, #8
   801cc:	af00      	add	r7, sp, #0
   801ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	2b07      	cmp	r3, #7
   801d4:	d826      	bhi.n	80224 <osc_is_ready+0x5c>
   801d6:	a201      	add	r2, pc, #4	; (adr r2, 801dc <osc_is_ready+0x14>)
   801d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801dc:	000801fd 	.word	0x000801fd
   801e0:	00080201 	.word	0x00080201
   801e4:	00080201 	.word	0x00080201
   801e8:	00080213 	.word	0x00080213
   801ec:	00080213 	.word	0x00080213
   801f0:	00080213 	.word	0x00080213
   801f4:	00080213 	.word	0x00080213
   801f8:	00080213 	.word	0x00080213
	case OSC_SLCK_32K_RC:
		return 1;
   801fc:	2301      	movs	r3, #1
   801fe:	e012      	b.n	80226 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80200:	4b0b      	ldr	r3, [pc, #44]	; (80230 <osc_is_ready+0x68>)
   80202:	4798      	blx	r3
   80204:	4603      	mov	r3, r0
   80206:	2b00      	cmp	r3, #0
   80208:	bf0c      	ite	eq
   8020a:	2300      	moveq	r3, #0
   8020c:	2301      	movne	r3, #1
   8020e:	b2db      	uxtb	r3, r3
   80210:	e009      	b.n	80226 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80212:	4b08      	ldr	r3, [pc, #32]	; (80234 <osc_is_ready+0x6c>)
   80214:	4798      	blx	r3
   80216:	4603      	mov	r3, r0
   80218:	2b00      	cmp	r3, #0
   8021a:	bf0c      	ite	eq
   8021c:	2300      	moveq	r3, #0
   8021e:	2301      	movne	r3, #1
   80220:	b2db      	uxtb	r3, r3
   80222:	e000      	b.n	80226 <osc_is_ready+0x5e>
	}

	return 0;
   80224:	2300      	movs	r3, #0
}
   80226:	4618      	mov	r0, r3
   80228:	3708      	adds	r7, #8
   8022a:	46bd      	mov	sp, r7
   8022c:	bd80      	pop	{r7, pc}
   8022e:	bf00      	nop
   80230:	00080ac1 	.word	0x00080ac1
   80234:	00080c01 	.word	0x00080c01

00080238 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80238:	b480      	push	{r7}
   8023a:	b083      	sub	sp, #12
   8023c:	af00      	add	r7, sp, #0
   8023e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80240:	687b      	ldr	r3, [r7, #4]
   80242:	2b07      	cmp	r3, #7
   80244:	d825      	bhi.n	80292 <osc_get_rate+0x5a>
   80246:	a201      	add	r2, pc, #4	; (adr r2, 8024c <osc_get_rate+0x14>)
   80248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8024c:	0008026d 	.word	0x0008026d
   80250:	00080273 	.word	0x00080273
   80254:	00080279 	.word	0x00080279
   80258:	0008027f 	.word	0x0008027f
   8025c:	00080283 	.word	0x00080283
   80260:	00080287 	.word	0x00080287
   80264:	0008028b 	.word	0x0008028b
   80268:	0008028f 	.word	0x0008028f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8026c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80270:	e010      	b.n	80294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80276:	e00d      	b.n	80294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8027c:	e00a      	b.n	80294 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8027e:	4b08      	ldr	r3, [pc, #32]	; (802a0 <osc_get_rate+0x68>)
   80280:	e008      	b.n	80294 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80282:	4b08      	ldr	r3, [pc, #32]	; (802a4 <osc_get_rate+0x6c>)
   80284:	e006      	b.n	80294 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80286:	4b08      	ldr	r3, [pc, #32]	; (802a8 <osc_get_rate+0x70>)
   80288:	e004      	b.n	80294 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8028a:	4b07      	ldr	r3, [pc, #28]	; (802a8 <osc_get_rate+0x70>)
   8028c:	e002      	b.n	80294 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8028e:	4b06      	ldr	r3, [pc, #24]	; (802a8 <osc_get_rate+0x70>)
   80290:	e000      	b.n	80294 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80292:	2300      	movs	r3, #0
}
   80294:	4618      	mov	r0, r3
   80296:	370c      	adds	r7, #12
   80298:	46bd      	mov	sp, r7
   8029a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8029e:	4770      	bx	lr
   802a0:	003d0900 	.word	0x003d0900
   802a4:	007a1200 	.word	0x007a1200
   802a8:	00b71b00 	.word	0x00b71b00

000802ac <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802ac:	b580      	push	{r7, lr}
   802ae:	b082      	sub	sp, #8
   802b0:	af00      	add	r7, sp, #0
   802b2:	4603      	mov	r3, r0
   802b4:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802b6:	bf00      	nop
   802b8:	79fb      	ldrb	r3, [r7, #7]
   802ba:	4618      	mov	r0, r3
   802bc:	4b05      	ldr	r3, [pc, #20]	; (802d4 <osc_wait_ready+0x28>)
   802be:	4798      	blx	r3
   802c0:	4603      	mov	r3, r0
   802c2:	f083 0301 	eor.w	r3, r3, #1
   802c6:	b2db      	uxtb	r3, r3
   802c8:	2b00      	cmp	r3, #0
   802ca:	d1f5      	bne.n	802b8 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802cc:	3708      	adds	r7, #8
   802ce:	46bd      	mov	sp, r7
   802d0:	bd80      	pop	{r7, pc}
   802d2:	bf00      	nop
   802d4:	000801c9 	.word	0x000801c9

000802d8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802d8:	b580      	push	{r7, lr}
   802da:	b086      	sub	sp, #24
   802dc:	af00      	add	r7, sp, #0
   802de:	60f8      	str	r0, [r7, #12]
   802e0:	607a      	str	r2, [r7, #4]
   802e2:	603b      	str	r3, [r7, #0]
   802e4:	460b      	mov	r3, r1
   802e6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802e8:	687b      	ldr	r3, [r7, #4]
   802ea:	2b00      	cmp	r3, #0
   802ec:	d107      	bne.n	802fe <pll_config_init+0x26>
   802ee:	683b      	ldr	r3, [r7, #0]
   802f0:	2b00      	cmp	r3, #0
   802f2:	d104      	bne.n	802fe <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802f4:	68fb      	ldr	r3, [r7, #12]
   802f6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802fa:	601a      	str	r2, [r3, #0]
   802fc:	e019      	b.n	80332 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802fe:	7afb      	ldrb	r3, [r7, #11]
   80300:	4618      	mov	r0, r3
   80302:	4b0d      	ldr	r3, [pc, #52]	; (80338 <pll_config_init+0x60>)
   80304:	4798      	blx	r3
   80306:	4602      	mov	r2, r0
   80308:	687b      	ldr	r3, [r7, #4]
   8030a:	fbb2 f3f3 	udiv	r3, r2, r3
   8030e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   80310:	697b      	ldr	r3, [r7, #20]
   80312:	683a      	ldr	r2, [r7, #0]
   80314:	fb02 f303 	mul.w	r3, r2, r3
   80318:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	3b01      	subs	r3, #1
   8031e:	041a      	lsls	r2, r3, #16
   80320:	4b06      	ldr	r3, [pc, #24]	; (8033c <pll_config_init+0x64>)
   80322:	4013      	ands	r3, r2
   80324:	687a      	ldr	r2, [r7, #4]
   80326:	b2d2      	uxtb	r2, r2
   80328:	4313      	orrs	r3, r2
   8032a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8032e:	68fb      	ldr	r3, [r7, #12]
   80330:	601a      	str	r2, [r3, #0]
	}
}
   80332:	3718      	adds	r7, #24
   80334:	46bd      	mov	sp, r7
   80336:	bd80      	pop	{r7, pc}
   80338:	00080239 	.word	0x00080239
   8033c:	07ff0000 	.word	0x07ff0000

00080340 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80340:	b580      	push	{r7, lr}
   80342:	b082      	sub	sp, #8
   80344:	af00      	add	r7, sp, #0
   80346:	6078      	str	r0, [r7, #4]
   80348:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   8034a:	683b      	ldr	r3, [r7, #0]
   8034c:	2b00      	cmp	r3, #0
   8034e:	d108      	bne.n	80362 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80350:	4b08      	ldr	r3, [pc, #32]	; (80374 <pll_enable+0x34>)
   80352:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80354:	4b08      	ldr	r3, [pc, #32]	; (80378 <pll_enable+0x38>)
   80356:	687a      	ldr	r2, [r7, #4]
   80358:	6812      	ldr	r2, [r2, #0]
   8035a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8035e:	629a      	str	r2, [r3, #40]	; 0x28
   80360:	e005      	b.n	8036e <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80362:	4b05      	ldr	r3, [pc, #20]	; (80378 <pll_enable+0x38>)
   80364:	687a      	ldr	r2, [r7, #4]
   80366:	6812      	ldr	r2, [r2, #0]
   80368:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8036c:	61da      	str	r2, [r3, #28]
	}
}
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	00080c1d 	.word	0x00080c1d
   80378:	400e0600 	.word	0x400e0600

0008037c <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80384:	687b      	ldr	r3, [r7, #4]
   80386:	2b00      	cmp	r3, #0
   80388:	d103      	bne.n	80392 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8038a:	4b05      	ldr	r3, [pc, #20]	; (803a0 <pll_is_locked+0x24>)
   8038c:	4798      	blx	r3
   8038e:	4603      	mov	r3, r0
   80390:	e002      	b.n	80398 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80392:	4b04      	ldr	r3, [pc, #16]	; (803a4 <pll_is_locked+0x28>)
   80394:	4798      	blx	r3
   80396:	4603      	mov	r3, r0
}
   80398:	4618      	mov	r0, r3
   8039a:	3708      	adds	r7, #8
   8039c:	46bd      	mov	sp, r7
   8039e:	bd80      	pop	{r7, pc}
   803a0:	00080c35 	.word	0x00080c35
   803a4:	00080c51 	.word	0x00080c51

000803a8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803a8:	b580      	push	{r7, lr}
   803aa:	b082      	sub	sp, #8
   803ac:	af00      	add	r7, sp, #0
   803ae:	4603      	mov	r3, r0
   803b0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803b2:	79fb      	ldrb	r3, [r7, #7]
   803b4:	3b03      	subs	r3, #3
   803b6:	2b04      	cmp	r3, #4
   803b8:	d808      	bhi.n	803cc <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803ba:	79fb      	ldrb	r3, [r7, #7]
   803bc:	4618      	mov	r0, r3
   803be:	4b05      	ldr	r3, [pc, #20]	; (803d4 <pll_enable_source+0x2c>)
   803c0:	4798      	blx	r3
		osc_wait_ready(e_src);
   803c2:	79fb      	ldrb	r3, [r7, #7]
   803c4:	4618      	mov	r0, r3
   803c6:	4b04      	ldr	r3, [pc, #16]	; (803d8 <pll_enable_source+0x30>)
   803c8:	4798      	blx	r3
		break;
   803ca:	e000      	b.n	803ce <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803cc:	bf00      	nop
	}
}
   803ce:	3708      	adds	r7, #8
   803d0:	46bd      	mov	sp, r7
   803d2:	bd80      	pop	{r7, pc}
   803d4:	00080149 	.word	0x00080149
   803d8:	000802ad 	.word	0x000802ad

000803dc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803dc:	b580      	push	{r7, lr}
   803de:	b082      	sub	sp, #8
   803e0:	af00      	add	r7, sp, #0
   803e2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803e4:	bf00      	nop
   803e6:	6878      	ldr	r0, [r7, #4]
   803e8:	4b04      	ldr	r3, [pc, #16]	; (803fc <pll_wait_for_lock+0x20>)
   803ea:	4798      	blx	r3
   803ec:	4603      	mov	r3, r0
   803ee:	2b00      	cmp	r3, #0
   803f0:	d0f9      	beq.n	803e6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   803f2:	2300      	movs	r3, #0
}
   803f4:	4618      	mov	r0, r3
   803f6:	3708      	adds	r7, #8
   803f8:	46bd      	mov	sp, r7
   803fa:	bd80      	pop	{r7, pc}
   803fc:	0008037d 	.word	0x0008037d

00080400 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80400:	b580      	push	{r7, lr}
   80402:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80404:	2006      	movs	r0, #6
   80406:	4b04      	ldr	r3, [pc, #16]	; (80418 <sysclk_get_main_hz+0x18>)
   80408:	4798      	blx	r3
   8040a:	4602      	mov	r2, r0
   8040c:	4613      	mov	r3, r2
   8040e:	00db      	lsls	r3, r3, #3
   80410:	1a9b      	subs	r3, r3, r2
   80412:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80414:	4618      	mov	r0, r3
   80416:	bd80      	pop	{r7, pc}
   80418:	00080239 	.word	0x00080239

0008041c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8041c:	b580      	push	{r7, lr}
   8041e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80420:	4b02      	ldr	r3, [pc, #8]	; (8042c <sysclk_get_cpu_hz+0x10>)
   80422:	4798      	blx	r3
   80424:	4603      	mov	r3, r0
   80426:	085b      	lsrs	r3, r3, #1
}
   80428:	4618      	mov	r0, r3
   8042a:	bd80      	pop	{r7, pc}
   8042c:	00080401 	.word	0x00080401

00080430 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80430:	b590      	push	{r4, r7, lr}
   80432:	b083      	sub	sp, #12
   80434:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80436:	4b10      	ldr	r3, [pc, #64]	; (80478 <sysclk_init+0x48>)
   80438:	4798      	blx	r3
   8043a:	4603      	mov	r3, r0
   8043c:	4618      	mov	r0, r3
   8043e:	4b0f      	ldr	r3, [pc, #60]	; (8047c <sysclk_init+0x4c>)
   80440:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80442:	2006      	movs	r0, #6
   80444:	4b0e      	ldr	r3, [pc, #56]	; (80480 <sysclk_init+0x50>)
   80446:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80448:	1d3b      	adds	r3, r7, #4
   8044a:	4618      	mov	r0, r3
   8044c:	2106      	movs	r1, #6
   8044e:	2201      	movs	r2, #1
   80450:	230e      	movs	r3, #14
   80452:	4c0c      	ldr	r4, [pc, #48]	; (80484 <sysclk_init+0x54>)
   80454:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80456:	1d3b      	adds	r3, r7, #4
   80458:	4618      	mov	r0, r3
   8045a:	2100      	movs	r1, #0
   8045c:	4b0a      	ldr	r3, [pc, #40]	; (80488 <sysclk_init+0x58>)
   8045e:	4798      	blx	r3
		pll_wait_for_lock(0);
   80460:	2000      	movs	r0, #0
   80462:	4b0a      	ldr	r3, [pc, #40]	; (8048c <sysclk_init+0x5c>)
   80464:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80466:	2010      	movs	r0, #16
   80468:	4b09      	ldr	r3, [pc, #36]	; (80490 <sysclk_init+0x60>)
   8046a:	4798      	blx	r3
		break;
   8046c:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8046e:	4b09      	ldr	r3, [pc, #36]	; (80494 <sysclk_init+0x64>)
   80470:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80472:	370c      	adds	r7, #12
   80474:	46bd      	mov	sp, r7
   80476:	bd90      	pop	{r4, r7, pc}
   80478:	0008041d 	.word	0x0008041d
   8047c:	00080f75 	.word	0x00080f75
   80480:	000803a9 	.word	0x000803a9
   80484:	000802d9 	.word	0x000802d9
   80488:	00080341 	.word	0x00080341
   8048c:	000803dd 	.word	0x000803dd
   80490:	00080a01 	.word	0x00080a01
   80494:	00080df5 	.word	0x00080df5

00080498 <board_init>:
#include "board.h"
#include "conf_board.h"
#include "gpio.h"

void board_init(void)
{
   80498:	b580      	push	{r7, lr}
   8049a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8049c:	4b1a      	ldr	r3, [pc, #104]	; (80508 <board_init+0x70>)
   8049e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804a2:	605a      	str	r2, [r3, #4]
#endif

	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   804a4:	200d      	movs	r0, #13
   804a6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804aa:	4b18      	ldr	r3, [pc, #96]	; (8050c <board_init+0x74>)
   804ac:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   804ae:	200d      	movs	r0, #13
   804b0:	4b17      	ldr	r3, [pc, #92]	; (80510 <board_init+0x78>)
   804b2:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   804b4:	200c      	movs	r0, #12
   804b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804ba:	4b14      	ldr	r3, [pc, #80]	; (8050c <board_init+0x74>)
   804bc:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   804be:	202d      	movs	r0, #45	; 0x2d
   804c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804c4:	4b11      	ldr	r3, [pc, #68]	; (8050c <board_init+0x74>)
   804c6:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   804c8:	202c      	movs	r0, #44	; 0x2c
   804ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   804ce:	4b0f      	ldr	r3, [pc, #60]	; (8050c <board_init+0x74>)
   804d0:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   804d2:	2087      	movs	r0, #135	; 0x87
   804d4:	490f      	ldr	r1, [pc, #60]	; (80514 <board_init+0x7c>)
   804d6:	4b0d      	ldr	r3, [pc, #52]	; (8050c <board_init+0x74>)
   804d8:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   804da:	2037      	movs	r0, #55	; 0x37
   804dc:	490e      	ldr	r1, [pc, #56]	; (80518 <board_init+0x80>)
   804de:	4b0b      	ldr	r3, [pc, #44]	; (8050c <board_init+0x74>)
   804e0:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   804e2:	200a      	movs	r0, #10
   804e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804e8:	4b08      	ldr	r3, [pc, #32]	; (8050c <board_init+0x74>)
   804ea:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   804ec:	200b      	movs	r0, #11
   804ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804f2:	4b06      	ldr	r3, [pc, #24]	; (8050c <board_init+0x74>)
   804f4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   804f6:	208e      	movs	r0, #142	; 0x8e
   804f8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   804fc:	4b03      	ldr	r3, [pc, #12]	; (8050c <board_init+0x74>)
   804fe:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   80500:	208e      	movs	r0, #142	; 0x8e
   80502:	4b06      	ldr	r3, [pc, #24]	; (8051c <board_init+0x84>)
   80504:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   80506:	bd80      	pop	{r7, pc}
   80508:	400e1a50 	.word	0x400e1a50
   8050c:	000807c1 	.word	0x000807c1
   80510:	000806f9 	.word	0x000806f9
   80514:	28000079 	.word	0x28000079
   80518:	28000059 	.word	0x28000059
   8051c:	0008072d 	.word	0x0008072d

00080520 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   80520:	b480      	push	{r7}
   80522:	b085      	sub	sp, #20
   80524:	af00      	add	r7, sp, #0
   80526:	60f8      	str	r0, [r7, #12]
   80528:	60b9      	str	r1, [r7, #8]
   8052a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	2b00      	cmp	r3, #0
   80530:	d003      	beq.n	8053a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   80532:	68fb      	ldr	r3, [r7, #12]
   80534:	68ba      	ldr	r2, [r7, #8]
   80536:	665a      	str	r2, [r3, #100]	; 0x64
   80538:	e002      	b.n	80540 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8053a:	68fb      	ldr	r3, [r7, #12]
   8053c:	68ba      	ldr	r2, [r7, #8]
   8053e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   80540:	3714      	adds	r7, #20
   80542:	46bd      	mov	sp, r7
   80544:	f85d 7b04 	ldr.w	r7, [sp], #4
   80548:	4770      	bx	lr
   8054a:	bf00      	nop

0008054c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   8054c:	b480      	push	{r7}
   8054e:	b087      	sub	sp, #28
   80550:	af00      	add	r7, sp, #0
   80552:	60f8      	str	r0, [r7, #12]
   80554:	60b9      	str	r1, [r7, #8]
   80556:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80558:	68fb      	ldr	r3, [r7, #12]
   8055a:	687a      	ldr	r2, [r7, #4]
   8055c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8055e:	68bb      	ldr	r3, [r7, #8]
   80560:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80564:	d01f      	beq.n	805a6 <pio_set_peripheral+0x5a>
   80566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8056a:	d805      	bhi.n	80578 <pio_set_peripheral+0x2c>
   8056c:	2b00      	cmp	r3, #0
   8056e:	d027      	beq.n	805c0 <pio_set_peripheral+0x74>
   80570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80574:	d00a      	beq.n	8058c <pio_set_peripheral+0x40>
   80576:	e01f      	b.n	805b8 <pio_set_peripheral+0x6c>
   80578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8057c:	d020      	beq.n	805c0 <pio_set_peripheral+0x74>
   8057e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80582:	d01d      	beq.n	805c0 <pio_set_peripheral+0x74>
   80584:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80588:	d01a      	beq.n	805c0 <pio_set_peripheral+0x74>
   8058a:	e015      	b.n	805b8 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8058c:	68fb      	ldr	r3, [r7, #12]
   8058e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80590:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80592:	68fb      	ldr	r3, [r7, #12]
   80594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80596:	687b      	ldr	r3, [r7, #4]
   80598:	43d9      	mvns	r1, r3
   8059a:	697b      	ldr	r3, [r7, #20]
   8059c:	400b      	ands	r3, r1
   8059e:	401a      	ands	r2, r3
   805a0:	68fb      	ldr	r3, [r7, #12]
   805a2:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   805a4:	e008      	b.n	805b8 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   805a6:	68fb      	ldr	r3, [r7, #12]
   805a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   805aa:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   805ac:	687a      	ldr	r2, [r7, #4]
   805ae:	697b      	ldr	r3, [r7, #20]
   805b0:	431a      	orrs	r2, r3
   805b2:	68fb      	ldr	r3, [r7, #12]
   805b4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   805b6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   805b8:	68fb      	ldr	r3, [r7, #12]
   805ba:	687a      	ldr	r2, [r7, #4]
   805bc:	605a      	str	r2, [r3, #4]
   805be:	e000      	b.n	805c2 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   805c0:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   805c2:	371c      	adds	r7, #28
   805c4:	46bd      	mov	sp, r7
   805c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   805ca:	4770      	bx	lr

000805cc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   805cc:	b580      	push	{r7, lr}
   805ce:	b084      	sub	sp, #16
   805d0:	af00      	add	r7, sp, #0
   805d2:	60f8      	str	r0, [r7, #12]
   805d4:	60b9      	str	r1, [r7, #8]
   805d6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   805d8:	68f8      	ldr	r0, [r7, #12]
   805da:	68b9      	ldr	r1, [r7, #8]
   805dc:	4b18      	ldr	r3, [pc, #96]	; (80640 <pio_set_input+0x74>)
   805de:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   805e0:	687b      	ldr	r3, [r7, #4]
   805e2:	f003 0301 	and.w	r3, r3, #1
   805e6:	68f8      	ldr	r0, [r7, #12]
   805e8:	68b9      	ldr	r1, [r7, #8]
   805ea:	461a      	mov	r2, r3
   805ec:	4b15      	ldr	r3, [pc, #84]	; (80644 <pio_set_input+0x78>)
   805ee:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   805f0:	687b      	ldr	r3, [r7, #4]
   805f2:	f003 030a 	and.w	r3, r3, #10
   805f6:	2b00      	cmp	r3, #0
   805f8:	d003      	beq.n	80602 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   805fa:	68fb      	ldr	r3, [r7, #12]
   805fc:	68ba      	ldr	r2, [r7, #8]
   805fe:	621a      	str	r2, [r3, #32]
   80600:	e002      	b.n	80608 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80602:	68fb      	ldr	r3, [r7, #12]
   80604:	68ba      	ldr	r2, [r7, #8]
   80606:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80608:	687b      	ldr	r3, [r7, #4]
   8060a:	f003 0302 	and.w	r3, r3, #2
   8060e:	2b00      	cmp	r3, #0
   80610:	d004      	beq.n	8061c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   80612:	68fb      	ldr	r3, [r7, #12]
   80614:	68ba      	ldr	r2, [r7, #8]
   80616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8061a:	e008      	b.n	8062e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8061c:	687b      	ldr	r3, [r7, #4]
   8061e:	f003 0308 	and.w	r3, r3, #8
   80622:	2b00      	cmp	r3, #0
   80624:	d003      	beq.n	8062e <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   80626:	68fb      	ldr	r3, [r7, #12]
   80628:	68ba      	ldr	r2, [r7, #8]
   8062a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8062e:	68fb      	ldr	r3, [r7, #12]
   80630:	68ba      	ldr	r2, [r7, #8]
   80632:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   80634:	68fb      	ldr	r3, [r7, #12]
   80636:	68ba      	ldr	r2, [r7, #8]
   80638:	601a      	str	r2, [r3, #0]
}
   8063a:	3710      	adds	r7, #16
   8063c:	46bd      	mov	sp, r7
   8063e:	bd80      	pop	{r7, pc}
   80640:	000806ad 	.word	0x000806ad
   80644:	00080521 	.word	0x00080521

00080648 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80648:	b580      	push	{r7, lr}
   8064a:	b084      	sub	sp, #16
   8064c:	af00      	add	r7, sp, #0
   8064e:	60f8      	str	r0, [r7, #12]
   80650:	60b9      	str	r1, [r7, #8]
   80652:	607a      	str	r2, [r7, #4]
   80654:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   80656:	68f8      	ldr	r0, [r7, #12]
   80658:	68b9      	ldr	r1, [r7, #8]
   8065a:	4b12      	ldr	r3, [pc, #72]	; (806a4 <pio_set_output+0x5c>)
   8065c:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   8065e:	68f8      	ldr	r0, [r7, #12]
   80660:	68b9      	ldr	r1, [r7, #8]
   80662:	69ba      	ldr	r2, [r7, #24]
   80664:	4b10      	ldr	r3, [pc, #64]	; (806a8 <pio_set_output+0x60>)
   80666:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80668:	683b      	ldr	r3, [r7, #0]
   8066a:	2b00      	cmp	r3, #0
   8066c:	d003      	beq.n	80676 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   8066e:	68fb      	ldr	r3, [r7, #12]
   80670:	68ba      	ldr	r2, [r7, #8]
   80672:	651a      	str	r2, [r3, #80]	; 0x50
   80674:	e002      	b.n	8067c <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80676:	68fb      	ldr	r3, [r7, #12]
   80678:	68ba      	ldr	r2, [r7, #8]
   8067a:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8067c:	687b      	ldr	r3, [r7, #4]
   8067e:	2b00      	cmp	r3, #0
   80680:	d003      	beq.n	8068a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   80682:	68fb      	ldr	r3, [r7, #12]
   80684:	68ba      	ldr	r2, [r7, #8]
   80686:	631a      	str	r2, [r3, #48]	; 0x30
   80688:	e002      	b.n	80690 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8068a:	68fb      	ldr	r3, [r7, #12]
   8068c:	68ba      	ldr	r2, [r7, #8]
   8068e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80690:	68fb      	ldr	r3, [r7, #12]
   80692:	68ba      	ldr	r2, [r7, #8]
   80694:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   80696:	68fb      	ldr	r3, [r7, #12]
   80698:	68ba      	ldr	r2, [r7, #8]
   8069a:	601a      	str	r2, [r3, #0]
}
   8069c:	3710      	adds	r7, #16
   8069e:	46bd      	mov	sp, r7
   806a0:	bd80      	pop	{r7, pc}
   806a2:	bf00      	nop
   806a4:	000806ad 	.word	0x000806ad
   806a8:	00080521 	.word	0x00080521

000806ac <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   806ac:	b480      	push	{r7}
   806ae:	b083      	sub	sp, #12
   806b0:	af00      	add	r7, sp, #0
   806b2:	6078      	str	r0, [r7, #4]
   806b4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   806b6:	687b      	ldr	r3, [r7, #4]
   806b8:	683a      	ldr	r2, [r7, #0]
   806ba:	645a      	str	r2, [r3, #68]	; 0x44
}
   806bc:	370c      	adds	r7, #12
   806be:	46bd      	mov	sp, r7
   806c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   806c4:	4770      	bx	lr
   806c6:	bf00      	nop

000806c8 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   806c8:	b480      	push	{r7}
   806ca:	b083      	sub	sp, #12
   806cc:	af00      	add	r7, sp, #0
   806ce:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   806d0:	687b      	ldr	r3, [r7, #4]
   806d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   806d4:	4618      	mov	r0, r3
   806d6:	370c      	adds	r7, #12
   806d8:	46bd      	mov	sp, r7
   806da:	f85d 7b04 	ldr.w	r7, [sp], #4
   806de:	4770      	bx	lr

000806e0 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   806e0:	b480      	push	{r7}
   806e2:	b083      	sub	sp, #12
   806e4:	af00      	add	r7, sp, #0
   806e6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   806e8:	687b      	ldr	r3, [r7, #4]
   806ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   806ec:	4618      	mov	r0, r3
   806ee:	370c      	adds	r7, #12
   806f0:	46bd      	mov	sp, r7
   806f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   806f6:	4770      	bx	lr

000806f8 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   806f8:	b480      	push	{r7}
   806fa:	b085      	sub	sp, #20
   806fc:	af00      	add	r7, sp, #0
   806fe:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80700:	687b      	ldr	r3, [r7, #4]
   80702:	095b      	lsrs	r3, r3, #5
   80704:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80708:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8070c:	025b      	lsls	r3, r3, #9
   8070e:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80710:	687b      	ldr	r3, [r7, #4]
   80712:	f003 031f 	and.w	r3, r3, #31
   80716:	2201      	movs	r2, #1
   80718:	fa02 f303 	lsl.w	r3, r2, r3
   8071c:	461a      	mov	r2, r3
   8071e:	68fb      	ldr	r3, [r7, #12]
   80720:	631a      	str	r2, [r3, #48]	; 0x30
}
   80722:	3714      	adds	r7, #20
   80724:	46bd      	mov	sp, r7
   80726:	f85d 7b04 	ldr.w	r7, [sp], #4
   8072a:	4770      	bx	lr

0008072c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   8072c:	b480      	push	{r7}
   8072e:	b085      	sub	sp, #20
   80730:	af00      	add	r7, sp, #0
   80732:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80734:	687b      	ldr	r3, [r7, #4]
   80736:	095b      	lsrs	r3, r3, #5
   80738:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8073c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80740:	025b      	lsls	r3, r3, #9
   80742:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80744:	687b      	ldr	r3, [r7, #4]
   80746:	f003 031f 	and.w	r3, r3, #31
   8074a:	2201      	movs	r2, #1
   8074c:	fa02 f303 	lsl.w	r3, r2, r3
   80750:	461a      	mov	r2, r3
   80752:	68fb      	ldr	r3, [r7, #12]
   80754:	635a      	str	r2, [r3, #52]	; 0x34
}
   80756:	3714      	adds	r7, #20
   80758:	46bd      	mov	sp, r7
   8075a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8075e:	4770      	bx	lr

00080760 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   80760:	b480      	push	{r7}
   80762:	b085      	sub	sp, #20
   80764:	af00      	add	r7, sp, #0
   80766:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80768:	687b      	ldr	r3, [r7, #4]
   8076a:	095b      	lsrs	r3, r3, #5
   8076c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80770:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80774:	025b      	lsls	r3, r3, #9
   80776:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   80778:	68fb      	ldr	r3, [r7, #12]
   8077a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8077c:	687b      	ldr	r3, [r7, #4]
   8077e:	f003 031f 	and.w	r3, r3, #31
   80782:	2101      	movs	r1, #1
   80784:	fa01 f303 	lsl.w	r3, r1, r3
   80788:	4013      	ands	r3, r2
   8078a:	2b00      	cmp	r3, #0
   8078c:	d009      	beq.n	807a2 <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8078e:	687b      	ldr	r3, [r7, #4]
   80790:	f003 031f 	and.w	r3, r3, #31
   80794:	2201      	movs	r2, #1
   80796:	fa02 f303 	lsl.w	r3, r2, r3
   8079a:	461a      	mov	r2, r3
   8079c:	68fb      	ldr	r3, [r7, #12]
   8079e:	635a      	str	r2, [r3, #52]	; 0x34
   807a0:	e008      	b.n	807b4 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   807a2:	687b      	ldr	r3, [r7, #4]
   807a4:	f003 031f 	and.w	r3, r3, #31
   807a8:	2201      	movs	r2, #1
   807aa:	fa02 f303 	lsl.w	r3, r2, r3
   807ae:	461a      	mov	r2, r3
   807b0:	68fb      	ldr	r3, [r7, #12]
   807b2:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   807b4:	3714      	adds	r7, #20
   807b6:	46bd      	mov	sp, r7
   807b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   807bc:	4770      	bx	lr
   807be:	bf00      	nop

000807c0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   807c0:	b590      	push	{r4, r7, lr}
   807c2:	b087      	sub	sp, #28
   807c4:	af02      	add	r7, sp, #8
   807c6:	6078      	str	r0, [r7, #4]
   807c8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   807ca:	687b      	ldr	r3, [r7, #4]
   807cc:	095b      	lsrs	r3, r3, #5
   807ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   807d2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   807d6:	025b      	lsls	r3, r3, #9
   807d8:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   807da:	683b      	ldr	r3, [r7, #0]
   807dc:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   807e0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   807e4:	d048      	beq.n	80878 <pio_configure_pin+0xb8>
   807e6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   807ea:	d806      	bhi.n	807fa <pio_configure_pin+0x3a>
   807ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   807f0:	d00a      	beq.n	80808 <pio_configure_pin+0x48>
   807f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   807f6:	d023      	beq.n	80840 <pio_configure_pin+0x80>
   807f8:	e070      	b.n	808dc <pio_configure_pin+0x11c>
   807fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   807fe:	d047      	beq.n	80890 <pio_configure_pin+0xd0>
   80800:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80804:	d044      	beq.n	80890 <pio_configure_pin+0xd0>
   80806:	e069      	b.n	808dc <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80808:	687b      	ldr	r3, [r7, #4]
   8080a:	f003 031f 	and.w	r3, r3, #31
   8080e:	2201      	movs	r2, #1
   80810:	fa02 f303 	lsl.w	r3, r2, r3
   80814:	68f8      	ldr	r0, [r7, #12]
   80816:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8081a:	461a      	mov	r2, r3
   8081c:	4b33      	ldr	r3, [pc, #204]	; (808ec <pio_configure_pin+0x12c>)
   8081e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80820:	687b      	ldr	r3, [r7, #4]
   80822:	f003 031f 	and.w	r3, r3, #31
   80826:	2201      	movs	r2, #1
   80828:	fa02 f303 	lsl.w	r3, r2, r3
   8082c:	461a      	mov	r2, r3
   8082e:	683b      	ldr	r3, [r7, #0]
   80830:	f003 0301 	and.w	r3, r3, #1
   80834:	68f8      	ldr	r0, [r7, #12]
   80836:	4611      	mov	r1, r2
   80838:	461a      	mov	r2, r3
   8083a:	4b2d      	ldr	r3, [pc, #180]	; (808f0 <pio_configure_pin+0x130>)
   8083c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8083e:	e04f      	b.n	808e0 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80840:	687b      	ldr	r3, [r7, #4]
   80842:	f003 031f 	and.w	r3, r3, #31
   80846:	2201      	movs	r2, #1
   80848:	fa02 f303 	lsl.w	r3, r2, r3
   8084c:	68f8      	ldr	r0, [r7, #12]
   8084e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80852:	461a      	mov	r2, r3
   80854:	4b25      	ldr	r3, [pc, #148]	; (808ec <pio_configure_pin+0x12c>)
   80856:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80858:	687b      	ldr	r3, [r7, #4]
   8085a:	f003 031f 	and.w	r3, r3, #31
   8085e:	2201      	movs	r2, #1
   80860:	fa02 f303 	lsl.w	r3, r2, r3
   80864:	461a      	mov	r2, r3
   80866:	683b      	ldr	r3, [r7, #0]
   80868:	f003 0301 	and.w	r3, r3, #1
   8086c:	68f8      	ldr	r0, [r7, #12]
   8086e:	4611      	mov	r1, r2
   80870:	461a      	mov	r2, r3
   80872:	4b1f      	ldr	r3, [pc, #124]	; (808f0 <pio_configure_pin+0x130>)
   80874:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80876:	e033      	b.n	808e0 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80878:	687b      	ldr	r3, [r7, #4]
   8087a:	f003 031f 	and.w	r3, r3, #31
   8087e:	2201      	movs	r2, #1
   80880:	fa02 f303 	lsl.w	r3, r2, r3
   80884:	68f8      	ldr	r0, [r7, #12]
   80886:	4619      	mov	r1, r3
   80888:	683a      	ldr	r2, [r7, #0]
   8088a:	4b1a      	ldr	r3, [pc, #104]	; (808f4 <pio_configure_pin+0x134>)
   8088c:	4798      	blx	r3
		break;
   8088e:	e027      	b.n	808e0 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80890:	687b      	ldr	r3, [r7, #4]
   80892:	f003 031f 	and.w	r3, r3, #31
   80896:	2201      	movs	r2, #1
   80898:	fa02 f303 	lsl.w	r3, r2, r3
   8089c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8089e:	683b      	ldr	r3, [r7, #0]
   808a0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808a4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   808a8:	bf14      	ite	ne
   808aa:	2300      	movne	r3, #0
   808ac:	2301      	moveq	r3, #1
   808ae:	b2db      	uxtb	r3, r3
   808b0:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   808b2:	683b      	ldr	r3, [r7, #0]
   808b4:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808b8:	2b00      	cmp	r3, #0
   808ba:	bf0c      	ite	eq
   808bc:	2300      	moveq	r3, #0
   808be:	2301      	movne	r3, #1
   808c0:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   808c2:	6838      	ldr	r0, [r7, #0]
   808c4:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808c8:	2800      	cmp	r0, #0
   808ca:	bf0c      	ite	eq
   808cc:	2000      	moveq	r0, #0
   808ce:	2001      	movne	r0, #1
   808d0:	b2c0      	uxtb	r0, r0
   808d2:	9000      	str	r0, [sp, #0]
   808d4:	68f8      	ldr	r0, [r7, #12]
   808d6:	4c08      	ldr	r4, [pc, #32]	; (808f8 <pio_configure_pin+0x138>)
   808d8:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   808da:	e001      	b.n	808e0 <pio_configure_pin+0x120>

	default:
		return 0;
   808dc:	2300      	movs	r3, #0
   808de:	e000      	b.n	808e2 <pio_configure_pin+0x122>
	}

	return 1;
   808e0:	2301      	movs	r3, #1
}
   808e2:	4618      	mov	r0, r3
   808e4:	3714      	adds	r7, #20
   808e6:	46bd      	mov	sp, r7
   808e8:	bd90      	pop	{r4, r7, pc}
   808ea:	bf00      	nop
   808ec:	0008054d 	.word	0x0008054d
   808f0:	00080521 	.word	0x00080521
   808f4:	000805cd 	.word	0x000805cd
   808f8:	00080649 	.word	0x00080649

000808fc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   808fc:	b580      	push	{r7, lr}
   808fe:	b084      	sub	sp, #16
   80900:	af00      	add	r7, sp, #0
   80902:	6078      	str	r0, [r7, #4]
   80904:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80906:	6878      	ldr	r0, [r7, #4]
   80908:	4b22      	ldr	r3, [pc, #136]	; (80994 <pio_handler_process+0x98>)
   8090a:	4798      	blx	r3
   8090c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8090e:	6878      	ldr	r0, [r7, #4]
   80910:	4b21      	ldr	r3, [pc, #132]	; (80998 <pio_handler_process+0x9c>)
   80912:	4798      	blx	r3
   80914:	4603      	mov	r3, r0
   80916:	68fa      	ldr	r2, [r7, #12]
   80918:	4013      	ands	r3, r2
   8091a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   8091c:	68fb      	ldr	r3, [r7, #12]
   8091e:	2b00      	cmp	r3, #0
   80920:	d035      	beq.n	8098e <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   80922:	2300      	movs	r3, #0
   80924:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   80926:	e02f      	b.n	80988 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80928:	4a1c      	ldr	r2, [pc, #112]	; (8099c <pio_handler_process+0xa0>)
   8092a:	68bb      	ldr	r3, [r7, #8]
   8092c:	011b      	lsls	r3, r3, #4
   8092e:	4413      	add	r3, r2
   80930:	681a      	ldr	r2, [r3, #0]
   80932:	683b      	ldr	r3, [r7, #0]
   80934:	429a      	cmp	r2, r3
   80936:	d124      	bne.n	80982 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80938:	4a18      	ldr	r2, [pc, #96]	; (8099c <pio_handler_process+0xa0>)
   8093a:	68bb      	ldr	r3, [r7, #8]
   8093c:	011b      	lsls	r3, r3, #4
   8093e:	4413      	add	r3, r2
   80940:	685a      	ldr	r2, [r3, #4]
   80942:	68fb      	ldr	r3, [r7, #12]
   80944:	4013      	ands	r3, r2
   80946:	2b00      	cmp	r3, #0
   80948:	d01b      	beq.n	80982 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8094a:	4a14      	ldr	r2, [pc, #80]	; (8099c <pio_handler_process+0xa0>)
   8094c:	68bb      	ldr	r3, [r7, #8]
   8094e:	011b      	lsls	r3, r3, #4
   80950:	4413      	add	r3, r2
   80952:	3308      	adds	r3, #8
   80954:	685b      	ldr	r3, [r3, #4]
   80956:	4911      	ldr	r1, [pc, #68]	; (8099c <pio_handler_process+0xa0>)
   80958:	68ba      	ldr	r2, [r7, #8]
   8095a:	0112      	lsls	r2, r2, #4
   8095c:	440a      	add	r2, r1
   8095e:	6811      	ldr	r1, [r2, #0]
   80960:	480e      	ldr	r0, [pc, #56]	; (8099c <pio_handler_process+0xa0>)
   80962:	68ba      	ldr	r2, [r7, #8]
   80964:	0112      	lsls	r2, r2, #4
   80966:	4402      	add	r2, r0
   80968:	6852      	ldr	r2, [r2, #4]
   8096a:	4608      	mov	r0, r1
   8096c:	4611      	mov	r1, r2
   8096e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80970:	4a0a      	ldr	r2, [pc, #40]	; (8099c <pio_handler_process+0xa0>)
   80972:	68bb      	ldr	r3, [r7, #8]
   80974:	011b      	lsls	r3, r3, #4
   80976:	4413      	add	r3, r2
   80978:	685b      	ldr	r3, [r3, #4]
   8097a:	43db      	mvns	r3, r3
   8097c:	68fa      	ldr	r2, [r7, #12]
   8097e:	4013      	ands	r3, r2
   80980:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   80982:	68bb      	ldr	r3, [r7, #8]
   80984:	3301      	adds	r3, #1
   80986:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80988:	68fb      	ldr	r3, [r7, #12]
   8098a:	2b00      	cmp	r3, #0
   8098c:	d1cc      	bne.n	80928 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   8098e:	3710      	adds	r7, #16
   80990:	46bd      	mov	sp, r7
   80992:	bd80      	pop	{r7, pc}
   80994:	000806c9 	.word	0x000806c9
   80998:	000806e1 	.word	0x000806e1
   8099c:	20070454 	.word	0x20070454

000809a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   809a0:	b580      	push	{r7, lr}
   809a2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   809a4:	4802      	ldr	r0, [pc, #8]	; (809b0 <PIOA_Handler+0x10>)
   809a6:	210b      	movs	r1, #11
   809a8:	4b02      	ldr	r3, [pc, #8]	; (809b4 <PIOA_Handler+0x14>)
   809aa:	4798      	blx	r3
}
   809ac:	bd80      	pop	{r7, pc}
   809ae:	bf00      	nop
   809b0:	400e0e00 	.word	0x400e0e00
   809b4:	000808fd 	.word	0x000808fd

000809b8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   809b8:	b580      	push	{r7, lr}
   809ba:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   809bc:	4802      	ldr	r0, [pc, #8]	; (809c8 <PIOB_Handler+0x10>)
   809be:	210c      	movs	r1, #12
   809c0:	4b02      	ldr	r3, [pc, #8]	; (809cc <PIOB_Handler+0x14>)
   809c2:	4798      	blx	r3
}
   809c4:	bd80      	pop	{r7, pc}
   809c6:	bf00      	nop
   809c8:	400e1000 	.word	0x400e1000
   809cc:	000808fd 	.word	0x000808fd

000809d0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   809d0:	b580      	push	{r7, lr}
   809d2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   809d4:	4802      	ldr	r0, [pc, #8]	; (809e0 <PIOC_Handler+0x10>)
   809d6:	210d      	movs	r1, #13
   809d8:	4b02      	ldr	r3, [pc, #8]	; (809e4 <PIOC_Handler+0x14>)
   809da:	4798      	blx	r3
}
   809dc:	bd80      	pop	{r7, pc}
   809de:	bf00      	nop
   809e0:	400e1200 	.word	0x400e1200
   809e4:	000808fd 	.word	0x000808fd

000809e8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   809e8:	b580      	push	{r7, lr}
   809ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   809ec:	4802      	ldr	r0, [pc, #8]	; (809f8 <PIOD_Handler+0x10>)
   809ee:	210e      	movs	r1, #14
   809f0:	4b02      	ldr	r3, [pc, #8]	; (809fc <PIOD_Handler+0x14>)
   809f2:	4798      	blx	r3
}
   809f4:	bd80      	pop	{r7, pc}
   809f6:	bf00      	nop
   809f8:	400e1400 	.word	0x400e1400
   809fc:	000808fd 	.word	0x000808fd

00080a00 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   80a00:	b480      	push	{r7}
   80a02:	b085      	sub	sp, #20
   80a04:	af00      	add	r7, sp, #0
   80a06:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80a08:	4b1d      	ldr	r3, [pc, #116]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a0a:	4a1d      	ldr	r2, [pc, #116]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80a0e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   80a12:	687a      	ldr	r2, [r7, #4]
   80a14:	430a      	orrs	r2, r1
   80a16:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a18:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a1c:	60fb      	str	r3, [r7, #12]
   80a1e:	e007      	b.n	80a30 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a20:	68fb      	ldr	r3, [r7, #12]
   80a22:	2b00      	cmp	r3, #0
   80a24:	d101      	bne.n	80a2a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   80a26:	2301      	movs	r3, #1
   80a28:	e023      	b.n	80a72 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   80a2a:	68fb      	ldr	r3, [r7, #12]
   80a2c:	3b01      	subs	r3, #1
   80a2e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a30:	4b13      	ldr	r3, [pc, #76]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a34:	f003 0308 	and.w	r3, r3, #8
   80a38:	2b00      	cmp	r3, #0
   80a3a:	d0f1      	beq.n	80a20 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80a3c:	4b10      	ldr	r3, [pc, #64]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a3e:	4a10      	ldr	r2, [pc, #64]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
   80a42:	f022 0203 	bic.w	r2, r2, #3
   80a46:	f042 0202 	orr.w	r2, r2, #2
   80a4a:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a50:	60fb      	str	r3, [r7, #12]
   80a52:	e007      	b.n	80a64 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a54:	68fb      	ldr	r3, [r7, #12]
   80a56:	2b00      	cmp	r3, #0
   80a58:	d101      	bne.n	80a5e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   80a5a:	2301      	movs	r3, #1
   80a5c:	e009      	b.n	80a72 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   80a5e:	68fb      	ldr	r3, [r7, #12]
   80a60:	3b01      	subs	r3, #1
   80a62:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a64:	4b06      	ldr	r3, [pc, #24]	; (80a80 <pmc_switch_mck_to_pllack+0x80>)
   80a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80a68:	f003 0308 	and.w	r3, r3, #8
   80a6c:	2b00      	cmp	r3, #0
   80a6e:	d0f1      	beq.n	80a54 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80a70:	2300      	movs	r3, #0
}
   80a72:	4618      	mov	r0, r3
   80a74:	3714      	adds	r7, #20
   80a76:	46bd      	mov	sp, r7
   80a78:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a7c:	4770      	bx	lr
   80a7e:	bf00      	nop
   80a80:	400e0600 	.word	0x400e0600

00080a84 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   80a84:	b480      	push	{r7}
   80a86:	b083      	sub	sp, #12
   80a88:	af00      	add	r7, sp, #0
   80a8a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   80a8c:	687b      	ldr	r3, [r7, #4]
   80a8e:	2b01      	cmp	r3, #1
   80a90:	d107      	bne.n	80aa2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   80a92:	4a0a      	ldr	r2, [pc, #40]	; (80abc <pmc_switch_sclk_to_32kxtal+0x38>)
   80a94:	4b09      	ldr	r3, [pc, #36]	; (80abc <pmc_switch_sclk_to_32kxtal+0x38>)
   80a96:	689b      	ldr	r3, [r3, #8]
   80a98:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80aa0:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   80aa2:	4a06      	ldr	r2, [pc, #24]	; (80abc <pmc_switch_sclk_to_32kxtal+0x38>)
   80aa4:	4b05      	ldr	r3, [pc, #20]	; (80abc <pmc_switch_sclk_to_32kxtal+0x38>)
   80aa6:	681b      	ldr	r3, [r3, #0]
   80aa8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   80aac:	f043 0308 	orr.w	r3, r3, #8
   80ab0:	6013      	str	r3, [r2, #0]
}
   80ab2:	370c      	adds	r7, #12
   80ab4:	46bd      	mov	sp, r7
   80ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80aba:	4770      	bx	lr
   80abc:	400e1a10 	.word	0x400e1a10

00080ac0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   80ac0:	b480      	push	{r7}
   80ac2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   80ac4:	4b09      	ldr	r3, [pc, #36]	; (80aec <pmc_osc_is_ready_32kxtal+0x2c>)
   80ac6:	695b      	ldr	r3, [r3, #20]
   80ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   80acc:	2b00      	cmp	r3, #0
   80ace:	d007      	beq.n	80ae0 <pmc_osc_is_ready_32kxtal+0x20>
   80ad0:	4b07      	ldr	r3, [pc, #28]	; (80af0 <pmc_osc_is_ready_32kxtal+0x30>)
   80ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80ad8:	2b00      	cmp	r3, #0
   80ada:	d001      	beq.n	80ae0 <pmc_osc_is_ready_32kxtal+0x20>
   80adc:	2301      	movs	r3, #1
   80ade:	e000      	b.n	80ae2 <pmc_osc_is_ready_32kxtal+0x22>
   80ae0:	2300      	movs	r3, #0
}
   80ae2:	4618      	mov	r0, r3
   80ae4:	46bd      	mov	sp, r7
   80ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80aea:	4770      	bx	lr
   80aec:	400e1a10 	.word	0x400e1a10
   80af0:	400e0600 	.word	0x400e0600

00080af4 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   80af4:	b480      	push	{r7}
   80af6:	b085      	sub	sp, #20
   80af8:	af00      	add	r7, sp, #0
   80afa:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   80afc:	2300      	movs	r3, #0
   80afe:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   80b00:	4b21      	ldr	r3, [pc, #132]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b02:	6a1b      	ldr	r3, [r3, #32]
   80b04:	f003 0301 	and.w	r3, r3, #1
   80b08:	2b00      	cmp	r3, #0
   80b0a:	d00e      	beq.n	80b2a <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b0c:	4a1e      	ldr	r2, [pc, #120]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b0e:	4b1e      	ldr	r3, [pc, #120]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b10:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   80b12:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b16:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   80b1a:	6879      	ldr	r1, [r7, #4]
   80b1c:	430b      	orrs	r3, r1
   80b1e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b22:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b26:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80b28:	e00b      	b.n	80b42 <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   80b2a:	2301      	movs	r3, #1
   80b2c:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b2e:	4a16      	ldr	r2, [pc, #88]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b30:	4b15      	ldr	r3, [pc, #84]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b32:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   80b34:	4b15      	ldr	r3, [pc, #84]	; (80b8c <pmc_switch_mainck_to_fastrc+0x98>)
   80b36:	400b      	ands	r3, r1
   80b38:	6879      	ldr	r1, [r7, #4]
   80b3a:	4319      	orrs	r1, r3
   80b3c:	4b14      	ldr	r3, [pc, #80]	; (80b90 <pmc_switch_mainck_to_fastrc+0x9c>)
   80b3e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   80b40:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   80b42:	bf00      	nop
   80b44:	4b10      	ldr	r3, [pc, #64]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   80b4c:	2b00      	cmp	r3, #0
   80b4e:	d0f9      	beq.n	80b44 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   80b50:	4a0d      	ldr	r2, [pc, #52]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b52:	4b0d      	ldr	r3, [pc, #52]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b54:	6a1b      	ldr	r3, [r3, #32]
   80b56:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   80b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   80b5e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b62:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   80b64:	68fb      	ldr	r3, [r7, #12]
   80b66:	2b00      	cmp	r3, #0
   80b68:	d009      	beq.n	80b7e <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b6a:	4a07      	ldr	r2, [pc, #28]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b6c:	4b06      	ldr	r3, [pc, #24]	; (80b88 <pmc_switch_mainck_to_fastrc+0x94>)
   80b6e:	6a1b      	ldr	r3, [r3, #32]
   80b70:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b74:	f023 0301 	bic.w	r3, r3, #1
   80b78:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b7c:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   80b7e:	3714      	adds	r7, #20
   80b80:	46bd      	mov	sp, r7
   80b82:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b86:	4770      	bx	lr
   80b88:	400e0600 	.word	0x400e0600
   80b8c:	ffc8c086 	.word	0xffc8c086
   80b90:	00373f09 	.word	0x00373f09

00080b94 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   80b94:	b480      	push	{r7}
   80b96:	b083      	sub	sp, #12
   80b98:	af00      	add	r7, sp, #0
   80b9a:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80b9c:	687b      	ldr	r3, [r7, #4]
   80b9e:	2b00      	cmp	r3, #0
   80ba0:	d008      	beq.n	80bb4 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80ba2:	4912      	ldr	r1, [pc, #72]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80ba4:	4b11      	ldr	r3, [pc, #68]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80ba6:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   80ba8:	4a11      	ldr	r2, [pc, #68]	; (80bf0 <pmc_switch_mainck_to_xtal+0x5c>)
   80baa:	401a      	ands	r2, r3
   80bac:	4b11      	ldr	r3, [pc, #68]	; (80bf4 <pmc_switch_mainck_to_xtal+0x60>)
   80bae:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bb0:	620b      	str	r3, [r1, #32]
   80bb2:	e016      	b.n	80be2 <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bb4:	490d      	ldr	r1, [pc, #52]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bb6:	4b0d      	ldr	r3, [pc, #52]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bb8:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   80bba:	4a0f      	ldr	r2, [pc, #60]	; (80bf8 <pmc_switch_mainck_to_xtal+0x64>)
   80bbc:	401a      	ands	r2, r3
   80bbe:	4b0f      	ldr	r3, [pc, #60]	; (80bfc <pmc_switch_mainck_to_xtal+0x68>)
   80bc0:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bc2:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80bc4:	bf00      	nop
   80bc6:	4b09      	ldr	r3, [pc, #36]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80bca:	f003 0301 	and.w	r3, r3, #1
   80bce:	2b00      	cmp	r3, #0
   80bd0:	d0f9      	beq.n	80bc6 <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   80bd2:	4a06      	ldr	r2, [pc, #24]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bd4:	4b05      	ldr	r3, [pc, #20]	; (80bec <pmc_switch_mainck_to_xtal+0x58>)
   80bd6:	6a1b      	ldr	r3, [r3, #32]
   80bd8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80be0:	6213      	str	r3, [r2, #32]
	}
}
   80be2:	370c      	adds	r7, #12
   80be4:	46bd      	mov	sp, r7
   80be6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80bea:	4770      	bx	lr
   80bec:	400e0600 	.word	0x400e0600
   80bf0:	fec8fffc 	.word	0xfec8fffc
   80bf4:	01370002 	.word	0x01370002
   80bf8:	ffc8c0fc 	.word	0xffc8c0fc
   80bfc:	00373f01 	.word	0x00373f01

00080c00 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   80c00:	b480      	push	{r7}
   80c02:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80c04:	4b04      	ldr	r3, [pc, #16]	; (80c18 <pmc_osc_is_ready_mainck+0x18>)
   80c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   80c0c:	4618      	mov	r0, r3
   80c0e:	46bd      	mov	sp, r7
   80c10:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c14:	4770      	bx	lr
   80c16:	bf00      	nop
   80c18:	400e0600 	.word	0x400e0600

00080c1c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   80c1c:	b480      	push	{r7}
   80c1e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c20:	4b03      	ldr	r3, [pc, #12]	; (80c30 <pmc_disable_pllack+0x14>)
   80c22:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c26:	629a      	str	r2, [r3, #40]	; 0x28
}
   80c28:	46bd      	mov	sp, r7
   80c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c2e:	4770      	bx	lr
   80c30:	400e0600 	.word	0x400e0600

00080c34 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   80c34:	b480      	push	{r7}
   80c36:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c38:	4b04      	ldr	r3, [pc, #16]	; (80c4c <pmc_is_locked_pllack+0x18>)
   80c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c3c:	f003 0302 	and.w	r3, r3, #2
}
   80c40:	4618      	mov	r0, r3
   80c42:	46bd      	mov	sp, r7
   80c44:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c48:	4770      	bx	lr
   80c4a:	bf00      	nop
   80c4c:	400e0600 	.word	0x400e0600

00080c50 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   80c50:	b480      	push	{r7}
   80c52:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   80c54:	4b04      	ldr	r3, [pc, #16]	; (80c68 <pmc_is_locked_upll+0x18>)
   80c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   80c5c:	4618      	mov	r0, r3
   80c5e:	46bd      	mov	sp, r7
   80c60:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c64:	4770      	bx	lr
   80c66:	bf00      	nop
   80c68:	400e0600 	.word	0x400e0600

00080c6c <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   80c6c:	b480      	push	{r7}
   80c6e:	b083      	sub	sp, #12
   80c70:	af00      	add	r7, sp, #0
   80c72:	6078      	str	r0, [r7, #4]
   80c74:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   80c76:	687b      	ldr	r3, [r7, #4]
   80c78:	683a      	ldr	r2, [r7, #0]
   80c7a:	60da      	str	r2, [r3, #12]
}
   80c7c:	370c      	adds	r7, #12
   80c7e:	46bd      	mov	sp, r7
   80c80:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c84:	4770      	bx	lr
   80c86:	bf00      	nop

00080c88 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   80c88:	b480      	push	{r7}
   80c8a:	b083      	sub	sp, #12
   80c8c:	af00      	add	r7, sp, #0
   80c8e:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   80c90:	687b      	ldr	r3, [r7, #4]
   80c92:	691b      	ldr	r3, [r3, #16]
}
   80c94:	4618      	mov	r0, r3
   80c96:	370c      	adds	r7, #12
   80c98:	46bd      	mov	sp, r7
   80c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c9e:	4770      	bx	lr

00080ca0 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   80ca0:	b480      	push	{r7}
   80ca2:	b083      	sub	sp, #12
   80ca4:	af00      	add	r7, sp, #0
   80ca6:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   80ca8:	687b      	ldr	r3, [r7, #4]
   80caa:	695b      	ldr	r3, [r3, #20]
}
   80cac:	4618      	mov	r0, r3
   80cae:	370c      	adds	r7, #12
   80cb0:	46bd      	mov	sp, r7
   80cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cb6:	4770      	bx	lr

00080cb8 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   80cb8:	b480      	push	{r7}
   80cba:	b085      	sub	sp, #20
   80cbc:	af00      	add	r7, sp, #0
   80cbe:	6078      	str	r0, [r7, #4]
   80cc0:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   80cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80cc6:	60fb      	str	r3, [r7, #12]

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80cc8:	e006      	b.n	80cd8 <usart_putchar+0x20>
		if (!timeout--) {
   80cca:	68fb      	ldr	r3, [r7, #12]
   80ccc:	1e5a      	subs	r2, r3, #1
   80cce:	60fa      	str	r2, [r7, #12]
   80cd0:	2b00      	cmp	r3, #0
   80cd2:	d101      	bne.n	80cd8 <usart_putchar+0x20>
			return 1;
   80cd4:	2301      	movs	r3, #1
   80cd6:	e00b      	b.n	80cf0 <usart_putchar+0x38>
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80cd8:	687b      	ldr	r3, [r7, #4]
   80cda:	695b      	ldr	r3, [r3, #20]
   80cdc:	f003 0302 	and.w	r3, r3, #2
   80ce0:	2b00      	cmp	r3, #0
   80ce2:	d0f2      	beq.n	80cca <usart_putchar+0x12>
		if (!timeout--) {
			return 1;
		}
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80ce4:	683b      	ldr	r3, [r7, #0]
   80ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   80cea:	687b      	ldr	r3, [r7, #4]
   80cec:	61da      	str	r2, [r3, #28]

	return 0;
   80cee:	2300      	movs	r3, #0
}
   80cf0:	4618      	mov	r0, r3
   80cf2:	3714      	adds	r7, #20
   80cf4:	46bd      	mov	sp, r7
   80cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cfa:	4770      	bx	lr

00080cfc <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   80cfc:	b480      	push	{r7}
   80cfe:	b085      	sub	sp, #20
   80d00:	af00      	add	r7, sp, #0
   80d02:	6078      	str	r0, [r7, #4]
   80d04:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   80d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80d0a:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80d0c:	e006      	b.n	80d1c <usart_getchar+0x20>
		if (!timeout--) {
   80d0e:	68fb      	ldr	r3, [r7, #12]
   80d10:	1e5a      	subs	r2, r3, #1
   80d12:	60fa      	str	r2, [r7, #12]
   80d14:	2b00      	cmp	r3, #0
   80d16:	d101      	bne.n	80d1c <usart_getchar+0x20>
			return 1;
   80d18:	2301      	movs	r3, #1
   80d1a:	e00c      	b.n	80d36 <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80d1c:	687b      	ldr	r3, [r7, #4]
   80d1e:	695b      	ldr	r3, [r3, #20]
   80d20:	f003 0301 	and.w	r3, r3, #1
   80d24:	2b00      	cmp	r3, #0
   80d26:	d0f2      	beq.n	80d0e <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80d28:	687b      	ldr	r3, [r7, #4]
   80d2a:	699b      	ldr	r3, [r3, #24]
   80d2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   80d30:	683b      	ldr	r3, [r7, #0]
   80d32:	601a      	str	r2, [r3, #0]

	return 0;
   80d34:	2300      	movs	r3, #0
}
   80d36:	4618      	mov	r0, r3
   80d38:	3714      	adds	r7, #20
   80d3a:	46bd      	mov	sp, r7
   80d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d40:	4770      	bx	lr
   80d42:	bf00      	nop

00080d44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80d44:	b480      	push	{r7}
   80d46:	af00      	add	r7, sp, #0
	while (1) {
	}
   80d48:	e7fe      	b.n	80d48 <Dummy_Handler+0x4>
   80d4a:	bf00      	nop

00080d4c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80d4c:	b580      	push	{r7, lr}
   80d4e:	b082      	sub	sp, #8
   80d50:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   80d52:	4b1e      	ldr	r3, [pc, #120]	; (80dcc <Reset_Handler+0x80>)
   80d54:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   80d56:	4b1e      	ldr	r3, [pc, #120]	; (80dd0 <Reset_Handler+0x84>)
   80d58:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   80d5a:	687a      	ldr	r2, [r7, #4]
   80d5c:	683b      	ldr	r3, [r7, #0]
   80d5e:	429a      	cmp	r2, r3
   80d60:	d00c      	beq.n	80d7c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   80d62:	e007      	b.n	80d74 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   80d64:	683b      	ldr	r3, [r7, #0]
   80d66:	1d1a      	adds	r2, r3, #4
   80d68:	603a      	str	r2, [r7, #0]
   80d6a:	687a      	ldr	r2, [r7, #4]
   80d6c:	1d11      	adds	r1, r2, #4
   80d6e:	6079      	str	r1, [r7, #4]
   80d70:	6812      	ldr	r2, [r2, #0]
   80d72:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80d74:	683a      	ldr	r2, [r7, #0]
   80d76:	4b17      	ldr	r3, [pc, #92]	; (80dd4 <Reset_Handler+0x88>)
   80d78:	429a      	cmp	r2, r3
   80d7a:	d3f3      	bcc.n	80d64 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d7c:	4b16      	ldr	r3, [pc, #88]	; (80dd8 <Reset_Handler+0x8c>)
   80d7e:	603b      	str	r3, [r7, #0]
   80d80:	e004      	b.n	80d8c <Reset_Handler+0x40>
		*pDest++ = 0;
   80d82:	683b      	ldr	r3, [r7, #0]
   80d84:	1d1a      	adds	r2, r3, #4
   80d86:	603a      	str	r2, [r7, #0]
   80d88:	2200      	movs	r2, #0
   80d8a:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d8c:	683a      	ldr	r2, [r7, #0]
   80d8e:	4b13      	ldr	r3, [pc, #76]	; (80ddc <Reset_Handler+0x90>)
   80d90:	429a      	cmp	r2, r3
   80d92:	d3f6      	bcc.n	80d82 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   80d94:	4b12      	ldr	r3, [pc, #72]	; (80de0 <Reset_Handler+0x94>)
   80d96:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80d98:	4a12      	ldr	r2, [pc, #72]	; (80de4 <Reset_Handler+0x98>)
   80d9a:	687b      	ldr	r3, [r7, #4]
   80d9c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80da0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80da4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80da6:	687b      	ldr	r3, [r7, #4]
   80da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   80dac:	d309      	bcc.n	80dc2 <Reset_Handler+0x76>
   80dae:	687a      	ldr	r2, [r7, #4]
   80db0:	4b0d      	ldr	r3, [pc, #52]	; (80de8 <Reset_Handler+0x9c>)
   80db2:	429a      	cmp	r2, r3
   80db4:	d805      	bhi.n	80dc2 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80db6:	4b0b      	ldr	r3, [pc, #44]	; (80de4 <Reset_Handler+0x98>)
   80db8:	4a0a      	ldr	r2, [pc, #40]	; (80de4 <Reset_Handler+0x98>)
   80dba:	6892      	ldr	r2, [r2, #8]
   80dbc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80dc0:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80dc2:	4b0a      	ldr	r3, [pc, #40]	; (80dec <Reset_Handler+0xa0>)
   80dc4:	4798      	blx	r3

	/* Branch to main function */
	main();
   80dc6:	4b0a      	ldr	r3, [pc, #40]	; (80df0 <Reset_Handler+0xa4>)
   80dc8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   80dca:	e7fe      	b.n	80dca <Reset_Handler+0x7e>
   80dcc:	00086808 	.word	0x00086808
   80dd0:	20070000 	.word	0x20070000
   80dd4:	20070438 	.word	0x20070438
   80dd8:	20070438 	.word	0x20070438
   80ddc:	2007a738 	.word	0x2007a738
   80de0:	00080000 	.word	0x00080000
   80de4:	e000ed00 	.word	0xe000ed00
   80de8:	200fffff 	.word	0x200fffff
   80dec:	00086369 	.word	0x00086369
   80df0:	00085f89 	.word	0x00085f89

00080df4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   80df4:	b480      	push	{r7}
   80df6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80df8:	4b56      	ldr	r3, [pc, #344]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80dfc:	f003 0303 	and.w	r3, r3, #3
   80e00:	2b03      	cmp	r3, #3
   80e02:	f200 808a 	bhi.w	80f1a <SystemCoreClockUpdate+0x126>
   80e06:	a101      	add	r1, pc, #4	; (adr r1, 80e0c <SystemCoreClockUpdate+0x18>)
   80e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   80e0c:	00080e1d 	.word	0x00080e1d
   80e10:	00080e3d 	.word	0x00080e3d
   80e14:	00080e8d 	.word	0x00080e8d
   80e18:	00080e8d 	.word	0x00080e8d
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80e1c:	4b4e      	ldr	r3, [pc, #312]	; (80f58 <SystemCoreClockUpdate+0x164>)
   80e1e:	695b      	ldr	r3, [r3, #20]
   80e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
   80e24:	2b00      	cmp	r3, #0
   80e26:	d004      	beq.n	80e32 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80e28:	4b4c      	ldr	r3, [pc, #304]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80e2e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   80e30:	e073      	b.n	80f1a <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80e32:	4b4a      	ldr	r3, [pc, #296]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e34:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   80e38:	601a      	str	r2, [r3, #0]
		}
		break;
   80e3a:	e06e      	b.n	80f1a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e3c:	4b45      	ldr	r3, [pc, #276]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80e3e:	6a1b      	ldr	r3, [r3, #32]
   80e40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80e44:	2b00      	cmp	r3, #0
   80e46:	d003      	beq.n	80e50 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e48:	4b44      	ldr	r3, [pc, #272]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e4a:	4a45      	ldr	r2, [pc, #276]	; (80f60 <SystemCoreClockUpdate+0x16c>)
   80e4c:	601a      	str	r2, [r3, #0]
   80e4e:	e01c      	b.n	80e8a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e50:	4b42      	ldr	r3, [pc, #264]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e52:	4a44      	ldr	r2, [pc, #272]	; (80f64 <SystemCoreClockUpdate+0x170>)
   80e54:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e56:	4b3f      	ldr	r3, [pc, #252]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80e58:	6a1b      	ldr	r3, [r3, #32]
   80e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e5e:	2b10      	cmp	r3, #16
   80e60:	d004      	beq.n	80e6c <SystemCoreClockUpdate+0x78>
   80e62:	2b20      	cmp	r3, #32
   80e64:	d008      	beq.n	80e78 <SystemCoreClockUpdate+0x84>
   80e66:	2b00      	cmp	r3, #0
   80e68:	d00e      	beq.n	80e88 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   80e6a:	e00e      	b.n	80e8a <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80e6c:	4b3b      	ldr	r3, [pc, #236]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e6e:	681b      	ldr	r3, [r3, #0]
   80e70:	005a      	lsls	r2, r3, #1
   80e72:	4b3a      	ldr	r3, [pc, #232]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e74:	601a      	str	r2, [r3, #0]
				break;
   80e76:	e008      	b.n	80e8a <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80e78:	4b38      	ldr	r3, [pc, #224]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e7a:	681a      	ldr	r2, [r3, #0]
   80e7c:	4613      	mov	r3, r2
   80e7e:	005b      	lsls	r3, r3, #1
   80e80:	441a      	add	r2, r3
   80e82:	4b36      	ldr	r3, [pc, #216]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e84:	601a      	str	r2, [r3, #0]
				break;
   80e86:	e000      	b.n	80e8a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   80e88:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   80e8a:	e046      	b.n	80f1a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e8c:	4b31      	ldr	r3, [pc, #196]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80e8e:	6a1b      	ldr	r3, [r3, #32]
   80e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80e94:	2b00      	cmp	r3, #0
   80e96:	d003      	beq.n	80ea0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e98:	4b30      	ldr	r3, [pc, #192]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80e9a:	4a31      	ldr	r2, [pc, #196]	; (80f60 <SystemCoreClockUpdate+0x16c>)
   80e9c:	601a      	str	r2, [r3, #0]
   80e9e:	e01c      	b.n	80eda <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ea0:	4b2e      	ldr	r3, [pc, #184]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ea2:	4a30      	ldr	r2, [pc, #192]	; (80f64 <SystemCoreClockUpdate+0x170>)
   80ea4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ea6:	4b2b      	ldr	r3, [pc, #172]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80ea8:	6a1b      	ldr	r3, [r3, #32]
   80eaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80eae:	2b10      	cmp	r3, #16
   80eb0:	d004      	beq.n	80ebc <SystemCoreClockUpdate+0xc8>
   80eb2:	2b20      	cmp	r3, #32
   80eb4:	d008      	beq.n	80ec8 <SystemCoreClockUpdate+0xd4>
   80eb6:	2b00      	cmp	r3, #0
   80eb8:	d00e      	beq.n	80ed8 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   80eba:	e00e      	b.n	80eda <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80ebc:	4b27      	ldr	r3, [pc, #156]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ebe:	681b      	ldr	r3, [r3, #0]
   80ec0:	005a      	lsls	r2, r3, #1
   80ec2:	4b26      	ldr	r3, [pc, #152]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ec4:	601a      	str	r2, [r3, #0]
				break;
   80ec6:	e008      	b.n	80eda <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80ec8:	4b24      	ldr	r3, [pc, #144]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80eca:	681a      	ldr	r2, [r3, #0]
   80ecc:	4613      	mov	r3, r2
   80ece:	005b      	lsls	r3, r3, #1
   80ed0:	441a      	add	r2, r3
   80ed2:	4b22      	ldr	r3, [pc, #136]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ed4:	601a      	str	r2, [r3, #0]
				break;
   80ed6:	e000      	b.n	80eda <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   80ed8:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80eda:	4b1e      	ldr	r3, [pc, #120]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ede:	f003 0303 	and.w	r3, r3, #3
   80ee2:	2b02      	cmp	r3, #2
   80ee4:	d115      	bne.n	80f12 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80ee6:	4b1b      	ldr	r3, [pc, #108]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   80eea:	4b1f      	ldr	r3, [pc, #124]	; (80f68 <SystemCoreClockUpdate+0x174>)
   80eec:	4013      	ands	r3, r2
   80eee:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   80ef0:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80ef2:	4a1a      	ldr	r2, [pc, #104]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80ef4:	6812      	ldr	r2, [r2, #0]
   80ef6:	fb02 f203 	mul.w	r2, r2, r3
   80efa:	4b18      	ldr	r3, [pc, #96]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80efc:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80efe:	4b17      	ldr	r3, [pc, #92]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f00:	681a      	ldr	r2, [r3, #0]
   80f02:	4b14      	ldr	r3, [pc, #80]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   80f06:	b2db      	uxtb	r3, r3
   80f08:	fbb2 f2f3 	udiv	r2, r2, r3
   80f0c:	4b13      	ldr	r3, [pc, #76]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f0e:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   80f10:	e002      	b.n	80f18 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f12:	4b12      	ldr	r3, [pc, #72]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f14:	4a15      	ldr	r2, [pc, #84]	; (80f6c <SystemCoreClockUpdate+0x178>)
   80f16:	601a      	str	r2, [r3, #0]
		}
		break;
   80f18:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80f1a:	4b0e      	ldr	r3, [pc, #56]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f22:	2b70      	cmp	r3, #112	; 0x70
   80f24:	d108      	bne.n	80f38 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   80f26:	4b0d      	ldr	r3, [pc, #52]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f28:	681a      	ldr	r2, [r3, #0]
   80f2a:	4b11      	ldr	r3, [pc, #68]	; (80f70 <SystemCoreClockUpdate+0x17c>)
   80f2c:	fba3 1302 	umull	r1, r3, r3, r2
   80f30:	085a      	lsrs	r2, r3, #1
   80f32:	4b0a      	ldr	r3, [pc, #40]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f34:	601a      	str	r2, [r3, #0]
   80f36:	e009      	b.n	80f4c <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80f38:	4b08      	ldr	r3, [pc, #32]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f3a:	681a      	ldr	r2, [r3, #0]
   80f3c:	4b05      	ldr	r3, [pc, #20]	; (80f54 <SystemCoreClockUpdate+0x160>)
   80f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f44:	091b      	lsrs	r3, r3, #4
   80f46:	40da      	lsrs	r2, r3
   80f48:	4b04      	ldr	r3, [pc, #16]	; (80f5c <SystemCoreClockUpdate+0x168>)
   80f4a:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   80f4c:	46bd      	mov	sp, r7
   80f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f52:	4770      	bx	lr
   80f54:	400e0600 	.word	0x400e0600
   80f58:	400e1a10 	.word	0x400e1a10
   80f5c:	20070000 	.word	0x20070000
   80f60:	00b71b00 	.word	0x00b71b00
   80f64:	003d0900 	.word	0x003d0900
   80f68:	07ff0000 	.word	0x07ff0000
   80f6c:	0e4e1c00 	.word	0x0e4e1c00
   80f70:	aaaaaaab 	.word	0xaaaaaaab

00080f74 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   80f74:	b480      	push	{r7}
   80f76:	b083      	sub	sp, #12
   80f78:	af00      	add	r7, sp, #0
   80f7a:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   80f7c:	687a      	ldr	r2, [r7, #4]
   80f7e:	4b1f      	ldr	r3, [pc, #124]	; (80ffc <system_init_flash+0x88>)
   80f80:	429a      	cmp	r2, r3
   80f82:	d806      	bhi.n	80f92 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   80f84:	4b1e      	ldr	r3, [pc, #120]	; (81000 <system_init_flash+0x8c>)
   80f86:	2200      	movs	r2, #0
   80f88:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   80f8a:	4b1e      	ldr	r3, [pc, #120]	; (81004 <system_init_flash+0x90>)
   80f8c:	2200      	movs	r2, #0
   80f8e:	601a      	str	r2, [r3, #0]
   80f90:	e02e      	b.n	80ff0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   80f92:	687a      	ldr	r2, [r7, #4]
   80f94:	4b1c      	ldr	r3, [pc, #112]	; (81008 <system_init_flash+0x94>)
   80f96:	429a      	cmp	r2, r3
   80f98:	d808      	bhi.n	80fac <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   80f9a:	4b19      	ldr	r3, [pc, #100]	; (81000 <system_init_flash+0x8c>)
   80f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
   80fa0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   80fa2:	4b18      	ldr	r3, [pc, #96]	; (81004 <system_init_flash+0x90>)
   80fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
   80fa8:	601a      	str	r2, [r3, #0]
   80faa:	e021      	b.n	80ff0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   80fac:	687a      	ldr	r2, [r7, #4]
   80fae:	4b17      	ldr	r3, [pc, #92]	; (8100c <system_init_flash+0x98>)
   80fb0:	429a      	cmp	r2, r3
   80fb2:	d808      	bhi.n	80fc6 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   80fb4:	4b12      	ldr	r3, [pc, #72]	; (81000 <system_init_flash+0x8c>)
   80fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
   80fba:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   80fbc:	4b11      	ldr	r3, [pc, #68]	; (81004 <system_init_flash+0x90>)
   80fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
   80fc2:	601a      	str	r2, [r3, #0]
   80fc4:	e014      	b.n	80ff0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   80fc6:	687a      	ldr	r2, [r7, #4]
   80fc8:	4b11      	ldr	r3, [pc, #68]	; (81010 <system_init_flash+0x9c>)
   80fca:	429a      	cmp	r2, r3
   80fcc:	d808      	bhi.n	80fe0 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   80fce:	4b0c      	ldr	r3, [pc, #48]	; (81000 <system_init_flash+0x8c>)
   80fd0:	f44f 7240 	mov.w	r2, #768	; 0x300
   80fd4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   80fd6:	4b0b      	ldr	r3, [pc, #44]	; (81004 <system_init_flash+0x90>)
   80fd8:	f44f 7240 	mov.w	r2, #768	; 0x300
   80fdc:	601a      	str	r2, [r3, #0]
   80fde:	e007      	b.n	80ff0 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80fe0:	4b07      	ldr	r3, [pc, #28]	; (81000 <system_init_flash+0x8c>)
   80fe2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80fe6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80fe8:	4b06      	ldr	r3, [pc, #24]	; (81004 <system_init_flash+0x90>)
   80fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80fee:	601a      	str	r2, [r3, #0]
	}
}
   80ff0:	370c      	adds	r7, #12
   80ff2:	46bd      	mov	sp, r7
   80ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ff8:	4770      	bx	lr
   80ffa:	bf00      	nop
   80ffc:	0157529f 	.word	0x0157529f
   81000:	400e0a00 	.word	0x400e0a00
   81004:	400e0c00 	.word	0x400e0c00
   81008:	0206cc7f 	.word	0x0206cc7f
   8100c:	0328b73f 	.word	0x0328b73f
   81010:	04a62f7f 	.word	0x04a62f7f

00081014 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   81014:	b480      	push	{r7}
   81016:	b083      	sub	sp, #12
   81018:	af00      	add	r7, sp, #0
   8101a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8101c:	687b      	ldr	r3, [r7, #4]
   8101e:	f103 0208 	add.w	r2, r3, #8
   81022:	687b      	ldr	r3, [r7, #4]
   81024:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   81026:	687b      	ldr	r3, [r7, #4]
   81028:	f04f 32ff 	mov.w	r2, #4294967295
   8102c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8102e:	687b      	ldr	r3, [r7, #4]
   81030:	f103 0208 	add.w	r2, r3, #8
   81034:	687b      	ldr	r3, [r7, #4]
   81036:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   81038:	687b      	ldr	r3, [r7, #4]
   8103a:	f103 0208 	add.w	r2, r3, #8
   8103e:	687b      	ldr	r3, [r7, #4]
   81040:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   81042:	687b      	ldr	r3, [r7, #4]
   81044:	2200      	movs	r2, #0
   81046:	601a      	str	r2, [r3, #0]
}
   81048:	370c      	adds	r7, #12
   8104a:	46bd      	mov	sp, r7
   8104c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81050:	4770      	bx	lr
   81052:	bf00      	nop

00081054 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   81054:	b480      	push	{r7}
   81056:	b083      	sub	sp, #12
   81058:	af00      	add	r7, sp, #0
   8105a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8105c:	687b      	ldr	r3, [r7, #4]
   8105e:	2200      	movs	r2, #0
   81060:	611a      	str	r2, [r3, #16]
}
   81062:	370c      	adds	r7, #12
   81064:	46bd      	mov	sp, r7
   81066:	f85d 7b04 	ldr.w	r7, [sp], #4
   8106a:	4770      	bx	lr

0008106c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   8106c:	b480      	push	{r7}
   8106e:	b085      	sub	sp, #20
   81070:	af00      	add	r7, sp, #0
   81072:	6078      	str	r0, [r7, #4]
   81074:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   81076:	687b      	ldr	r3, [r7, #4]
   81078:	685b      	ldr	r3, [r3, #4]
   8107a:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   8107c:	683b      	ldr	r3, [r7, #0]
   8107e:	68fa      	ldr	r2, [r7, #12]
   81080:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   81082:	68fb      	ldr	r3, [r7, #12]
   81084:	689a      	ldr	r2, [r3, #8]
   81086:	683b      	ldr	r3, [r7, #0]
   81088:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   8108a:	68fb      	ldr	r3, [r7, #12]
   8108c:	689b      	ldr	r3, [r3, #8]
   8108e:	683a      	ldr	r2, [r7, #0]
   81090:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   81092:	68fb      	ldr	r3, [r7, #12]
   81094:	683a      	ldr	r2, [r7, #0]
   81096:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81098:	683b      	ldr	r3, [r7, #0]
   8109a:	687a      	ldr	r2, [r7, #4]
   8109c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   8109e:	687b      	ldr	r3, [r7, #4]
   810a0:	681b      	ldr	r3, [r3, #0]
   810a2:	1c5a      	adds	r2, r3, #1
   810a4:	687b      	ldr	r3, [r7, #4]
   810a6:	601a      	str	r2, [r3, #0]
}
   810a8:	3714      	adds	r7, #20
   810aa:	46bd      	mov	sp, r7
   810ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   810b0:	4770      	bx	lr
   810b2:	bf00      	nop

000810b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   810b4:	b480      	push	{r7}
   810b6:	b085      	sub	sp, #20
   810b8:	af00      	add	r7, sp, #0
   810ba:	6078      	str	r0, [r7, #4]
   810bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   810be:	683b      	ldr	r3, [r7, #0]
   810c0:	681b      	ldr	r3, [r3, #0]
   810c2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   810c4:	68bb      	ldr	r3, [r7, #8]
   810c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   810ca:	d103      	bne.n	810d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   810cc:	687b      	ldr	r3, [r7, #4]
   810ce:	691b      	ldr	r3, [r3, #16]
   810d0:	60fb      	str	r3, [r7, #12]
   810d2:	e00c      	b.n	810ee <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   810d4:	687b      	ldr	r3, [r7, #4]
   810d6:	3308      	adds	r3, #8
   810d8:	60fb      	str	r3, [r7, #12]
   810da:	e002      	b.n	810e2 <vListInsert+0x2e>
   810dc:	68fb      	ldr	r3, [r7, #12]
   810de:	685b      	ldr	r3, [r3, #4]
   810e0:	60fb      	str	r3, [r7, #12]
   810e2:	68fb      	ldr	r3, [r7, #12]
   810e4:	685b      	ldr	r3, [r3, #4]
   810e6:	681a      	ldr	r2, [r3, #0]
   810e8:	68bb      	ldr	r3, [r7, #8]
   810ea:	429a      	cmp	r2, r3
   810ec:	d9f6      	bls.n	810dc <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   810ee:	68fb      	ldr	r3, [r7, #12]
   810f0:	685a      	ldr	r2, [r3, #4]
   810f2:	683b      	ldr	r3, [r7, #0]
   810f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   810f6:	683b      	ldr	r3, [r7, #0]
   810f8:	685b      	ldr	r3, [r3, #4]
   810fa:	683a      	ldr	r2, [r7, #0]
   810fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   810fe:	683b      	ldr	r3, [r7, #0]
   81100:	68fa      	ldr	r2, [r7, #12]
   81102:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   81104:	68fb      	ldr	r3, [r7, #12]
   81106:	683a      	ldr	r2, [r7, #0]
   81108:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8110a:	683b      	ldr	r3, [r7, #0]
   8110c:	687a      	ldr	r2, [r7, #4]
   8110e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   81110:	687b      	ldr	r3, [r7, #4]
   81112:	681b      	ldr	r3, [r3, #0]
   81114:	1c5a      	adds	r2, r3, #1
   81116:	687b      	ldr	r3, [r7, #4]
   81118:	601a      	str	r2, [r3, #0]
}
   8111a:	3714      	adds	r7, #20
   8111c:	46bd      	mov	sp, r7
   8111e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81122:	4770      	bx	lr

00081124 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   81124:	b480      	push	{r7}
   81126:	b085      	sub	sp, #20
   81128:	af00      	add	r7, sp, #0
   8112a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   8112c:	687b      	ldr	r3, [r7, #4]
   8112e:	691b      	ldr	r3, [r3, #16]
   81130:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81132:	687b      	ldr	r3, [r7, #4]
   81134:	685b      	ldr	r3, [r3, #4]
   81136:	687a      	ldr	r2, [r7, #4]
   81138:	6892      	ldr	r2, [r2, #8]
   8113a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8113c:	687b      	ldr	r3, [r7, #4]
   8113e:	689b      	ldr	r3, [r3, #8]
   81140:	687a      	ldr	r2, [r7, #4]
   81142:	6852      	ldr	r2, [r2, #4]
   81144:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81146:	68fb      	ldr	r3, [r7, #12]
   81148:	685a      	ldr	r2, [r3, #4]
   8114a:	687b      	ldr	r3, [r7, #4]
   8114c:	429a      	cmp	r2, r3
   8114e:	d103      	bne.n	81158 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81150:	687b      	ldr	r3, [r7, #4]
   81152:	689a      	ldr	r2, [r3, #8]
   81154:	68fb      	ldr	r3, [r7, #12]
   81156:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   81158:	687b      	ldr	r3, [r7, #4]
   8115a:	2200      	movs	r2, #0
   8115c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   8115e:	68fb      	ldr	r3, [r7, #12]
   81160:	681b      	ldr	r3, [r3, #0]
   81162:	1e5a      	subs	r2, r3, #1
   81164:	68fb      	ldr	r3, [r7, #12]
   81166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   81168:	68fb      	ldr	r3, [r7, #12]
   8116a:	681b      	ldr	r3, [r3, #0]
}
   8116c:	4618      	mov	r0, r3
   8116e:	3714      	adds	r7, #20
   81170:	46bd      	mov	sp, r7
   81172:	f85d 7b04 	ldr.w	r7, [sp], #4
   81176:	4770      	bx	lr

00081178 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   81178:	b480      	push	{r7}
   8117a:	b085      	sub	sp, #20
   8117c:	af00      	add	r7, sp, #0
   8117e:	60f8      	str	r0, [r7, #12]
   81180:	60b9      	str	r1, [r7, #8]
   81182:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   81184:	68fb      	ldr	r3, [r7, #12]
   81186:	3b04      	subs	r3, #4
   81188:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8118a:	68fb      	ldr	r3, [r7, #12]
   8118c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   81190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   81192:	68fb      	ldr	r3, [r7, #12]
   81194:	3b04      	subs	r3, #4
   81196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   81198:	68ba      	ldr	r2, [r7, #8]
   8119a:	68fb      	ldr	r3, [r7, #12]
   8119c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   8119e:	68fb      	ldr	r3, [r7, #12]
   811a0:	3b04      	subs	r3, #4
   811a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   811a4:	4a09      	ldr	r2, [pc, #36]	; (811cc <pxPortInitialiseStack+0x54>)
   811a6:	68fb      	ldr	r3, [r7, #12]
   811a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   811aa:	68fb      	ldr	r3, [r7, #12]
   811ac:	3b14      	subs	r3, #20
   811ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   811b0:	687a      	ldr	r2, [r7, #4]
   811b2:	68fb      	ldr	r3, [r7, #12]
   811b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   811b6:	68fb      	ldr	r3, [r7, #12]
   811b8:	3b20      	subs	r3, #32
   811ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   811bc:	68fb      	ldr	r3, [r7, #12]
}
   811be:	4618      	mov	r0, r3
   811c0:	3714      	adds	r7, #20
   811c2:	46bd      	mov	sp, r7
   811c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   811c8:	4770      	bx	lr
   811ca:	bf00      	nop
   811cc:	000811d1 	.word	0x000811d1

000811d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   811d0:	b580      	push	{r7, lr}
   811d2:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   811d4:	4b05      	ldr	r3, [pc, #20]	; (811ec <prvTaskExitError+0x1c>)
   811d6:	681b      	ldr	r3, [r3, #0]
   811d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   811dc:	d002      	beq.n	811e4 <prvTaskExitError+0x14>
   811de:	4b04      	ldr	r3, [pc, #16]	; (811f0 <prvTaskExitError+0x20>)
   811e0:	4798      	blx	r3
   811e2:	e7fe      	b.n	811e2 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   811e4:	4b02      	ldr	r3, [pc, #8]	; (811f0 <prvTaskExitError+0x20>)
   811e6:	4798      	blx	r3
	for( ;; );
   811e8:	e7fe      	b.n	811e8 <prvTaskExitError+0x18>
   811ea:	bf00      	nop
   811ec:	20070004 	.word	0x20070004
   811f0:	0008139d 	.word	0x0008139d

000811f4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   811f4:	4b07      	ldr	r3, [pc, #28]	; (81214 <pxCurrentTCBConst2>)
   811f6:	6819      	ldr	r1, [r3, #0]
   811f8:	6808      	ldr	r0, [r1, #0]
   811fa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   811fe:	f380 8809 	msr	PSP, r0
   81202:	f3bf 8f6f 	isb	sy
   81206:	f04f 0000 	mov.w	r0, #0
   8120a:	f380 8811 	msr	BASEPRI, r0
   8120e:	f04e 0e0d 	orr.w	lr, lr, #13
   81212:	4770      	bx	lr

00081214 <pxCurrentTCBConst2>:
   81214:	2007a4e4 	.word	0x2007a4e4

00081218 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81218:	4806      	ldr	r0, [pc, #24]	; (81234 <prvPortStartFirstTask+0x1c>)
   8121a:	6800      	ldr	r0, [r0, #0]
   8121c:	6800      	ldr	r0, [r0, #0]
   8121e:	f380 8808 	msr	MSP, r0
   81222:	b662      	cpsie	i
   81224:	b661      	cpsie	f
   81226:	f3bf 8f4f 	dsb	sy
   8122a:	f3bf 8f6f 	isb	sy
   8122e:	df00      	svc	0
   81230:	bf00      	nop
   81232:	0000      	.short	0x0000
   81234:	e000ed08 	.word	0xe000ed08

00081238 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   81238:	b580      	push	{r7, lr}
   8123a:	b084      	sub	sp, #16
   8123c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   8123e:	4b28      	ldr	r3, [pc, #160]	; (812e0 <xPortStartScheduler+0xa8>)
   81240:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   81242:	68fb      	ldr	r3, [r7, #12]
   81244:	781b      	ldrb	r3, [r3, #0]
   81246:	b2db      	uxtb	r3, r3
   81248:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   8124a:	68fb      	ldr	r3, [r7, #12]
   8124c:	22ff      	movs	r2, #255	; 0xff
   8124e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   81250:	68fb      	ldr	r3, [r7, #12]
   81252:	781b      	ldrb	r3, [r3, #0]
   81254:	b2db      	uxtb	r3, r3
   81256:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   81258:	79fb      	ldrb	r3, [r7, #7]
   8125a:	b2db      	uxtb	r3, r3
   8125c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   81260:	b2da      	uxtb	r2, r3
   81262:	4b20      	ldr	r3, [pc, #128]	; (812e4 <xPortStartScheduler+0xac>)
   81264:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   81266:	4b20      	ldr	r3, [pc, #128]	; (812e8 <xPortStartScheduler+0xb0>)
   81268:	2207      	movs	r2, #7
   8126a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   8126c:	e009      	b.n	81282 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   8126e:	4b1e      	ldr	r3, [pc, #120]	; (812e8 <xPortStartScheduler+0xb0>)
   81270:	681b      	ldr	r3, [r3, #0]
   81272:	1e5a      	subs	r2, r3, #1
   81274:	4b1c      	ldr	r3, [pc, #112]	; (812e8 <xPortStartScheduler+0xb0>)
   81276:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   81278:	79fb      	ldrb	r3, [r7, #7]
   8127a:	b2db      	uxtb	r3, r3
   8127c:	005b      	lsls	r3, r3, #1
   8127e:	b2db      	uxtb	r3, r3
   81280:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   81282:	79fb      	ldrb	r3, [r7, #7]
   81284:	b2db      	uxtb	r3, r3
   81286:	b2db      	uxtb	r3, r3
   81288:	b25b      	sxtb	r3, r3
   8128a:	2b00      	cmp	r3, #0
   8128c:	dbef      	blt.n	8126e <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   8128e:	4b16      	ldr	r3, [pc, #88]	; (812e8 <xPortStartScheduler+0xb0>)
   81290:	681b      	ldr	r3, [r3, #0]
   81292:	021a      	lsls	r2, r3, #8
   81294:	4b14      	ldr	r3, [pc, #80]	; (812e8 <xPortStartScheduler+0xb0>)
   81296:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   81298:	4b13      	ldr	r3, [pc, #76]	; (812e8 <xPortStartScheduler+0xb0>)
   8129a:	681b      	ldr	r3, [r3, #0]
   8129c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   812a0:	4b11      	ldr	r3, [pc, #68]	; (812e8 <xPortStartScheduler+0xb0>)
   812a2:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   812a4:	68bb      	ldr	r3, [r7, #8]
   812a6:	b2da      	uxtb	r2, r3
   812a8:	68fb      	ldr	r3, [r7, #12]
   812aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   812ac:	4b0f      	ldr	r3, [pc, #60]	; (812ec <xPortStartScheduler+0xb4>)
   812ae:	4a0f      	ldr	r2, [pc, #60]	; (812ec <xPortStartScheduler+0xb4>)
   812b0:	6812      	ldr	r2, [r2, #0]
   812b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   812b6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   812b8:	4b0c      	ldr	r3, [pc, #48]	; (812ec <xPortStartScheduler+0xb4>)
   812ba:	4a0c      	ldr	r2, [pc, #48]	; (812ec <xPortStartScheduler+0xb4>)
   812bc:	6812      	ldr	r2, [r2, #0]
   812be:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   812c2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   812c4:	4b0a      	ldr	r3, [pc, #40]	; (812f0 <xPortStartScheduler+0xb8>)
   812c6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   812c8:	4b0a      	ldr	r3, [pc, #40]	; (812f4 <xPortStartScheduler+0xbc>)
   812ca:	2200      	movs	r2, #0
   812cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   812ce:	4b0a      	ldr	r3, [pc, #40]	; (812f8 <xPortStartScheduler+0xc0>)
   812d0:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   812d2:	4b0a      	ldr	r3, [pc, #40]	; (812fc <xPortStartScheduler+0xc4>)
   812d4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   812d6:	2300      	movs	r3, #0
}
   812d8:	4618      	mov	r0, r3
   812da:	3710      	adds	r7, #16
   812dc:	46bd      	mov	sp, r7
   812de:	bd80      	pop	{r7, pc}
   812e0:	e000e400 	.word	0xe000e400
   812e4:	200704c4 	.word	0x200704c4
   812e8:	200704c8 	.word	0x200704c8
   812ec:	e000ed20 	.word	0xe000ed20
   812f0:	00081431 	.word	0x00081431
   812f4:	20070004 	.word	0x20070004
   812f8:	00081219 	.word	0x00081219
   812fc:	000811d1 	.word	0x000811d1

00081300 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   81300:	b480      	push	{r7}
   81302:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81304:	4b05      	ldr	r3, [pc, #20]	; (8131c <vPortYield+0x1c>)
   81306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8130a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   8130c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   81310:	f3bf 8f6f 	isb	sy
}
   81314:	46bd      	mov	sp, r7
   81316:	f85d 7b04 	ldr.w	r7, [sp], #4
   8131a:	4770      	bx	lr
   8131c:	e000ed04 	.word	0xe000ed04

00081320 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81320:	b580      	push	{r7, lr}
   81322:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   81324:	4b0c      	ldr	r3, [pc, #48]	; (81358 <vPortEnterCritical+0x38>)
   81326:	4798      	blx	r3
	uxCriticalNesting++;
   81328:	4b0c      	ldr	r3, [pc, #48]	; (8135c <vPortEnterCritical+0x3c>)
   8132a:	681b      	ldr	r3, [r3, #0]
   8132c:	1c5a      	adds	r2, r3, #1
   8132e:	4b0b      	ldr	r3, [pc, #44]	; (8135c <vPortEnterCritical+0x3c>)
   81330:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   81332:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   81336:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   8133a:	4b08      	ldr	r3, [pc, #32]	; (8135c <vPortEnterCritical+0x3c>)
   8133c:	681b      	ldr	r3, [r3, #0]
   8133e:	2b01      	cmp	r3, #1
   81340:	d108      	bne.n	81354 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   81342:	4b07      	ldr	r3, [pc, #28]	; (81360 <vPortEnterCritical+0x40>)
   81344:	681b      	ldr	r3, [r3, #0]
   81346:	f003 031f 	and.w	r3, r3, #31
   8134a:	2b00      	cmp	r3, #0
   8134c:	d002      	beq.n	81354 <vPortEnterCritical+0x34>
   8134e:	4b02      	ldr	r3, [pc, #8]	; (81358 <vPortEnterCritical+0x38>)
   81350:	4798      	blx	r3
   81352:	e7fe      	b.n	81352 <vPortEnterCritical+0x32>
	}
}
   81354:	bd80      	pop	{r7, pc}
   81356:	bf00      	nop
   81358:	0008139d 	.word	0x0008139d
   8135c:	20070004 	.word	0x20070004
   81360:	e000ed04 	.word	0xe000ed04

00081364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81364:	b580      	push	{r7, lr}
   81366:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   81368:	4b09      	ldr	r3, [pc, #36]	; (81390 <vPortExitCritical+0x2c>)
   8136a:	681b      	ldr	r3, [r3, #0]
   8136c:	2b00      	cmp	r3, #0
   8136e:	d102      	bne.n	81376 <vPortExitCritical+0x12>
   81370:	4b08      	ldr	r3, [pc, #32]	; (81394 <vPortExitCritical+0x30>)
   81372:	4798      	blx	r3
   81374:	e7fe      	b.n	81374 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   81376:	4b06      	ldr	r3, [pc, #24]	; (81390 <vPortExitCritical+0x2c>)
   81378:	681b      	ldr	r3, [r3, #0]
   8137a:	1e5a      	subs	r2, r3, #1
   8137c:	4b04      	ldr	r3, [pc, #16]	; (81390 <vPortExitCritical+0x2c>)
   8137e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   81380:	4b03      	ldr	r3, [pc, #12]	; (81390 <vPortExitCritical+0x2c>)
   81382:	681b      	ldr	r3, [r3, #0]
   81384:	2b00      	cmp	r3, #0
   81386:	d102      	bne.n	8138e <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   81388:	2000      	movs	r0, #0
   8138a:	4b03      	ldr	r3, [pc, #12]	; (81398 <vPortExitCritical+0x34>)
   8138c:	4798      	blx	r3
	}
}
   8138e:	bd80      	pop	{r7, pc}
   81390:	20070004 	.word	0x20070004
   81394:	0008139d 	.word	0x0008139d
   81398:	000813b1 	.word	0x000813b1

0008139c <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   8139c:	f3ef 8011 	mrs	r0, BASEPRI
   813a0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   813a4:	f381 8811 	msr	BASEPRI, r1
   813a8:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   813aa:	2300      	movs	r3, #0
}
   813ac:	4618      	mov	r0, r3
   813ae:	bf00      	nop

000813b0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   813b0:	f380 8811 	msr	BASEPRI, r0
   813b4:	4770      	bx	lr
   813b6:	bf00      	nop

000813b8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   813b8:	f3ef 8009 	mrs	r0, PSP
   813bc:	f3bf 8f6f 	isb	sy
   813c0:	4b0d      	ldr	r3, [pc, #52]	; (813f8 <pxCurrentTCBConst>)
   813c2:	681a      	ldr	r2, [r3, #0]
   813c4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   813c8:	6010      	str	r0, [r2, #0]
   813ca:	e92d 4008 	stmdb	sp!, {r3, lr}
   813ce:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   813d2:	f380 8811 	msr	BASEPRI, r0
   813d6:	f001 fd2b 	bl	82e30 <vTaskSwitchContext>
   813da:	f04f 0000 	mov.w	r0, #0
   813de:	f380 8811 	msr	BASEPRI, r0
   813e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   813e6:	6819      	ldr	r1, [r3, #0]
   813e8:	6808      	ldr	r0, [r1, #0]
   813ea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   813ee:	f380 8809 	msr	PSP, r0
   813f2:	f3bf 8f6f 	isb	sy
   813f6:	4770      	bx	lr

000813f8 <pxCurrentTCBConst>:
   813f8:	2007a4e4 	.word	0x2007a4e4

000813fc <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   813fc:	b580      	push	{r7, lr}
   813fe:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81400:	4b07      	ldr	r3, [pc, #28]	; (81420 <SysTick_Handler+0x24>)
   81402:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   81404:	4b07      	ldr	r3, [pc, #28]	; (81424 <SysTick_Handler+0x28>)
   81406:	4798      	blx	r3
   81408:	4603      	mov	r3, r0
   8140a:	2b00      	cmp	r3, #0
   8140c:	d003      	beq.n	81416 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8140e:	4b06      	ldr	r3, [pc, #24]	; (81428 <SysTick_Handler+0x2c>)
   81410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81414:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81416:	2000      	movs	r0, #0
   81418:	4b04      	ldr	r3, [pc, #16]	; (8142c <SysTick_Handler+0x30>)
   8141a:	4798      	blx	r3
}
   8141c:	bd80      	pop	{r7, pc}
   8141e:	bf00      	nop
   81420:	0008139d 	.word	0x0008139d
   81424:	00082cb5 	.word	0x00082cb5
   81428:	e000ed04 	.word	0xe000ed04
   8142c:	000813b1 	.word	0x000813b1

00081430 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   81430:	b480      	push	{r7}
   81432:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   81434:	4b07      	ldr	r3, [pc, #28]	; (81454 <vPortSetupTimerInterrupt+0x24>)
   81436:	4a08      	ldr	r2, [pc, #32]	; (81458 <vPortSetupTimerInterrupt+0x28>)
   81438:	6811      	ldr	r1, [r2, #0]
   8143a:	4a08      	ldr	r2, [pc, #32]	; (8145c <vPortSetupTimerInterrupt+0x2c>)
   8143c:	fba2 0201 	umull	r0, r2, r2, r1
   81440:	0992      	lsrs	r2, r2, #6
   81442:	3a01      	subs	r2, #1
   81444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   81446:	4b06      	ldr	r3, [pc, #24]	; (81460 <vPortSetupTimerInterrupt+0x30>)
   81448:	2207      	movs	r2, #7
   8144a:	601a      	str	r2, [r3, #0]
}
   8144c:	46bd      	mov	sp, r7
   8144e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81452:	4770      	bx	lr
   81454:	e000e014 	.word	0xe000e014
   81458:	20070000 	.word	0x20070000
   8145c:	10624dd3 	.word	0x10624dd3
   81460:	e000e010 	.word	0xe000e010

00081464 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   81464:	b580      	push	{r7, lr}
   81466:	b082      	sub	sp, #8
   81468:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   8146a:	f3ef 8305 	mrs	r3, IPSR
   8146e:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   81470:	687b      	ldr	r3, [r7, #4]
   81472:	2b0f      	cmp	r3, #15
   81474:	d90c      	bls.n	81490 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   81476:	4a0d      	ldr	r2, [pc, #52]	; (814ac <vPortValidateInterruptPriority+0x48>)
   81478:	687b      	ldr	r3, [r7, #4]
   8147a:	4413      	add	r3, r2
   8147c:	781b      	ldrb	r3, [r3, #0]
   8147e:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   81480:	4b0b      	ldr	r3, [pc, #44]	; (814b0 <vPortValidateInterruptPriority+0x4c>)
   81482:	781b      	ldrb	r3, [r3, #0]
   81484:	78fa      	ldrb	r2, [r7, #3]
   81486:	429a      	cmp	r2, r3
   81488:	d202      	bcs.n	81490 <vPortValidateInterruptPriority+0x2c>
   8148a:	4b0a      	ldr	r3, [pc, #40]	; (814b4 <vPortValidateInterruptPriority+0x50>)
   8148c:	4798      	blx	r3
   8148e:	e7fe      	b.n	8148e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   81490:	4b09      	ldr	r3, [pc, #36]	; (814b8 <vPortValidateInterruptPriority+0x54>)
   81492:	681b      	ldr	r3, [r3, #0]
   81494:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   81498:	4b08      	ldr	r3, [pc, #32]	; (814bc <vPortValidateInterruptPriority+0x58>)
   8149a:	681b      	ldr	r3, [r3, #0]
   8149c:	429a      	cmp	r2, r3
   8149e:	d902      	bls.n	814a6 <vPortValidateInterruptPriority+0x42>
   814a0:	4b04      	ldr	r3, [pc, #16]	; (814b4 <vPortValidateInterruptPriority+0x50>)
   814a2:	4798      	blx	r3
   814a4:	e7fe      	b.n	814a4 <vPortValidateInterruptPriority+0x40>
	}
   814a6:	3708      	adds	r7, #8
   814a8:	46bd      	mov	sp, r7
   814aa:	bd80      	pop	{r7, pc}
   814ac:	e000e3f0 	.word	0xe000e3f0
   814b0:	200704c4 	.word	0x200704c4
   814b4:	0008139d 	.word	0x0008139d
   814b8:	e000ed0c 	.word	0xe000ed0c
   814bc:	200704c8 	.word	0x200704c8

000814c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   814c0:	b580      	push	{r7, lr}
   814c2:	b086      	sub	sp, #24
   814c4:	af00      	add	r7, sp, #0
   814c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   814c8:	2300      	movs	r3, #0
   814ca:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   814cc:	4b4f      	ldr	r3, [pc, #316]	; (8160c <pvPortMalloc+0x14c>)
   814ce:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   814d0:	4b4f      	ldr	r3, [pc, #316]	; (81610 <pvPortMalloc+0x150>)
   814d2:	681b      	ldr	r3, [r3, #0]
   814d4:	2b00      	cmp	r3, #0
   814d6:	d101      	bne.n	814dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   814d8:	4b4e      	ldr	r3, [pc, #312]	; (81614 <pvPortMalloc+0x154>)
   814da:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   814dc:	4b4e      	ldr	r3, [pc, #312]	; (81618 <pvPortMalloc+0x158>)
   814de:	681a      	ldr	r2, [r3, #0]
   814e0:	687b      	ldr	r3, [r7, #4]
   814e2:	4013      	ands	r3, r2
   814e4:	2b00      	cmp	r3, #0
   814e6:	d17d      	bne.n	815e4 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   814e8:	687b      	ldr	r3, [r7, #4]
   814ea:	2b00      	cmp	r3, #0
   814ec:	d015      	beq.n	8151a <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   814ee:	2308      	movs	r3, #8
   814f0:	687a      	ldr	r2, [r7, #4]
   814f2:	4413      	add	r3, r2
   814f4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   814f6:	687b      	ldr	r3, [r7, #4]
   814f8:	f003 0307 	and.w	r3, r3, #7
   814fc:	2b00      	cmp	r3, #0
   814fe:	d00c      	beq.n	8151a <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81500:	687b      	ldr	r3, [r7, #4]
   81502:	f023 0307 	bic.w	r3, r3, #7
   81506:	3308      	adds	r3, #8
   81508:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   8150a:	687b      	ldr	r3, [r7, #4]
   8150c:	f003 0307 	and.w	r3, r3, #7
   81510:	2b00      	cmp	r3, #0
   81512:	d002      	beq.n	8151a <pvPortMalloc+0x5a>
   81514:	4b41      	ldr	r3, [pc, #260]	; (8161c <pvPortMalloc+0x15c>)
   81516:	4798      	blx	r3
   81518:	e7fe      	b.n	81518 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   8151a:	687b      	ldr	r3, [r7, #4]
   8151c:	2b00      	cmp	r3, #0
   8151e:	d061      	beq.n	815e4 <pvPortMalloc+0x124>
   81520:	4b3f      	ldr	r3, [pc, #252]	; (81620 <pvPortMalloc+0x160>)
   81522:	681b      	ldr	r3, [r3, #0]
   81524:	687a      	ldr	r2, [r7, #4]
   81526:	429a      	cmp	r2, r3
   81528:	d85c      	bhi.n	815e4 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   8152a:	4b3e      	ldr	r3, [pc, #248]	; (81624 <pvPortMalloc+0x164>)
   8152c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   8152e:	4b3d      	ldr	r3, [pc, #244]	; (81624 <pvPortMalloc+0x164>)
   81530:	681b      	ldr	r3, [r3, #0]
   81532:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81534:	e004      	b.n	81540 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   81536:	697b      	ldr	r3, [r7, #20]
   81538:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   8153a:	697b      	ldr	r3, [r7, #20]
   8153c:	681b      	ldr	r3, [r3, #0]
   8153e:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81540:	697b      	ldr	r3, [r7, #20]
   81542:	685a      	ldr	r2, [r3, #4]
   81544:	687b      	ldr	r3, [r7, #4]
   81546:	429a      	cmp	r2, r3
   81548:	d203      	bcs.n	81552 <pvPortMalloc+0x92>
   8154a:	697b      	ldr	r3, [r7, #20]
   8154c:	681b      	ldr	r3, [r3, #0]
   8154e:	2b00      	cmp	r3, #0
   81550:	d1f1      	bne.n	81536 <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   81552:	4b2f      	ldr	r3, [pc, #188]	; (81610 <pvPortMalloc+0x150>)
   81554:	681b      	ldr	r3, [r3, #0]
   81556:	697a      	ldr	r2, [r7, #20]
   81558:	429a      	cmp	r2, r3
   8155a:	d043      	beq.n	815e4 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   8155c:	693b      	ldr	r3, [r7, #16]
   8155e:	681a      	ldr	r2, [r3, #0]
   81560:	2308      	movs	r3, #8
   81562:	4413      	add	r3, r2
   81564:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81566:	697b      	ldr	r3, [r7, #20]
   81568:	681a      	ldr	r2, [r3, #0]
   8156a:	693b      	ldr	r3, [r7, #16]
   8156c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8156e:	697b      	ldr	r3, [r7, #20]
   81570:	685a      	ldr	r2, [r3, #4]
   81572:	687b      	ldr	r3, [r7, #4]
   81574:	1ad2      	subs	r2, r2, r3
   81576:	2308      	movs	r3, #8
   81578:	005b      	lsls	r3, r3, #1
   8157a:	429a      	cmp	r2, r3
   8157c:	d917      	bls.n	815ae <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   8157e:	697a      	ldr	r2, [r7, #20]
   81580:	687b      	ldr	r3, [r7, #4]
   81582:	4413      	add	r3, r2
   81584:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   81586:	68bb      	ldr	r3, [r7, #8]
   81588:	f003 0307 	and.w	r3, r3, #7
   8158c:	2b00      	cmp	r3, #0
   8158e:	d002      	beq.n	81596 <pvPortMalloc+0xd6>
   81590:	4b22      	ldr	r3, [pc, #136]	; (8161c <pvPortMalloc+0x15c>)
   81592:	4798      	blx	r3
   81594:	e7fe      	b.n	81594 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81596:	697b      	ldr	r3, [r7, #20]
   81598:	685a      	ldr	r2, [r3, #4]
   8159a:	687b      	ldr	r3, [r7, #4]
   8159c:	1ad2      	subs	r2, r2, r3
   8159e:	68bb      	ldr	r3, [r7, #8]
   815a0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   815a2:	697b      	ldr	r3, [r7, #20]
   815a4:	687a      	ldr	r2, [r7, #4]
   815a6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   815a8:	68b8      	ldr	r0, [r7, #8]
   815aa:	4b1f      	ldr	r3, [pc, #124]	; (81628 <pvPortMalloc+0x168>)
   815ac:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   815ae:	4b1c      	ldr	r3, [pc, #112]	; (81620 <pvPortMalloc+0x160>)
   815b0:	681a      	ldr	r2, [r3, #0]
   815b2:	697b      	ldr	r3, [r7, #20]
   815b4:	685b      	ldr	r3, [r3, #4]
   815b6:	1ad2      	subs	r2, r2, r3
   815b8:	4b19      	ldr	r3, [pc, #100]	; (81620 <pvPortMalloc+0x160>)
   815ba:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   815bc:	4b18      	ldr	r3, [pc, #96]	; (81620 <pvPortMalloc+0x160>)
   815be:	681a      	ldr	r2, [r3, #0]
   815c0:	4b1a      	ldr	r3, [pc, #104]	; (8162c <pvPortMalloc+0x16c>)
   815c2:	681b      	ldr	r3, [r3, #0]
   815c4:	429a      	cmp	r2, r3
   815c6:	d203      	bcs.n	815d0 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   815c8:	4b15      	ldr	r3, [pc, #84]	; (81620 <pvPortMalloc+0x160>)
   815ca:	681a      	ldr	r2, [r3, #0]
   815cc:	4b17      	ldr	r3, [pc, #92]	; (8162c <pvPortMalloc+0x16c>)
   815ce:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   815d0:	697b      	ldr	r3, [r7, #20]
   815d2:	685a      	ldr	r2, [r3, #4]
   815d4:	4b10      	ldr	r3, [pc, #64]	; (81618 <pvPortMalloc+0x158>)
   815d6:	681b      	ldr	r3, [r3, #0]
   815d8:	431a      	orrs	r2, r3
   815da:	697b      	ldr	r3, [r7, #20]
   815dc:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   815de:	697b      	ldr	r3, [r7, #20]
   815e0:	2200      	movs	r2, #0
   815e2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   815e4:	4b12      	ldr	r3, [pc, #72]	; (81630 <pvPortMalloc+0x170>)
   815e6:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   815e8:	68fb      	ldr	r3, [r7, #12]
   815ea:	2b00      	cmp	r3, #0
   815ec:	d101      	bne.n	815f2 <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   815ee:	4b11      	ldr	r3, [pc, #68]	; (81634 <pvPortMalloc+0x174>)
   815f0:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   815f2:	68fb      	ldr	r3, [r7, #12]
   815f4:	f003 0307 	and.w	r3, r3, #7
   815f8:	2b00      	cmp	r3, #0
   815fa:	d002      	beq.n	81602 <pvPortMalloc+0x142>
   815fc:	4b07      	ldr	r3, [pc, #28]	; (8161c <pvPortMalloc+0x15c>)
   815fe:	4798      	blx	r3
   81600:	e7fe      	b.n	81600 <pvPortMalloc+0x140>
	return pvReturn;
   81602:	68fb      	ldr	r3, [r7, #12]
}
   81604:	4618      	mov	r0, r3
   81606:	3718      	adds	r7, #24
   81608:	46bd      	mov	sp, r7
   8160a:	bd80      	pop	{r7, pc}
   8160c:	00082b31 	.word	0x00082b31
   81610:	2007a4d4 	.word	0x2007a4d4
   81614:	000816dd 	.word	0x000816dd
   81618:	2007a4e0 	.word	0x2007a4e0
   8161c:	0008139d 	.word	0x0008139d
   81620:	2007a4d8 	.word	0x2007a4d8
   81624:	2007a4cc 	.word	0x2007a4cc
   81628:	000817a1 	.word	0x000817a1
   8162c:	2007a4dc 	.word	0x2007a4dc
   81630:	00082b4d 	.word	0x00082b4d
   81634:	00085fd9 	.word	0x00085fd9

00081638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81638:	b580      	push	{r7, lr}
   8163a:	b084      	sub	sp, #16
   8163c:	af00      	add	r7, sp, #0
   8163e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   81640:	687b      	ldr	r3, [r7, #4]
   81642:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   81644:	687b      	ldr	r3, [r7, #4]
   81646:	2b00      	cmp	r3, #0
   81648:	d038      	beq.n	816bc <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   8164a:	2308      	movs	r3, #8
   8164c:	425b      	negs	r3, r3
   8164e:	68fa      	ldr	r2, [r7, #12]
   81650:	4413      	add	r3, r2
   81652:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   81654:	68fb      	ldr	r3, [r7, #12]
   81656:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   81658:	68bb      	ldr	r3, [r7, #8]
   8165a:	685a      	ldr	r2, [r3, #4]
   8165c:	4b19      	ldr	r3, [pc, #100]	; (816c4 <vPortFree+0x8c>)
   8165e:	681b      	ldr	r3, [r3, #0]
   81660:	4013      	ands	r3, r2
   81662:	2b00      	cmp	r3, #0
   81664:	d102      	bne.n	8166c <vPortFree+0x34>
   81666:	4b18      	ldr	r3, [pc, #96]	; (816c8 <vPortFree+0x90>)
   81668:	4798      	blx	r3
   8166a:	e7fe      	b.n	8166a <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   8166c:	68bb      	ldr	r3, [r7, #8]
   8166e:	681b      	ldr	r3, [r3, #0]
   81670:	2b00      	cmp	r3, #0
   81672:	d002      	beq.n	8167a <vPortFree+0x42>
   81674:	4b14      	ldr	r3, [pc, #80]	; (816c8 <vPortFree+0x90>)
   81676:	4798      	blx	r3
   81678:	e7fe      	b.n	81678 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   8167a:	68bb      	ldr	r3, [r7, #8]
   8167c:	685a      	ldr	r2, [r3, #4]
   8167e:	4b11      	ldr	r3, [pc, #68]	; (816c4 <vPortFree+0x8c>)
   81680:	681b      	ldr	r3, [r3, #0]
   81682:	4013      	ands	r3, r2
   81684:	2b00      	cmp	r3, #0
   81686:	d019      	beq.n	816bc <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   81688:	68bb      	ldr	r3, [r7, #8]
   8168a:	681b      	ldr	r3, [r3, #0]
   8168c:	2b00      	cmp	r3, #0
   8168e:	d115      	bne.n	816bc <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   81690:	68bb      	ldr	r3, [r7, #8]
   81692:	685a      	ldr	r2, [r3, #4]
   81694:	4b0b      	ldr	r3, [pc, #44]	; (816c4 <vPortFree+0x8c>)
   81696:	681b      	ldr	r3, [r3, #0]
   81698:	43db      	mvns	r3, r3
   8169a:	401a      	ands	r2, r3
   8169c:	68bb      	ldr	r3, [r7, #8]
   8169e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   816a0:	4b0a      	ldr	r3, [pc, #40]	; (816cc <vPortFree+0x94>)
   816a2:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   816a4:	68bb      	ldr	r3, [r7, #8]
   816a6:	685a      	ldr	r2, [r3, #4]
   816a8:	4b09      	ldr	r3, [pc, #36]	; (816d0 <vPortFree+0x98>)
   816aa:	681b      	ldr	r3, [r3, #0]
   816ac:	441a      	add	r2, r3
   816ae:	4b08      	ldr	r3, [pc, #32]	; (816d0 <vPortFree+0x98>)
   816b0:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   816b2:	68b8      	ldr	r0, [r7, #8]
   816b4:	4b07      	ldr	r3, [pc, #28]	; (816d4 <vPortFree+0x9c>)
   816b6:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   816b8:	4b07      	ldr	r3, [pc, #28]	; (816d8 <vPortFree+0xa0>)
   816ba:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   816bc:	3710      	adds	r7, #16
   816be:	46bd      	mov	sp, r7
   816c0:	bd80      	pop	{r7, pc}
   816c2:	bf00      	nop
   816c4:	2007a4e0 	.word	0x2007a4e0
   816c8:	0008139d 	.word	0x0008139d
   816cc:	00082b31 	.word	0x00082b31
   816d0:	2007a4d8 	.word	0x2007a4d8
   816d4:	000817a1 	.word	0x000817a1
   816d8:	00082b4d 	.word	0x00082b4d

000816dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   816dc:	b480      	push	{r7}
   816de:	b085      	sub	sp, #20
   816e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   816e2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   816e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   816e8:	4b27      	ldr	r3, [pc, #156]	; (81788 <prvHeapInit+0xac>)
   816ea:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   816ec:	68fb      	ldr	r3, [r7, #12]
   816ee:	f003 0307 	and.w	r3, r3, #7
   816f2:	2b00      	cmp	r3, #0
   816f4:	d00c      	beq.n	81710 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   816f6:	68fb      	ldr	r3, [r7, #12]
   816f8:	3307      	adds	r3, #7
   816fa:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   816fc:	68fb      	ldr	r3, [r7, #12]
   816fe:	f023 0307 	bic.w	r3, r3, #7
   81702:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   81704:	68ba      	ldr	r2, [r7, #8]
   81706:	68fb      	ldr	r3, [r7, #12]
   81708:	1ad2      	subs	r2, r2, r3
   8170a:	4b1f      	ldr	r3, [pc, #124]	; (81788 <prvHeapInit+0xac>)
   8170c:	4413      	add	r3, r2
   8170e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   81710:	68fb      	ldr	r3, [r7, #12]
   81712:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   81714:	4b1d      	ldr	r3, [pc, #116]	; (8178c <prvHeapInit+0xb0>)
   81716:	687a      	ldr	r2, [r7, #4]
   81718:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   8171a:	4b1c      	ldr	r3, [pc, #112]	; (8178c <prvHeapInit+0xb0>)
   8171c:	2200      	movs	r2, #0
   8171e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   81720:	687a      	ldr	r2, [r7, #4]
   81722:	68bb      	ldr	r3, [r7, #8]
   81724:	4413      	add	r3, r2
   81726:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   81728:	2308      	movs	r3, #8
   8172a:	68fa      	ldr	r2, [r7, #12]
   8172c:	1ad3      	subs	r3, r2, r3
   8172e:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   81730:	68fb      	ldr	r3, [r7, #12]
   81732:	f023 0307 	bic.w	r3, r3, #7
   81736:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   81738:	68fa      	ldr	r2, [r7, #12]
   8173a:	4b15      	ldr	r3, [pc, #84]	; (81790 <prvHeapInit+0xb4>)
   8173c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   8173e:	4b14      	ldr	r3, [pc, #80]	; (81790 <prvHeapInit+0xb4>)
   81740:	681b      	ldr	r3, [r3, #0]
   81742:	2200      	movs	r2, #0
   81744:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   81746:	4b12      	ldr	r3, [pc, #72]	; (81790 <prvHeapInit+0xb4>)
   81748:	681b      	ldr	r3, [r3, #0]
   8174a:	2200      	movs	r2, #0
   8174c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   8174e:	687b      	ldr	r3, [r7, #4]
   81750:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   81752:	683b      	ldr	r3, [r7, #0]
   81754:	68fa      	ldr	r2, [r7, #12]
   81756:	1ad2      	subs	r2, r2, r3
   81758:	683b      	ldr	r3, [r7, #0]
   8175a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8175c:	4b0c      	ldr	r3, [pc, #48]	; (81790 <prvHeapInit+0xb4>)
   8175e:	681a      	ldr	r2, [r3, #0]
   81760:	683b      	ldr	r3, [r7, #0]
   81762:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   81764:	683b      	ldr	r3, [r7, #0]
   81766:	685a      	ldr	r2, [r3, #4]
   81768:	4b0a      	ldr	r3, [pc, #40]	; (81794 <prvHeapInit+0xb8>)
   8176a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   8176c:	683b      	ldr	r3, [r7, #0]
   8176e:	685a      	ldr	r2, [r3, #4]
   81770:	4b09      	ldr	r3, [pc, #36]	; (81798 <prvHeapInit+0xbc>)
   81772:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   81774:	4b09      	ldr	r3, [pc, #36]	; (8179c <prvHeapInit+0xc0>)
   81776:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   8177a:	601a      	str	r2, [r3, #0]
}
   8177c:	3714      	adds	r7, #20
   8177e:	46bd      	mov	sp, r7
   81780:	f85d 7b04 	ldr.w	r7, [sp], #4
   81784:	4770      	bx	lr
   81786:	bf00      	nop
   81788:	200704cc 	.word	0x200704cc
   8178c:	2007a4cc 	.word	0x2007a4cc
   81790:	2007a4d4 	.word	0x2007a4d4
   81794:	2007a4dc 	.word	0x2007a4dc
   81798:	2007a4d8 	.word	0x2007a4d8
   8179c:	2007a4e0 	.word	0x2007a4e0

000817a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   817a0:	b480      	push	{r7}
   817a2:	b085      	sub	sp, #20
   817a4:	af00      	add	r7, sp, #0
   817a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   817a8:	4b27      	ldr	r3, [pc, #156]	; (81848 <prvInsertBlockIntoFreeList+0xa8>)
   817aa:	60fb      	str	r3, [r7, #12]
   817ac:	e002      	b.n	817b4 <prvInsertBlockIntoFreeList+0x14>
   817ae:	68fb      	ldr	r3, [r7, #12]
   817b0:	681b      	ldr	r3, [r3, #0]
   817b2:	60fb      	str	r3, [r7, #12]
   817b4:	68fb      	ldr	r3, [r7, #12]
   817b6:	681a      	ldr	r2, [r3, #0]
   817b8:	687b      	ldr	r3, [r7, #4]
   817ba:	429a      	cmp	r2, r3
   817bc:	d3f7      	bcc.n	817ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   817be:	68fb      	ldr	r3, [r7, #12]
   817c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   817c2:	68fb      	ldr	r3, [r7, #12]
   817c4:	685b      	ldr	r3, [r3, #4]
   817c6:	68ba      	ldr	r2, [r7, #8]
   817c8:	441a      	add	r2, r3
   817ca:	687b      	ldr	r3, [r7, #4]
   817cc:	429a      	cmp	r2, r3
   817ce:	d108      	bne.n	817e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   817d0:	68fb      	ldr	r3, [r7, #12]
   817d2:	685a      	ldr	r2, [r3, #4]
   817d4:	687b      	ldr	r3, [r7, #4]
   817d6:	685b      	ldr	r3, [r3, #4]
   817d8:	441a      	add	r2, r3
   817da:	68fb      	ldr	r3, [r7, #12]
   817dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   817de:	68fb      	ldr	r3, [r7, #12]
   817e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   817e2:	687b      	ldr	r3, [r7, #4]
   817e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   817e6:	687b      	ldr	r3, [r7, #4]
   817e8:	685b      	ldr	r3, [r3, #4]
   817ea:	68ba      	ldr	r2, [r7, #8]
   817ec:	441a      	add	r2, r3
   817ee:	68fb      	ldr	r3, [r7, #12]
   817f0:	681b      	ldr	r3, [r3, #0]
   817f2:	429a      	cmp	r2, r3
   817f4:	d118      	bne.n	81828 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   817f6:	68fb      	ldr	r3, [r7, #12]
   817f8:	681a      	ldr	r2, [r3, #0]
   817fa:	4b14      	ldr	r3, [pc, #80]	; (8184c <prvInsertBlockIntoFreeList+0xac>)
   817fc:	681b      	ldr	r3, [r3, #0]
   817fe:	429a      	cmp	r2, r3
   81800:	d00d      	beq.n	8181e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81802:	687b      	ldr	r3, [r7, #4]
   81804:	685a      	ldr	r2, [r3, #4]
   81806:	68fb      	ldr	r3, [r7, #12]
   81808:	681b      	ldr	r3, [r3, #0]
   8180a:	685b      	ldr	r3, [r3, #4]
   8180c:	441a      	add	r2, r3
   8180e:	687b      	ldr	r3, [r7, #4]
   81810:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   81812:	68fb      	ldr	r3, [r7, #12]
   81814:	681b      	ldr	r3, [r3, #0]
   81816:	681a      	ldr	r2, [r3, #0]
   81818:	687b      	ldr	r3, [r7, #4]
   8181a:	601a      	str	r2, [r3, #0]
   8181c:	e008      	b.n	81830 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8181e:	4b0b      	ldr	r3, [pc, #44]	; (8184c <prvInsertBlockIntoFreeList+0xac>)
   81820:	681a      	ldr	r2, [r3, #0]
   81822:	687b      	ldr	r3, [r7, #4]
   81824:	601a      	str	r2, [r3, #0]
   81826:	e003      	b.n	81830 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   81828:	68fb      	ldr	r3, [r7, #12]
   8182a:	681a      	ldr	r2, [r3, #0]
   8182c:	687b      	ldr	r3, [r7, #4]
   8182e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81830:	68fa      	ldr	r2, [r7, #12]
   81832:	687b      	ldr	r3, [r7, #4]
   81834:	429a      	cmp	r2, r3
   81836:	d002      	beq.n	8183e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   81838:	68fb      	ldr	r3, [r7, #12]
   8183a:	687a      	ldr	r2, [r7, #4]
   8183c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   8183e:	3714      	adds	r7, #20
   81840:	46bd      	mov	sp, r7
   81842:	f85d 7b04 	ldr.w	r7, [sp], #4
   81846:	4770      	bx	lr
   81848:	2007a4cc 	.word	0x2007a4cc
   8184c:	2007a4d4 	.word	0x2007a4d4

00081850 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   81850:	b580      	push	{r7, lr}
   81852:	b084      	sub	sp, #16
   81854:	af00      	add	r7, sp, #0
   81856:	6078      	str	r0, [r7, #4]
   81858:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8185a:	687b      	ldr	r3, [r7, #4]
   8185c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   8185e:	68fb      	ldr	r3, [r7, #12]
   81860:	2b00      	cmp	r3, #0
   81862:	d102      	bne.n	8186a <xQueueGenericReset+0x1a>
   81864:	4b26      	ldr	r3, [pc, #152]	; (81900 <xQueueGenericReset+0xb0>)
   81866:	4798      	blx	r3
   81868:	e7fe      	b.n	81868 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   8186a:	4b26      	ldr	r3, [pc, #152]	; (81904 <xQueueGenericReset+0xb4>)
   8186c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8186e:	68fb      	ldr	r3, [r7, #12]
   81870:	681a      	ldr	r2, [r3, #0]
   81872:	68fb      	ldr	r3, [r7, #12]
   81874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81876:	68f9      	ldr	r1, [r7, #12]
   81878:	6c09      	ldr	r1, [r1, #64]	; 0x40
   8187a:	fb01 f303 	mul.w	r3, r1, r3
   8187e:	441a      	add	r2, r3
   81880:	68fb      	ldr	r3, [r7, #12]
   81882:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   81884:	68fb      	ldr	r3, [r7, #12]
   81886:	2200      	movs	r2, #0
   81888:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8188a:	68fb      	ldr	r3, [r7, #12]
   8188c:	681a      	ldr	r2, [r3, #0]
   8188e:	68fb      	ldr	r3, [r7, #12]
   81890:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   81892:	68fb      	ldr	r3, [r7, #12]
   81894:	681a      	ldr	r2, [r3, #0]
   81896:	68fb      	ldr	r3, [r7, #12]
   81898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8189a:	3b01      	subs	r3, #1
   8189c:	68f9      	ldr	r1, [r7, #12]
   8189e:	6c09      	ldr	r1, [r1, #64]	; 0x40
   818a0:	fb01 f303 	mul.w	r3, r1, r3
   818a4:	441a      	add	r2, r3
   818a6:	68fb      	ldr	r3, [r7, #12]
   818a8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   818aa:	68fb      	ldr	r3, [r7, #12]
   818ac:	f04f 32ff 	mov.w	r2, #4294967295
   818b0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   818b2:	68fb      	ldr	r3, [r7, #12]
   818b4:	f04f 32ff 	mov.w	r2, #4294967295
   818b8:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   818ba:	683b      	ldr	r3, [r7, #0]
   818bc:	2b00      	cmp	r3, #0
   818be:	d10e      	bne.n	818de <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   818c0:	68fb      	ldr	r3, [r7, #12]
   818c2:	691b      	ldr	r3, [r3, #16]
   818c4:	2b00      	cmp	r3, #0
   818c6:	d014      	beq.n	818f2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   818c8:	68fb      	ldr	r3, [r7, #12]
   818ca:	3310      	adds	r3, #16
   818cc:	4618      	mov	r0, r3
   818ce:	4b0e      	ldr	r3, [pc, #56]	; (81908 <xQueueGenericReset+0xb8>)
   818d0:	4798      	blx	r3
   818d2:	4603      	mov	r3, r0
   818d4:	2b01      	cmp	r3, #1
   818d6:	d10c      	bne.n	818f2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   818d8:	4b0c      	ldr	r3, [pc, #48]	; (8190c <xQueueGenericReset+0xbc>)
   818da:	4798      	blx	r3
   818dc:	e009      	b.n	818f2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   818de:	68fb      	ldr	r3, [r7, #12]
   818e0:	3310      	adds	r3, #16
   818e2:	4618      	mov	r0, r3
   818e4:	4b0a      	ldr	r3, [pc, #40]	; (81910 <xQueueGenericReset+0xc0>)
   818e6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   818e8:	68fb      	ldr	r3, [r7, #12]
   818ea:	3324      	adds	r3, #36	; 0x24
   818ec:	4618      	mov	r0, r3
   818ee:	4b08      	ldr	r3, [pc, #32]	; (81910 <xQueueGenericReset+0xc0>)
   818f0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   818f2:	4b08      	ldr	r3, [pc, #32]	; (81914 <xQueueGenericReset+0xc4>)
   818f4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   818f6:	2301      	movs	r3, #1
}
   818f8:	4618      	mov	r0, r3
   818fa:	3710      	adds	r7, #16
   818fc:	46bd      	mov	sp, r7
   818fe:	bd80      	pop	{r7, pc}
   81900:	0008139d 	.word	0x0008139d
   81904:	00081321 	.word	0x00081321
   81908:	0008304d 	.word	0x0008304d
   8190c:	00081301 	.word	0x00081301
   81910:	00081015 	.word	0x00081015
   81914:	00081365 	.word	0x00081365

00081918 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   81918:	b580      	push	{r7, lr}
   8191a:	b088      	sub	sp, #32
   8191c:	af00      	add	r7, sp, #0
   8191e:	60f8      	str	r0, [r7, #12]
   81920:	60b9      	str	r1, [r7, #8]
   81922:	4613      	mov	r3, r2
   81924:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   81926:	2300      	movs	r3, #0
   81928:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   8192a:	68fb      	ldr	r3, [r7, #12]
   8192c:	2b00      	cmp	r3, #0
   8192e:	d026      	beq.n	8197e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   81930:	204c      	movs	r0, #76	; 0x4c
   81932:	4b18      	ldr	r3, [pc, #96]	; (81994 <xQueueGenericCreate+0x7c>)
   81934:	4798      	blx	r3
   81936:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   81938:	69bb      	ldr	r3, [r7, #24]
   8193a:	2b00      	cmp	r3, #0
   8193c:	d01f      	beq.n	8197e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8193e:	68fb      	ldr	r3, [r7, #12]
   81940:	68ba      	ldr	r2, [r7, #8]
   81942:	fb02 f303 	mul.w	r3, r2, r3
   81946:	3301      	adds	r3, #1
   81948:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   8194a:	6978      	ldr	r0, [r7, #20]
   8194c:	4b11      	ldr	r3, [pc, #68]	; (81994 <xQueueGenericCreate+0x7c>)
   8194e:	4798      	blx	r3
   81950:	4602      	mov	r2, r0
   81952:	69bb      	ldr	r3, [r7, #24]
   81954:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   81956:	69bb      	ldr	r3, [r7, #24]
   81958:	681b      	ldr	r3, [r3, #0]
   8195a:	2b00      	cmp	r3, #0
   8195c:	d00c      	beq.n	81978 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   8195e:	69bb      	ldr	r3, [r7, #24]
   81960:	68fa      	ldr	r2, [r7, #12]
   81962:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81964:	69bb      	ldr	r3, [r7, #24]
   81966:	68ba      	ldr	r2, [r7, #8]
   81968:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   8196a:	69b8      	ldr	r0, [r7, #24]
   8196c:	2101      	movs	r1, #1
   8196e:	4b0a      	ldr	r3, [pc, #40]	; (81998 <xQueueGenericCreate+0x80>)
   81970:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   81972:	69bb      	ldr	r3, [r7, #24]
   81974:	61fb      	str	r3, [r7, #28]
   81976:	e002      	b.n	8197e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81978:	69b8      	ldr	r0, [r7, #24]
   8197a:	4b08      	ldr	r3, [pc, #32]	; (8199c <xQueueGenericCreate+0x84>)
   8197c:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   8197e:	69fb      	ldr	r3, [r7, #28]
   81980:	2b00      	cmp	r3, #0
   81982:	d102      	bne.n	8198a <xQueueGenericCreate+0x72>
   81984:	4b06      	ldr	r3, [pc, #24]	; (819a0 <xQueueGenericCreate+0x88>)
   81986:	4798      	blx	r3
   81988:	e7fe      	b.n	81988 <xQueueGenericCreate+0x70>

	return xReturn;
   8198a:	69fb      	ldr	r3, [r7, #28]
}
   8198c:	4618      	mov	r0, r3
   8198e:	3720      	adds	r7, #32
   81990:	46bd      	mov	sp, r7
   81992:	bd80      	pop	{r7, pc}
   81994:	000814c1 	.word	0x000814c1
   81998:	00081851 	.word	0x00081851
   8199c:	00081639 	.word	0x00081639
   819a0:	0008139d 	.word	0x0008139d

000819a4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   819a4:	b590      	push	{r4, r7, lr}
   819a6:	b085      	sub	sp, #20
   819a8:	af00      	add	r7, sp, #0
   819aa:	4603      	mov	r3, r0
   819ac:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   819ae:	204c      	movs	r0, #76	; 0x4c
   819b0:	4b1e      	ldr	r3, [pc, #120]	; (81a2c <xQueueCreateMutex+0x88>)
   819b2:	4798      	blx	r3
   819b4:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
   819b6:	68fb      	ldr	r3, [r7, #12]
   819b8:	2b00      	cmp	r3, #0
   819ba:	d02c      	beq.n	81a16 <xQueueCreateMutex+0x72>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   819bc:	68fb      	ldr	r3, [r7, #12]
   819be:	2200      	movs	r2, #0
   819c0:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   819c2:	68fb      	ldr	r3, [r7, #12]
   819c4:	2200      	movs	r2, #0
   819c6:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
   819c8:	68fb      	ldr	r3, [r7, #12]
   819ca:	2200      	movs	r2, #0
   819cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->u.pcReadFrom = NULL;
   819ce:	68fb      	ldr	r3, [r7, #12]
   819d0:	2200      	movs	r2, #0
   819d2:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   819d4:	68fb      	ldr	r3, [r7, #12]
   819d6:	2200      	movs	r2, #0
   819d8:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( UBaseType_t ) 1U;
   819da:	68fb      	ldr	r3, [r7, #12]
   819dc:	2201      	movs	r2, #1
   819de:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( UBaseType_t ) 0U;
   819e0:	68fb      	ldr	r3, [r7, #12]
   819e2:	2200      	movs	r2, #0
   819e4:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
   819e6:	68fb      	ldr	r3, [r7, #12]
   819e8:	f04f 32ff 	mov.w	r2, #4294967295
   819ec:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
   819ee:	68fb      	ldr	r3, [r7, #12]
   819f0:	f04f 32ff 	mov.w	r2, #4294967295
   819f4:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->pxQueueSetContainer = NULL;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
   819f6:	68fb      	ldr	r3, [r7, #12]
   819f8:	3310      	adds	r3, #16
   819fa:	4618      	mov	r0, r3
   819fc:	4b0c      	ldr	r3, [pc, #48]	; (81a30 <xQueueCreateMutex+0x8c>)
   819fe:	4798      	blx	r3
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
   81a00:	68fb      	ldr	r3, [r7, #12]
   81a02:	3324      	adds	r3, #36	; 0x24
   81a04:	4618      	mov	r0, r3
   81a06:	4b0a      	ldr	r3, [pc, #40]	; (81a30 <xQueueCreateMutex+0x8c>)
   81a08:	4798      	blx	r3

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   81a0a:	68f8      	ldr	r0, [r7, #12]
   81a0c:	2100      	movs	r1, #0
   81a0e:	2200      	movs	r2, #0
   81a10:	2300      	movs	r3, #0
   81a12:	4c08      	ldr	r4, [pc, #32]	; (81a34 <xQueueCreateMutex+0x90>)
   81a14:	47a0      	blx	r4
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
   81a16:	68fb      	ldr	r3, [r7, #12]
   81a18:	2b00      	cmp	r3, #0
   81a1a:	d102      	bne.n	81a22 <xQueueCreateMutex+0x7e>
   81a1c:	4b06      	ldr	r3, [pc, #24]	; (81a38 <xQueueCreateMutex+0x94>)
   81a1e:	4798      	blx	r3
   81a20:	e7fe      	b.n	81a20 <xQueueCreateMutex+0x7c>
		return pxNewQueue;
   81a22:	68fb      	ldr	r3, [r7, #12]
	}
   81a24:	4618      	mov	r0, r3
   81a26:	3714      	adds	r7, #20
   81a28:	46bd      	mov	sp, r7
   81a2a:	bd90      	pop	{r4, r7, pc}
   81a2c:	000814c1 	.word	0x000814c1
   81a30:	00081015 	.word	0x00081015
   81a34:	00081b69 	.word	0x00081b69
   81a38:	0008139d 	.word	0x0008139d

00081a3c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
   81a3c:	b590      	push	{r4, r7, lr}
   81a3e:	b085      	sub	sp, #20
   81a40:	af00      	add	r7, sp, #0
   81a42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
   81a44:	687b      	ldr	r3, [r7, #4]
   81a46:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
   81a48:	68bb      	ldr	r3, [r7, #8]
   81a4a:	2b00      	cmp	r3, #0
   81a4c:	d102      	bne.n	81a54 <xQueueGiveMutexRecursive+0x18>
   81a4e:	4b11      	ldr	r3, [pc, #68]	; (81a94 <xQueueGiveMutexRecursive+0x58>)
   81a50:	4798      	blx	r3
   81a52:	e7fe      	b.n	81a52 <xQueueGiveMutexRecursive+0x16>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
   81a54:	68bb      	ldr	r3, [r7, #8]
   81a56:	685c      	ldr	r4, [r3, #4]
   81a58:	4b0f      	ldr	r3, [pc, #60]	; (81a98 <xQueueGiveMutexRecursive+0x5c>)
   81a5a:	4798      	blx	r3
   81a5c:	4603      	mov	r3, r0
   81a5e:	429c      	cmp	r4, r3
   81a60:	d111      	bne.n	81a86 <xQueueGiveMutexRecursive+0x4a>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
   81a62:	68bb      	ldr	r3, [r7, #8]
   81a64:	68db      	ldr	r3, [r3, #12]
   81a66:	1e5a      	subs	r2, r3, #1
   81a68:	68bb      	ldr	r3, [r7, #8]
   81a6a:	60da      	str	r2, [r3, #12]

			/* Have we unwound the call count? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
   81a6c:	68bb      	ldr	r3, [r7, #8]
   81a6e:	68db      	ldr	r3, [r3, #12]
   81a70:	2b00      	cmp	r3, #0
   81a72:	d105      	bne.n	81a80 <xQueueGiveMutexRecursive+0x44>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
   81a74:	68b8      	ldr	r0, [r7, #8]
   81a76:	2100      	movs	r1, #0
   81a78:	2200      	movs	r2, #0
   81a7a:	2300      	movs	r3, #0
   81a7c:	4c07      	ldr	r4, [pc, #28]	; (81a9c <xQueueGiveMutexRecursive+0x60>)
   81a7e:	47a0      	blx	r4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
   81a80:	2301      	movs	r3, #1
   81a82:	60fb      	str	r3, [r7, #12]
   81a84:	e001      	b.n	81a8a <xQueueGiveMutexRecursive+0x4e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
   81a86:	2300      	movs	r3, #0
   81a88:	60fb      	str	r3, [r7, #12]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
   81a8a:	68fb      	ldr	r3, [r7, #12]
	}
   81a8c:	4618      	mov	r0, r3
   81a8e:	3714      	adds	r7, #20
   81a90:	46bd      	mov	sp, r7
   81a92:	bd90      	pop	{r4, r7, pc}
   81a94:	0008139d 	.word	0x0008139d
   81a98:	00083525 	.word	0x00083525
   81a9c:	00081b69 	.word	0x00081b69

00081aa0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
   81aa0:	b590      	push	{r4, r7, lr}
   81aa2:	b085      	sub	sp, #20
   81aa4:	af00      	add	r7, sp, #0
   81aa6:	6078      	str	r0, [r7, #4]
   81aa8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
   81aaa:	687b      	ldr	r3, [r7, #4]
   81aac:	60bb      	str	r3, [r7, #8]

		configASSERT( pxMutex );
   81aae:	68bb      	ldr	r3, [r7, #8]
   81ab0:	2b00      	cmp	r3, #0
   81ab2:	d102      	bne.n	81aba <xQueueTakeMutexRecursive+0x1a>
   81ab4:	4b12      	ldr	r3, [pc, #72]	; (81b00 <xQueueTakeMutexRecursive+0x60>)
   81ab6:	4798      	blx	r3
   81ab8:	e7fe      	b.n	81ab8 <xQueueTakeMutexRecursive+0x18>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   81aba:	68bb      	ldr	r3, [r7, #8]
   81abc:	685c      	ldr	r4, [r3, #4]
   81abe:	4b11      	ldr	r3, [pc, #68]	; (81b04 <xQueueTakeMutexRecursive+0x64>)
   81ac0:	4798      	blx	r3
   81ac2:	4603      	mov	r3, r0
   81ac4:	429c      	cmp	r4, r3
   81ac6:	d107      	bne.n	81ad8 <xQueueTakeMutexRecursive+0x38>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
   81ac8:	68bb      	ldr	r3, [r7, #8]
   81aca:	68db      	ldr	r3, [r3, #12]
   81acc:	1c5a      	adds	r2, r3, #1
   81ace:	68bb      	ldr	r3, [r7, #8]
   81ad0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
   81ad2:	2301      	movs	r3, #1
   81ad4:	60fb      	str	r3, [r7, #12]
   81ad6:	e00e      	b.n	81af6 <xQueueTakeMutexRecursive+0x56>
		}
		else
		{
			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
   81ad8:	68b8      	ldr	r0, [r7, #8]
   81ada:	2100      	movs	r1, #0
   81adc:	683a      	ldr	r2, [r7, #0]
   81ade:	2300      	movs	r3, #0
   81ae0:	4c09      	ldr	r4, [pc, #36]	; (81b08 <xQueueTakeMutexRecursive+0x68>)
   81ae2:	47a0      	blx	r4
   81ae4:	60f8      	str	r0, [r7, #12]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn == pdPASS )
   81ae6:	68fb      	ldr	r3, [r7, #12]
   81ae8:	2b01      	cmp	r3, #1
   81aea:	d104      	bne.n	81af6 <xQueueTakeMutexRecursive+0x56>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
   81aec:	68bb      	ldr	r3, [r7, #8]
   81aee:	68db      	ldr	r3, [r3, #12]
   81af0:	1c5a      	adds	r2, r3, #1
   81af2:	68bb      	ldr	r3, [r7, #8]
   81af4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
   81af6:	68fb      	ldr	r3, [r7, #12]
	}
   81af8:	4618      	mov	r0, r3
   81afa:	3714      	adds	r7, #20
   81afc:	46bd      	mov	sp, r7
   81afe:	bd90      	pop	{r4, r7, pc}
   81b00:	0008139d 	.word	0x0008139d
   81b04:	00083525 	.word	0x00083525
   81b08:	00081e29 	.word	0x00081e29

00081b0c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if ( configUSE_COUNTING_SEMAPHORES == 1 )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
   81b0c:	b580      	push	{r7, lr}
   81b0e:	b084      	sub	sp, #16
   81b10:	af00      	add	r7, sp, #0
   81b12:	6078      	str	r0, [r7, #4]
   81b14:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
   81b16:	687b      	ldr	r3, [r7, #4]
   81b18:	2b00      	cmp	r3, #0
   81b1a:	d102      	bne.n	81b22 <xQueueCreateCountingSemaphore+0x16>
   81b1c:	4b10      	ldr	r3, [pc, #64]	; (81b60 <xQueueCreateCountingSemaphore+0x54>)
   81b1e:	4798      	blx	r3
   81b20:	e7fe      	b.n	81b20 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
   81b22:	683a      	ldr	r2, [r7, #0]
   81b24:	687b      	ldr	r3, [r7, #4]
   81b26:	429a      	cmp	r2, r3
   81b28:	d902      	bls.n	81b30 <xQueueCreateCountingSemaphore+0x24>
   81b2a:	4b0d      	ldr	r3, [pc, #52]	; (81b60 <xQueueCreateCountingSemaphore+0x54>)
   81b2c:	4798      	blx	r3
   81b2e:	e7fe      	b.n	81b2e <xQueueCreateCountingSemaphore+0x22>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
   81b30:	6878      	ldr	r0, [r7, #4]
   81b32:	2100      	movs	r1, #0
   81b34:	2202      	movs	r2, #2
   81b36:	4b0b      	ldr	r3, [pc, #44]	; (81b64 <xQueueCreateCountingSemaphore+0x58>)
   81b38:	4798      	blx	r3
   81b3a:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
   81b3c:	68fb      	ldr	r3, [r7, #12]
   81b3e:	2b00      	cmp	r3, #0
   81b40:	d002      	beq.n	81b48 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
   81b42:	68fb      	ldr	r3, [r7, #12]
   81b44:	683a      	ldr	r2, [r7, #0]
   81b46:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( xHandle );
   81b48:	68fb      	ldr	r3, [r7, #12]
   81b4a:	2b00      	cmp	r3, #0
   81b4c:	d102      	bne.n	81b54 <xQueueCreateCountingSemaphore+0x48>
   81b4e:	4b04      	ldr	r3, [pc, #16]	; (81b60 <xQueueCreateCountingSemaphore+0x54>)
   81b50:	4798      	blx	r3
   81b52:	e7fe      	b.n	81b52 <xQueueCreateCountingSemaphore+0x46>
		return xHandle;
   81b54:	68fb      	ldr	r3, [r7, #12]
	}
   81b56:	4618      	mov	r0, r3
   81b58:	3710      	adds	r7, #16
   81b5a:	46bd      	mov	sp, r7
   81b5c:	bd80      	pop	{r7, pc}
   81b5e:	bf00      	nop
   81b60:	0008139d 	.word	0x0008139d
   81b64:	00081919 	.word	0x00081919

00081b68 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   81b68:	b580      	push	{r7, lr}
   81b6a:	b08a      	sub	sp, #40	; 0x28
   81b6c:	af00      	add	r7, sp, #0
   81b6e:	60f8      	str	r0, [r7, #12]
   81b70:	60b9      	str	r1, [r7, #8]
   81b72:	607a      	str	r2, [r7, #4]
   81b74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   81b76:	2300      	movs	r3, #0
   81b78:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81b7a:	68fb      	ldr	r3, [r7, #12]
   81b7c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   81b7e:	6a3b      	ldr	r3, [r7, #32]
   81b80:	2b00      	cmp	r3, #0
   81b82:	d102      	bne.n	81b8a <xQueueGenericSend+0x22>
   81b84:	4b5b      	ldr	r3, [pc, #364]	; (81cf4 <xQueueGenericSend+0x18c>)
   81b86:	4798      	blx	r3
   81b88:	e7fe      	b.n	81b88 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81b8a:	68bb      	ldr	r3, [r7, #8]
   81b8c:	2b00      	cmp	r3, #0
   81b8e:	d103      	bne.n	81b98 <xQueueGenericSend+0x30>
   81b90:	6a3b      	ldr	r3, [r7, #32]
   81b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81b94:	2b00      	cmp	r3, #0
   81b96:	d101      	bne.n	81b9c <xQueueGenericSend+0x34>
   81b98:	2301      	movs	r3, #1
   81b9a:	e000      	b.n	81b9e <xQueueGenericSend+0x36>
   81b9c:	2300      	movs	r3, #0
   81b9e:	2b00      	cmp	r3, #0
   81ba0:	d102      	bne.n	81ba8 <xQueueGenericSend+0x40>
   81ba2:	4b54      	ldr	r3, [pc, #336]	; (81cf4 <xQueueGenericSend+0x18c>)
   81ba4:	4798      	blx	r3
   81ba6:	e7fe      	b.n	81ba6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   81ba8:	683b      	ldr	r3, [r7, #0]
   81baa:	2b02      	cmp	r3, #2
   81bac:	d103      	bne.n	81bb6 <xQueueGenericSend+0x4e>
   81bae:	6a3b      	ldr	r3, [r7, #32]
   81bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81bb2:	2b01      	cmp	r3, #1
   81bb4:	d101      	bne.n	81bba <xQueueGenericSend+0x52>
   81bb6:	2301      	movs	r3, #1
   81bb8:	e000      	b.n	81bbc <xQueueGenericSend+0x54>
   81bba:	2300      	movs	r3, #0
   81bbc:	2b00      	cmp	r3, #0
   81bbe:	d102      	bne.n	81bc6 <xQueueGenericSend+0x5e>
   81bc0:	4b4c      	ldr	r3, [pc, #304]	; (81cf4 <xQueueGenericSend+0x18c>)
   81bc2:	4798      	blx	r3
   81bc4:	e7fe      	b.n	81bc4 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   81bc6:	4b4c      	ldr	r3, [pc, #304]	; (81cf8 <xQueueGenericSend+0x190>)
   81bc8:	4798      	blx	r3
   81bca:	4603      	mov	r3, r0
   81bcc:	2b00      	cmp	r3, #0
   81bce:	d102      	bne.n	81bd6 <xQueueGenericSend+0x6e>
   81bd0:	687b      	ldr	r3, [r7, #4]
   81bd2:	2b00      	cmp	r3, #0
   81bd4:	d101      	bne.n	81bda <xQueueGenericSend+0x72>
   81bd6:	2301      	movs	r3, #1
   81bd8:	e000      	b.n	81bdc <xQueueGenericSend+0x74>
   81bda:	2300      	movs	r3, #0
   81bdc:	2b00      	cmp	r3, #0
   81bde:	d102      	bne.n	81be6 <xQueueGenericSend+0x7e>
   81be0:	4b44      	ldr	r3, [pc, #272]	; (81cf4 <xQueueGenericSend+0x18c>)
   81be2:	4798      	blx	r3
   81be4:	e7fe      	b.n	81be4 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81be6:	4b45      	ldr	r3, [pc, #276]	; (81cfc <xQueueGenericSend+0x194>)
   81be8:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   81bea:	6a3b      	ldr	r3, [r7, #32]
   81bec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81bee:	6a3b      	ldr	r3, [r7, #32]
   81bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81bf2:	429a      	cmp	r2, r3
   81bf4:	d302      	bcc.n	81bfc <xQueueGenericSend+0x94>
   81bf6:	683b      	ldr	r3, [r7, #0]
   81bf8:	2b02      	cmp	r3, #2
   81bfa:	d11d      	bne.n	81c38 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81bfc:	6a38      	ldr	r0, [r7, #32]
   81bfe:	68b9      	ldr	r1, [r7, #8]
   81c00:	683a      	ldr	r2, [r7, #0]
   81c02:	4b3f      	ldr	r3, [pc, #252]	; (81d00 <xQueueGenericSend+0x198>)
   81c04:	4798      	blx	r3
   81c06:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81c08:	6a3b      	ldr	r3, [r7, #32]
   81c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81c0c:	2b00      	cmp	r3, #0
   81c0e:	d00a      	beq.n	81c26 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81c10:	6a3b      	ldr	r3, [r7, #32]
   81c12:	3324      	adds	r3, #36	; 0x24
   81c14:	4618      	mov	r0, r3
   81c16:	4b3b      	ldr	r3, [pc, #236]	; (81d04 <xQueueGenericSend+0x19c>)
   81c18:	4798      	blx	r3
   81c1a:	4603      	mov	r3, r0
   81c1c:	2b01      	cmp	r3, #1
   81c1e:	d107      	bne.n	81c30 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   81c20:	4b39      	ldr	r3, [pc, #228]	; (81d08 <xQueueGenericSend+0x1a0>)
   81c22:	4798      	blx	r3
   81c24:	e004      	b.n	81c30 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   81c26:	69fb      	ldr	r3, [r7, #28]
   81c28:	2b00      	cmp	r3, #0
   81c2a:	d001      	beq.n	81c30 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   81c2c:	4b36      	ldr	r3, [pc, #216]	; (81d08 <xQueueGenericSend+0x1a0>)
   81c2e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   81c30:	4b36      	ldr	r3, [pc, #216]	; (81d0c <xQueueGenericSend+0x1a4>)
   81c32:	4798      	blx	r3
				return pdPASS;
   81c34:	2301      	movs	r3, #1
   81c36:	e059      	b.n	81cec <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   81c38:	687b      	ldr	r3, [r7, #4]
   81c3a:	2b00      	cmp	r3, #0
   81c3c:	d103      	bne.n	81c46 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81c3e:	4b33      	ldr	r3, [pc, #204]	; (81d0c <xQueueGenericSend+0x1a4>)
   81c40:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81c42:	2300      	movs	r3, #0
   81c44:	e052      	b.n	81cec <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   81c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81c48:	2b00      	cmp	r3, #0
   81c4a:	d106      	bne.n	81c5a <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81c4c:	f107 0314 	add.w	r3, r7, #20
   81c50:	4618      	mov	r0, r3
   81c52:	4b2f      	ldr	r3, [pc, #188]	; (81d10 <xQueueGenericSend+0x1a8>)
   81c54:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   81c56:	2301      	movs	r3, #1
   81c58:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   81c5a:	4b2c      	ldr	r3, [pc, #176]	; (81d0c <xQueueGenericSend+0x1a4>)
   81c5c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81c5e:	4b2d      	ldr	r3, [pc, #180]	; (81d14 <xQueueGenericSend+0x1ac>)
   81c60:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81c62:	4b26      	ldr	r3, [pc, #152]	; (81cfc <xQueueGenericSend+0x194>)
   81c64:	4798      	blx	r3
   81c66:	6a3b      	ldr	r3, [r7, #32]
   81c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
   81c6e:	d102      	bne.n	81c76 <xQueueGenericSend+0x10e>
   81c70:	6a3b      	ldr	r3, [r7, #32]
   81c72:	2200      	movs	r2, #0
   81c74:	645a      	str	r2, [r3, #68]	; 0x44
   81c76:	6a3b      	ldr	r3, [r7, #32]
   81c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
   81c7e:	d102      	bne.n	81c86 <xQueueGenericSend+0x11e>
   81c80:	6a3b      	ldr	r3, [r7, #32]
   81c82:	2200      	movs	r2, #0
   81c84:	649a      	str	r2, [r3, #72]	; 0x48
   81c86:	4b21      	ldr	r3, [pc, #132]	; (81d0c <xQueueGenericSend+0x1a4>)
   81c88:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81c8a:	f107 0214 	add.w	r2, r7, #20
   81c8e:	1d3b      	adds	r3, r7, #4
   81c90:	4610      	mov	r0, r2
   81c92:	4619      	mov	r1, r3
   81c94:	4b20      	ldr	r3, [pc, #128]	; (81d18 <xQueueGenericSend+0x1b0>)
   81c96:	4798      	blx	r3
   81c98:	4603      	mov	r3, r0
   81c9a:	2b00      	cmp	r3, #0
   81c9c:	d11e      	bne.n	81cdc <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81c9e:	6a38      	ldr	r0, [r7, #32]
   81ca0:	4b1e      	ldr	r3, [pc, #120]	; (81d1c <xQueueGenericSend+0x1b4>)
   81ca2:	4798      	blx	r3
   81ca4:	4603      	mov	r3, r0
   81ca6:	2b00      	cmp	r3, #0
   81ca8:	d012      	beq.n	81cd0 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81caa:	6a3b      	ldr	r3, [r7, #32]
   81cac:	f103 0210 	add.w	r2, r3, #16
   81cb0:	687b      	ldr	r3, [r7, #4]
   81cb2:	4610      	mov	r0, r2
   81cb4:	4619      	mov	r1, r3
   81cb6:	4b1a      	ldr	r3, [pc, #104]	; (81d20 <xQueueGenericSend+0x1b8>)
   81cb8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81cba:	6a38      	ldr	r0, [r7, #32]
   81cbc:	4b19      	ldr	r3, [pc, #100]	; (81d24 <xQueueGenericSend+0x1bc>)
   81cbe:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81cc0:	4b19      	ldr	r3, [pc, #100]	; (81d28 <xQueueGenericSend+0x1c0>)
   81cc2:	4798      	blx	r3
   81cc4:	4603      	mov	r3, r0
   81cc6:	2b00      	cmp	r3, #0
   81cc8:	d10f      	bne.n	81cea <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   81cca:	4b0f      	ldr	r3, [pc, #60]	; (81d08 <xQueueGenericSend+0x1a0>)
   81ccc:	4798      	blx	r3
   81cce:	e00c      	b.n	81cea <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81cd0:	6a38      	ldr	r0, [r7, #32]
   81cd2:	4b14      	ldr	r3, [pc, #80]	; (81d24 <xQueueGenericSend+0x1bc>)
   81cd4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81cd6:	4b14      	ldr	r3, [pc, #80]	; (81d28 <xQueueGenericSend+0x1c0>)
   81cd8:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   81cda:	e784      	b.n	81be6 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81cdc:	6a38      	ldr	r0, [r7, #32]
   81cde:	4b11      	ldr	r3, [pc, #68]	; (81d24 <xQueueGenericSend+0x1bc>)
   81ce0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81ce2:	4b11      	ldr	r3, [pc, #68]	; (81d28 <xQueueGenericSend+0x1c0>)
   81ce4:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81ce6:	2300      	movs	r3, #0
   81ce8:	e000      	b.n	81cec <xQueueGenericSend+0x184>
		}
	}
   81cea:	e77c      	b.n	81be6 <xQueueGenericSend+0x7e>
}
   81cec:	4618      	mov	r0, r3
   81cee:	3728      	adds	r7, #40	; 0x28
   81cf0:	46bd      	mov	sp, r7
   81cf2:	bd80      	pop	{r7, pc}
   81cf4:	0008139d 	.word	0x0008139d
   81cf8:	00083545 	.word	0x00083545
   81cfc:	00081321 	.word	0x00081321
   81d00:	00082125 	.word	0x00082125
   81d04:	0008304d 	.word	0x0008304d
   81d08:	00081301 	.word	0x00081301
   81d0c:	00081365 	.word	0x00081365
   81d10:	0008310d 	.word	0x0008310d
   81d14:	00082b31 	.word	0x00082b31
   81d18:	00083145 	.word	0x00083145
   81d1c:	00082335 	.word	0x00082335
   81d20:	00082f2d 	.word	0x00082f2d
   81d24:	00082259 	.word	0x00082259
   81d28:	00082b4d 	.word	0x00082b4d

00081d2c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   81d2c:	b580      	push	{r7, lr}
   81d2e:	b088      	sub	sp, #32
   81d30:	af00      	add	r7, sp, #0
   81d32:	60f8      	str	r0, [r7, #12]
   81d34:	60b9      	str	r1, [r7, #8]
   81d36:	607a      	str	r2, [r7, #4]
   81d38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81d3a:	68fb      	ldr	r3, [r7, #12]
   81d3c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   81d3e:	69bb      	ldr	r3, [r7, #24]
   81d40:	2b00      	cmp	r3, #0
   81d42:	d102      	bne.n	81d4a <xQueueGenericSendFromISR+0x1e>
   81d44:	4b33      	ldr	r3, [pc, #204]	; (81e14 <xQueueGenericSendFromISR+0xe8>)
   81d46:	4798      	blx	r3
   81d48:	e7fe      	b.n	81d48 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81d4a:	68bb      	ldr	r3, [r7, #8]
   81d4c:	2b00      	cmp	r3, #0
   81d4e:	d103      	bne.n	81d58 <xQueueGenericSendFromISR+0x2c>
   81d50:	69bb      	ldr	r3, [r7, #24]
   81d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81d54:	2b00      	cmp	r3, #0
   81d56:	d101      	bne.n	81d5c <xQueueGenericSendFromISR+0x30>
   81d58:	2301      	movs	r3, #1
   81d5a:	e000      	b.n	81d5e <xQueueGenericSendFromISR+0x32>
   81d5c:	2300      	movs	r3, #0
   81d5e:	2b00      	cmp	r3, #0
   81d60:	d102      	bne.n	81d68 <xQueueGenericSendFromISR+0x3c>
   81d62:	4b2c      	ldr	r3, [pc, #176]	; (81e14 <xQueueGenericSendFromISR+0xe8>)
   81d64:	4798      	blx	r3
   81d66:	e7fe      	b.n	81d66 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   81d68:	683b      	ldr	r3, [r7, #0]
   81d6a:	2b02      	cmp	r3, #2
   81d6c:	d103      	bne.n	81d76 <xQueueGenericSendFromISR+0x4a>
   81d6e:	69bb      	ldr	r3, [r7, #24]
   81d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81d72:	2b01      	cmp	r3, #1
   81d74:	d101      	bne.n	81d7a <xQueueGenericSendFromISR+0x4e>
   81d76:	2301      	movs	r3, #1
   81d78:	e000      	b.n	81d7c <xQueueGenericSendFromISR+0x50>
   81d7a:	2300      	movs	r3, #0
   81d7c:	2b00      	cmp	r3, #0
   81d7e:	d102      	bne.n	81d86 <xQueueGenericSendFromISR+0x5a>
   81d80:	4b24      	ldr	r3, [pc, #144]	; (81e14 <xQueueGenericSendFromISR+0xe8>)
   81d82:	4798      	blx	r3
   81d84:	e7fe      	b.n	81d84 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   81d86:	4b24      	ldr	r3, [pc, #144]	; (81e18 <xQueueGenericSendFromISR+0xec>)
   81d88:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81d8a:	4b22      	ldr	r3, [pc, #136]	; (81e14 <xQueueGenericSendFromISR+0xe8>)
   81d8c:	4798      	blx	r3
   81d8e:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   81d90:	69bb      	ldr	r3, [r7, #24]
   81d92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81d94:	69bb      	ldr	r3, [r7, #24]
   81d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81d98:	429a      	cmp	r2, r3
   81d9a:	d302      	bcc.n	81da2 <xQueueGenericSendFromISR+0x76>
   81d9c:	683b      	ldr	r3, [r7, #0]
   81d9e:	2b02      	cmp	r3, #2
   81da0:	d12d      	bne.n	81dfe <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   81da2:	69b8      	ldr	r0, [r7, #24]
   81da4:	68b9      	ldr	r1, [r7, #8]
   81da6:	683a      	ldr	r2, [r7, #0]
   81da8:	4b1c      	ldr	r3, [pc, #112]	; (81e1c <xQueueGenericSendFromISR+0xf0>)
   81daa:	4798      	blx	r3
   81dac:	4603      	mov	r3, r0
   81dae:	2b00      	cmp	r3, #0
   81db0:	d005      	beq.n	81dbe <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   81db2:	687b      	ldr	r3, [r7, #4]
   81db4:	2b00      	cmp	r3, #0
   81db6:	d002      	beq.n	81dbe <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   81db8:	687b      	ldr	r3, [r7, #4]
   81dba:	2201      	movs	r2, #1
   81dbc:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81dbe:	69bb      	ldr	r3, [r7, #24]
   81dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
   81dc6:	d112      	bne.n	81dee <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81dc8:	69bb      	ldr	r3, [r7, #24]
   81dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81dcc:	2b00      	cmp	r3, #0
   81dce:	d013      	beq.n	81df8 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81dd0:	69bb      	ldr	r3, [r7, #24]
   81dd2:	3324      	adds	r3, #36	; 0x24
   81dd4:	4618      	mov	r0, r3
   81dd6:	4b12      	ldr	r3, [pc, #72]	; (81e20 <xQueueGenericSendFromISR+0xf4>)
   81dd8:	4798      	blx	r3
   81dda:	4603      	mov	r3, r0
   81ddc:	2b00      	cmp	r3, #0
   81dde:	d00b      	beq.n	81df8 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   81de0:	687b      	ldr	r3, [r7, #4]
   81de2:	2b00      	cmp	r3, #0
   81de4:	d008      	beq.n	81df8 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   81de6:	687b      	ldr	r3, [r7, #4]
   81de8:	2201      	movs	r2, #1
   81dea:	601a      	str	r2, [r3, #0]
   81dec:	e004      	b.n	81df8 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81dee:	69bb      	ldr	r3, [r7, #24]
   81df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81df2:	1c5a      	adds	r2, r3, #1
   81df4:	69bb      	ldr	r3, [r7, #24]
   81df6:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   81df8:	2301      	movs	r3, #1
   81dfa:	61fb      	str	r3, [r7, #28]
   81dfc:	e001      	b.n	81e02 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81dfe:	2300      	movs	r3, #0
   81e00:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81e02:	6978      	ldr	r0, [r7, #20]
   81e04:	4b07      	ldr	r3, [pc, #28]	; (81e24 <xQueueGenericSendFromISR+0xf8>)
   81e06:	4798      	blx	r3

	return xReturn;
   81e08:	69fb      	ldr	r3, [r7, #28]
}
   81e0a:	4618      	mov	r0, r3
   81e0c:	3720      	adds	r7, #32
   81e0e:	46bd      	mov	sp, r7
   81e10:	bd80      	pop	{r7, pc}
   81e12:	bf00      	nop
   81e14:	0008139d 	.word	0x0008139d
   81e18:	00081465 	.word	0x00081465
   81e1c:	00082125 	.word	0x00082125
   81e20:	0008304d 	.word	0x0008304d
   81e24:	000813b1 	.word	0x000813b1

00081e28 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   81e28:	b580      	push	{r7, lr}
   81e2a:	b08a      	sub	sp, #40	; 0x28
   81e2c:	af00      	add	r7, sp, #0
   81e2e:	60f8      	str	r0, [r7, #12]
   81e30:	60b9      	str	r1, [r7, #8]
   81e32:	607a      	str	r2, [r7, #4]
   81e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   81e36:	2300      	movs	r3, #0
   81e38:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   81e3a:	68fb      	ldr	r3, [r7, #12]
   81e3c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   81e3e:	6a3b      	ldr	r3, [r7, #32]
   81e40:	2b00      	cmp	r3, #0
   81e42:	d102      	bne.n	81e4a <xQueueGenericReceive+0x22>
   81e44:	4b67      	ldr	r3, [pc, #412]	; (81fe4 <xQueueGenericReceive+0x1bc>)
   81e46:	4798      	blx	r3
   81e48:	e7fe      	b.n	81e48 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   81e4a:	68bb      	ldr	r3, [r7, #8]
   81e4c:	2b00      	cmp	r3, #0
   81e4e:	d103      	bne.n	81e58 <xQueueGenericReceive+0x30>
   81e50:	6a3b      	ldr	r3, [r7, #32]
   81e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   81e54:	2b00      	cmp	r3, #0
   81e56:	d101      	bne.n	81e5c <xQueueGenericReceive+0x34>
   81e58:	2301      	movs	r3, #1
   81e5a:	e000      	b.n	81e5e <xQueueGenericReceive+0x36>
   81e5c:	2300      	movs	r3, #0
   81e5e:	2b00      	cmp	r3, #0
   81e60:	d102      	bne.n	81e68 <xQueueGenericReceive+0x40>
   81e62:	4b60      	ldr	r3, [pc, #384]	; (81fe4 <xQueueGenericReceive+0x1bc>)
   81e64:	4798      	blx	r3
   81e66:	e7fe      	b.n	81e66 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   81e68:	4b5f      	ldr	r3, [pc, #380]	; (81fe8 <xQueueGenericReceive+0x1c0>)
   81e6a:	4798      	blx	r3
   81e6c:	4603      	mov	r3, r0
   81e6e:	2b00      	cmp	r3, #0
   81e70:	d102      	bne.n	81e78 <xQueueGenericReceive+0x50>
   81e72:	687b      	ldr	r3, [r7, #4]
   81e74:	2b00      	cmp	r3, #0
   81e76:	d101      	bne.n	81e7c <xQueueGenericReceive+0x54>
   81e78:	2301      	movs	r3, #1
   81e7a:	e000      	b.n	81e7e <xQueueGenericReceive+0x56>
   81e7c:	2300      	movs	r3, #0
   81e7e:	2b00      	cmp	r3, #0
   81e80:	d102      	bne.n	81e88 <xQueueGenericReceive+0x60>
   81e82:	4b58      	ldr	r3, [pc, #352]	; (81fe4 <xQueueGenericReceive+0x1bc>)
   81e84:	4798      	blx	r3
   81e86:	e7fe      	b.n	81e86 <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81e88:	4b58      	ldr	r3, [pc, #352]	; (81fec <xQueueGenericReceive+0x1c4>)
   81e8a:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   81e8c:	6a3b      	ldr	r3, [r7, #32]
   81e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81e90:	2b00      	cmp	r3, #0
   81e92:	d03b      	beq.n	81f0c <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   81e94:	6a3b      	ldr	r3, [r7, #32]
   81e96:	68db      	ldr	r3, [r3, #12]
   81e98:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81e9a:	6a38      	ldr	r0, [r7, #32]
   81e9c:	68b9      	ldr	r1, [r7, #8]
   81e9e:	4b54      	ldr	r3, [pc, #336]	; (81ff0 <xQueueGenericReceive+0x1c8>)
   81ea0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81ea2:	683b      	ldr	r3, [r7, #0]
   81ea4:	2b00      	cmp	r3, #0
   81ea6:	d11c      	bne.n	81ee2 <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   81ea8:	6a3b      	ldr	r3, [r7, #32]
   81eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   81eac:	1e5a      	subs	r2, r3, #1
   81eae:	6a3b      	ldr	r3, [r7, #32]
   81eb0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81eb2:	6a3b      	ldr	r3, [r7, #32]
   81eb4:	681b      	ldr	r3, [r3, #0]
   81eb6:	2b00      	cmp	r3, #0
   81eb8:	d104      	bne.n	81ec4 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   81eba:	4b4e      	ldr	r3, [pc, #312]	; (81ff4 <xQueueGenericReceive+0x1cc>)
   81ebc:	4798      	blx	r3
   81ebe:	4602      	mov	r2, r0
   81ec0:	6a3b      	ldr	r3, [r7, #32]
   81ec2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81ec4:	6a3b      	ldr	r3, [r7, #32]
   81ec6:	691b      	ldr	r3, [r3, #16]
   81ec8:	2b00      	cmp	r3, #0
   81eca:	d01b      	beq.n	81f04 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81ecc:	6a3b      	ldr	r3, [r7, #32]
   81ece:	3310      	adds	r3, #16
   81ed0:	4618      	mov	r0, r3
   81ed2:	4b49      	ldr	r3, [pc, #292]	; (81ff8 <xQueueGenericReceive+0x1d0>)
   81ed4:	4798      	blx	r3
   81ed6:	4603      	mov	r3, r0
   81ed8:	2b01      	cmp	r3, #1
   81eda:	d113      	bne.n	81f04 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   81edc:	4b47      	ldr	r3, [pc, #284]	; (81ffc <xQueueGenericReceive+0x1d4>)
   81ede:	4798      	blx	r3
   81ee0:	e010      	b.n	81f04 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   81ee2:	6a3b      	ldr	r3, [r7, #32]
   81ee4:	69fa      	ldr	r2, [r7, #28]
   81ee6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81ee8:	6a3b      	ldr	r3, [r7, #32]
   81eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81eec:	2b00      	cmp	r3, #0
   81eee:	d009      	beq.n	81f04 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81ef0:	6a3b      	ldr	r3, [r7, #32]
   81ef2:	3324      	adds	r3, #36	; 0x24
   81ef4:	4618      	mov	r0, r3
   81ef6:	4b40      	ldr	r3, [pc, #256]	; (81ff8 <xQueueGenericReceive+0x1d0>)
   81ef8:	4798      	blx	r3
   81efa:	4603      	mov	r3, r0
   81efc:	2b00      	cmp	r3, #0
   81efe:	d001      	beq.n	81f04 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   81f00:	4b3e      	ldr	r3, [pc, #248]	; (81ffc <xQueueGenericReceive+0x1d4>)
   81f02:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   81f04:	4b3e      	ldr	r3, [pc, #248]	; (82000 <xQueueGenericReceive+0x1d8>)
   81f06:	4798      	blx	r3
				return pdPASS;
   81f08:	2301      	movs	r3, #1
   81f0a:	e066      	b.n	81fda <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   81f0c:	687b      	ldr	r3, [r7, #4]
   81f0e:	2b00      	cmp	r3, #0
   81f10:	d103      	bne.n	81f1a <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81f12:	4b3b      	ldr	r3, [pc, #236]	; (82000 <xQueueGenericReceive+0x1d8>)
   81f14:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81f16:	2300      	movs	r3, #0
   81f18:	e05f      	b.n	81fda <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   81f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f1c:	2b00      	cmp	r3, #0
   81f1e:	d106      	bne.n	81f2e <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81f20:	f107 0314 	add.w	r3, r7, #20
   81f24:	4618      	mov	r0, r3
   81f26:	4b37      	ldr	r3, [pc, #220]	; (82004 <xQueueGenericReceive+0x1dc>)
   81f28:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   81f2a:	2301      	movs	r3, #1
   81f2c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   81f2e:	4b34      	ldr	r3, [pc, #208]	; (82000 <xQueueGenericReceive+0x1d8>)
   81f30:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81f32:	4b35      	ldr	r3, [pc, #212]	; (82008 <xQueueGenericReceive+0x1e0>)
   81f34:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81f36:	4b2d      	ldr	r3, [pc, #180]	; (81fec <xQueueGenericReceive+0x1c4>)
   81f38:	4798      	blx	r3
   81f3a:	6a3b      	ldr	r3, [r7, #32]
   81f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81f42:	d102      	bne.n	81f4a <xQueueGenericReceive+0x122>
   81f44:	6a3b      	ldr	r3, [r7, #32]
   81f46:	2200      	movs	r2, #0
   81f48:	645a      	str	r2, [r3, #68]	; 0x44
   81f4a:	6a3b      	ldr	r3, [r7, #32]
   81f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   81f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81f52:	d102      	bne.n	81f5a <xQueueGenericReceive+0x132>
   81f54:	6a3b      	ldr	r3, [r7, #32]
   81f56:	2200      	movs	r2, #0
   81f58:	649a      	str	r2, [r3, #72]	; 0x48
   81f5a:	4b29      	ldr	r3, [pc, #164]	; (82000 <xQueueGenericReceive+0x1d8>)
   81f5c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81f5e:	f107 0214 	add.w	r2, r7, #20
   81f62:	1d3b      	adds	r3, r7, #4
   81f64:	4610      	mov	r0, r2
   81f66:	4619      	mov	r1, r3
   81f68:	4b28      	ldr	r3, [pc, #160]	; (8200c <xQueueGenericReceive+0x1e4>)
   81f6a:	4798      	blx	r3
   81f6c:	4603      	mov	r3, r0
   81f6e:	2b00      	cmp	r3, #0
   81f70:	d12b      	bne.n	81fca <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81f72:	6a38      	ldr	r0, [r7, #32]
   81f74:	4b26      	ldr	r3, [pc, #152]	; (82010 <xQueueGenericReceive+0x1e8>)
   81f76:	4798      	blx	r3
   81f78:	4603      	mov	r3, r0
   81f7a:	2b00      	cmp	r3, #0
   81f7c:	d01f      	beq.n	81fbe <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81f7e:	6a3b      	ldr	r3, [r7, #32]
   81f80:	681b      	ldr	r3, [r3, #0]
   81f82:	2b00      	cmp	r3, #0
   81f84:	d108      	bne.n	81f98 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   81f86:	4b19      	ldr	r3, [pc, #100]	; (81fec <xQueueGenericReceive+0x1c4>)
   81f88:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81f8a:	6a3b      	ldr	r3, [r7, #32]
   81f8c:	685b      	ldr	r3, [r3, #4]
   81f8e:	4618      	mov	r0, r3
   81f90:	4b20      	ldr	r3, [pc, #128]	; (82014 <xQueueGenericReceive+0x1ec>)
   81f92:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   81f94:	4b1a      	ldr	r3, [pc, #104]	; (82000 <xQueueGenericReceive+0x1d8>)
   81f96:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81f98:	6a3b      	ldr	r3, [r7, #32]
   81f9a:	f103 0224 	add.w	r2, r3, #36	; 0x24
   81f9e:	687b      	ldr	r3, [r7, #4]
   81fa0:	4610      	mov	r0, r2
   81fa2:	4619      	mov	r1, r3
   81fa4:	4b1c      	ldr	r3, [pc, #112]	; (82018 <xQueueGenericReceive+0x1f0>)
   81fa6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81fa8:	6a38      	ldr	r0, [r7, #32]
   81faa:	4b1c      	ldr	r3, [pc, #112]	; (8201c <xQueueGenericReceive+0x1f4>)
   81fac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81fae:	4b1c      	ldr	r3, [pc, #112]	; (82020 <xQueueGenericReceive+0x1f8>)
   81fb0:	4798      	blx	r3
   81fb2:	4603      	mov	r3, r0
   81fb4:	2b00      	cmp	r3, #0
   81fb6:	d10f      	bne.n	81fd8 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   81fb8:	4b10      	ldr	r3, [pc, #64]	; (81ffc <xQueueGenericReceive+0x1d4>)
   81fba:	4798      	blx	r3
   81fbc:	e00c      	b.n	81fd8 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81fbe:	6a38      	ldr	r0, [r7, #32]
   81fc0:	4b16      	ldr	r3, [pc, #88]	; (8201c <xQueueGenericReceive+0x1f4>)
   81fc2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81fc4:	4b16      	ldr	r3, [pc, #88]	; (82020 <xQueueGenericReceive+0x1f8>)
   81fc6:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   81fc8:	e75e      	b.n	81e88 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81fca:	6a38      	ldr	r0, [r7, #32]
   81fcc:	4b13      	ldr	r3, [pc, #76]	; (8201c <xQueueGenericReceive+0x1f4>)
   81fce:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81fd0:	4b13      	ldr	r3, [pc, #76]	; (82020 <xQueueGenericReceive+0x1f8>)
   81fd2:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81fd4:	2300      	movs	r3, #0
   81fd6:	e000      	b.n	81fda <xQueueGenericReceive+0x1b2>
		}
	}
   81fd8:	e756      	b.n	81e88 <xQueueGenericReceive+0x60>
}
   81fda:	4618      	mov	r0, r3
   81fdc:	3728      	adds	r7, #40	; 0x28
   81fde:	46bd      	mov	sp, r7
   81fe0:	bd80      	pop	{r7, pc}
   81fe2:	bf00      	nop
   81fe4:	0008139d 	.word	0x0008139d
   81fe8:	00083545 	.word	0x00083545
   81fec:	00081321 	.word	0x00081321
   81ff0:	00082209 	.word	0x00082209
   81ff4:	00083759 	.word	0x00083759
   81ff8:	0008304d 	.word	0x0008304d
   81ffc:	00081301 	.word	0x00081301
   82000:	00081365 	.word	0x00081365
   82004:	0008310d 	.word	0x0008310d
   82008:	00082b31 	.word	0x00082b31
   8200c:	00083145 	.word	0x00083145
   82010:	00082301 	.word	0x00082301
   82014:	00083581 	.word	0x00083581
   82018:	00082f2d 	.word	0x00082f2d
   8201c:	00082259 	.word	0x00082259
   82020:	00082b4d 	.word	0x00082b4d

00082024 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
   82024:	b580      	push	{r7, lr}
   82026:	b088      	sub	sp, #32
   82028:	af00      	add	r7, sp, #0
   8202a:	60f8      	str	r0, [r7, #12]
   8202c:	60b9      	str	r1, [r7, #8]
   8202e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82030:	68fb      	ldr	r3, [r7, #12]
   82032:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   82034:	69bb      	ldr	r3, [r7, #24]
   82036:	2b00      	cmp	r3, #0
   82038:	d102      	bne.n	82040 <xQueueReceiveFromISR+0x1c>
   8203a:	4b27      	ldr	r3, [pc, #156]	; (820d8 <xQueueReceiveFromISR+0xb4>)
   8203c:	4798      	blx	r3
   8203e:	e7fe      	b.n	8203e <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   82040:	68bb      	ldr	r3, [r7, #8]
   82042:	2b00      	cmp	r3, #0
   82044:	d103      	bne.n	8204e <xQueueReceiveFromISR+0x2a>
   82046:	69bb      	ldr	r3, [r7, #24]
   82048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8204a:	2b00      	cmp	r3, #0
   8204c:	d101      	bne.n	82052 <xQueueReceiveFromISR+0x2e>
   8204e:	2301      	movs	r3, #1
   82050:	e000      	b.n	82054 <xQueueReceiveFromISR+0x30>
   82052:	2300      	movs	r3, #0
   82054:	2b00      	cmp	r3, #0
   82056:	d102      	bne.n	8205e <xQueueReceiveFromISR+0x3a>
   82058:	4b1f      	ldr	r3, [pc, #124]	; (820d8 <xQueueReceiveFromISR+0xb4>)
   8205a:	4798      	blx	r3
   8205c:	e7fe      	b.n	8205c <xQueueReceiveFromISR+0x38>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   8205e:	4b1f      	ldr	r3, [pc, #124]	; (820dc <xQueueReceiveFromISR+0xb8>)
   82060:	4798      	blx	r3

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   82062:	4b1d      	ldr	r3, [pc, #116]	; (820d8 <xQueueReceiveFromISR+0xb4>)
   82064:	4798      	blx	r3
   82066:	6178      	str	r0, [r7, #20]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   82068:	69bb      	ldr	r3, [r7, #24]
   8206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8206c:	2b00      	cmp	r3, #0
   8206e:	d028      	beq.n	820c2 <xQueueReceiveFromISR+0x9e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   82070:	69b8      	ldr	r0, [r7, #24]
   82072:	68b9      	ldr	r1, [r7, #8]
   82074:	4b1a      	ldr	r3, [pc, #104]	; (820e0 <xQueueReceiveFromISR+0xbc>)
   82076:	4798      	blx	r3
			--( pxQueue->uxMessagesWaiting );
   82078:	69bb      	ldr	r3, [r7, #24]
   8207a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8207c:	1e5a      	subs	r2, r3, #1
   8207e:	69bb      	ldr	r3, [r7, #24]
   82080:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   82082:	69bb      	ldr	r3, [r7, #24]
   82084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82086:	f1b3 3fff 	cmp.w	r3, #4294967295
   8208a:	d112      	bne.n	820b2 <xQueueReceiveFromISR+0x8e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8208c:	69bb      	ldr	r3, [r7, #24]
   8208e:	691b      	ldr	r3, [r3, #16]
   82090:	2b00      	cmp	r3, #0
   82092:	d013      	beq.n	820bc <xQueueReceiveFromISR+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   82094:	69bb      	ldr	r3, [r7, #24]
   82096:	3310      	adds	r3, #16
   82098:	4618      	mov	r0, r3
   8209a:	4b12      	ldr	r3, [pc, #72]	; (820e4 <xQueueReceiveFromISR+0xc0>)
   8209c:	4798      	blx	r3
   8209e:	4603      	mov	r3, r0
   820a0:	2b00      	cmp	r3, #0
   820a2:	d00b      	beq.n	820bc <xQueueReceiveFromISR+0x98>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   820a4:	687b      	ldr	r3, [r7, #4]
   820a6:	2b00      	cmp	r3, #0
   820a8:	d008      	beq.n	820bc <xQueueReceiveFromISR+0x98>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   820aa:	687b      	ldr	r3, [r7, #4]
   820ac:	2201      	movs	r2, #1
   820ae:	601a      	str	r2, [r3, #0]
   820b0:	e004      	b.n	820bc <xQueueReceiveFromISR+0x98>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   820b2:	69bb      	ldr	r3, [r7, #24]
   820b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   820b6:	1c5a      	adds	r2, r3, #1
   820b8:	69bb      	ldr	r3, [r7, #24]
   820ba:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   820bc:	2301      	movs	r3, #1
   820be:	61fb      	str	r3, [r7, #28]
   820c0:	e001      	b.n	820c6 <xQueueReceiveFromISR+0xa2>
		}
		else
		{
			xReturn = pdFAIL;
   820c2:	2300      	movs	r3, #0
   820c4:	61fb      	str	r3, [r7, #28]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   820c6:	6978      	ldr	r0, [r7, #20]
   820c8:	4b07      	ldr	r3, [pc, #28]	; (820e8 <xQueueReceiveFromISR+0xc4>)
   820ca:	4798      	blx	r3

	return xReturn;
   820cc:	69fb      	ldr	r3, [r7, #28]
}
   820ce:	4618      	mov	r0, r3
   820d0:	3720      	adds	r7, #32
   820d2:	46bd      	mov	sp, r7
   820d4:	bd80      	pop	{r7, pc}
   820d6:	bf00      	nop
   820d8:	0008139d 	.word	0x0008139d
   820dc:	00081465 	.word	0x00081465
   820e0:	00082209 	.word	0x00082209
   820e4:	0008304d 	.word	0x0008304d
   820e8:	000813b1 	.word	0x000813b1

000820ec <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
   820ec:	b580      	push	{r7, lr}
   820ee:	b084      	sub	sp, #16
   820f0:	af00      	add	r7, sp, #0
   820f2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
   820f4:	687b      	ldr	r3, [r7, #4]
   820f6:	2b00      	cmp	r3, #0
   820f8:	d102      	bne.n	82100 <uxQueueMessagesWaiting+0x14>
   820fa:	4b07      	ldr	r3, [pc, #28]	; (82118 <uxQueueMessagesWaiting+0x2c>)
   820fc:	4798      	blx	r3
   820fe:	e7fe      	b.n	820fe <uxQueueMessagesWaiting+0x12>

	taskENTER_CRITICAL();
   82100:	4b06      	ldr	r3, [pc, #24]	; (8211c <uxQueueMessagesWaiting+0x30>)
   82102:	4798      	blx	r3
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
   82104:	687b      	ldr	r3, [r7, #4]
   82106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82108:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
   8210a:	4b05      	ldr	r3, [pc, #20]	; (82120 <uxQueueMessagesWaiting+0x34>)
   8210c:	4798      	blx	r3

	return uxReturn;
   8210e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
   82110:	4618      	mov	r0, r3
   82112:	3710      	adds	r7, #16
   82114:	46bd      	mov	sp, r7
   82116:	bd80      	pop	{r7, pc}
   82118:	0008139d 	.word	0x0008139d
   8211c:	00081321 	.word	0x00081321
   82120:	00081365 	.word	0x00081365

00082124 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   82124:	b580      	push	{r7, lr}
   82126:	b086      	sub	sp, #24
   82128:	af00      	add	r7, sp, #0
   8212a:	60f8      	str	r0, [r7, #12]
   8212c:	60b9      	str	r1, [r7, #8]
   8212e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   82130:	2300      	movs	r3, #0
   82132:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   82134:	68fb      	ldr	r3, [r7, #12]
   82136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82138:	2b00      	cmp	r3, #0
   8213a:	d10d      	bne.n	82158 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8213c:	68fb      	ldr	r3, [r7, #12]
   8213e:	681b      	ldr	r3, [r3, #0]
   82140:	2b00      	cmp	r3, #0
   82142:	d152      	bne.n	821ea <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   82144:	68fb      	ldr	r3, [r7, #12]
   82146:	685b      	ldr	r3, [r3, #4]
   82148:	4618      	mov	r0, r3
   8214a:	4b2d      	ldr	r3, [pc, #180]	; (82200 <prvCopyDataToQueue+0xdc>)
   8214c:	4798      	blx	r3
   8214e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   82150:	68fb      	ldr	r3, [r7, #12]
   82152:	2200      	movs	r2, #0
   82154:	605a      	str	r2, [r3, #4]
   82156:	e048      	b.n	821ea <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   82158:	687b      	ldr	r3, [r7, #4]
   8215a:	2b00      	cmp	r3, #0
   8215c:	d11a      	bne.n	82194 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   8215e:	68fb      	ldr	r3, [r7, #12]
   82160:	689a      	ldr	r2, [r3, #8]
   82162:	68fb      	ldr	r3, [r7, #12]
   82164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82166:	4610      	mov	r0, r2
   82168:	68b9      	ldr	r1, [r7, #8]
   8216a:	461a      	mov	r2, r3
   8216c:	4b25      	ldr	r3, [pc, #148]	; (82204 <prvCopyDataToQueue+0xe0>)
   8216e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   82170:	68fb      	ldr	r3, [r7, #12]
   82172:	689a      	ldr	r2, [r3, #8]
   82174:	68fb      	ldr	r3, [r7, #12]
   82176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82178:	441a      	add	r2, r3
   8217a:	68fb      	ldr	r3, [r7, #12]
   8217c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   8217e:	68fb      	ldr	r3, [r7, #12]
   82180:	689a      	ldr	r2, [r3, #8]
   82182:	68fb      	ldr	r3, [r7, #12]
   82184:	685b      	ldr	r3, [r3, #4]
   82186:	429a      	cmp	r2, r3
   82188:	d32f      	bcc.n	821ea <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8218a:	68fb      	ldr	r3, [r7, #12]
   8218c:	681a      	ldr	r2, [r3, #0]
   8218e:	68fb      	ldr	r3, [r7, #12]
   82190:	609a      	str	r2, [r3, #8]
   82192:	e02a      	b.n	821ea <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82194:	68fb      	ldr	r3, [r7, #12]
   82196:	68da      	ldr	r2, [r3, #12]
   82198:	68fb      	ldr	r3, [r7, #12]
   8219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8219c:	4610      	mov	r0, r2
   8219e:	68b9      	ldr	r1, [r7, #8]
   821a0:	461a      	mov	r2, r3
   821a2:	4b18      	ldr	r3, [pc, #96]	; (82204 <prvCopyDataToQueue+0xe0>)
   821a4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   821a6:	68fb      	ldr	r3, [r7, #12]
   821a8:	68da      	ldr	r2, [r3, #12]
   821aa:	68fb      	ldr	r3, [r7, #12]
   821ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   821ae:	425b      	negs	r3, r3
   821b0:	441a      	add	r2, r3
   821b2:	68fb      	ldr	r3, [r7, #12]
   821b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   821b6:	68fb      	ldr	r3, [r7, #12]
   821b8:	68da      	ldr	r2, [r3, #12]
   821ba:	68fb      	ldr	r3, [r7, #12]
   821bc:	681b      	ldr	r3, [r3, #0]
   821be:	429a      	cmp	r2, r3
   821c0:	d207      	bcs.n	821d2 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   821c2:	68fb      	ldr	r3, [r7, #12]
   821c4:	685a      	ldr	r2, [r3, #4]
   821c6:	68fb      	ldr	r3, [r7, #12]
   821c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   821ca:	425b      	negs	r3, r3
   821cc:	441a      	add	r2, r3
   821ce:	68fb      	ldr	r3, [r7, #12]
   821d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   821d2:	687b      	ldr	r3, [r7, #4]
   821d4:	2b02      	cmp	r3, #2
   821d6:	d108      	bne.n	821ea <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   821d8:	68fb      	ldr	r3, [r7, #12]
   821da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   821dc:	2b00      	cmp	r3, #0
   821de:	d004      	beq.n	821ea <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   821e0:	68fb      	ldr	r3, [r7, #12]
   821e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   821e4:	1e5a      	subs	r2, r3, #1
   821e6:	68fb      	ldr	r3, [r7, #12]
   821e8:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   821ea:	68fb      	ldr	r3, [r7, #12]
   821ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   821ee:	1c5a      	adds	r2, r3, #1
   821f0:	68fb      	ldr	r3, [r7, #12]
   821f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   821f4:	697b      	ldr	r3, [r7, #20]
}
   821f6:	4618      	mov	r0, r3
   821f8:	3718      	adds	r7, #24
   821fa:	46bd      	mov	sp, r7
   821fc:	bd80      	pop	{r7, pc}
   821fe:	bf00      	nop
   82200:	00083675 	.word	0x00083675
   82204:	00086421 	.word	0x00086421

00082208 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   82208:	b580      	push	{r7, lr}
   8220a:	b082      	sub	sp, #8
   8220c:	af00      	add	r7, sp, #0
   8220e:	6078      	str	r0, [r7, #4]
   82210:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   82212:	687b      	ldr	r3, [r7, #4]
   82214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82216:	2b00      	cmp	r3, #0
   82218:	d019      	beq.n	8224e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   8221a:	687b      	ldr	r3, [r7, #4]
   8221c:	68da      	ldr	r2, [r3, #12]
   8221e:	687b      	ldr	r3, [r7, #4]
   82220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82222:	441a      	add	r2, r3
   82224:	687b      	ldr	r3, [r7, #4]
   82226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   82228:	687b      	ldr	r3, [r7, #4]
   8222a:	68da      	ldr	r2, [r3, #12]
   8222c:	687b      	ldr	r3, [r7, #4]
   8222e:	685b      	ldr	r3, [r3, #4]
   82230:	429a      	cmp	r2, r3
   82232:	d303      	bcc.n	8223c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   82234:	687b      	ldr	r3, [r7, #4]
   82236:	681a      	ldr	r2, [r3, #0]
   82238:	687b      	ldr	r3, [r7, #4]
   8223a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   8223c:	687b      	ldr	r3, [r7, #4]
   8223e:	68da      	ldr	r2, [r3, #12]
   82240:	687b      	ldr	r3, [r7, #4]
   82242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82244:	6838      	ldr	r0, [r7, #0]
   82246:	4611      	mov	r1, r2
   82248:	461a      	mov	r2, r3
   8224a:	4b02      	ldr	r3, [pc, #8]	; (82254 <prvCopyDataFromQueue+0x4c>)
   8224c:	4798      	blx	r3
	}
}
   8224e:	3708      	adds	r7, #8
   82250:	46bd      	mov	sp, r7
   82252:	bd80      	pop	{r7, pc}
   82254:	00086421 	.word	0x00086421

00082258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   82258:	b580      	push	{r7, lr}
   8225a:	b082      	sub	sp, #8
   8225c:	af00      	add	r7, sp, #0
   8225e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   82260:	4b23      	ldr	r3, [pc, #140]	; (822f0 <prvUnlockQueue+0x98>)
   82262:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   82264:	e014      	b.n	82290 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82266:	687b      	ldr	r3, [r7, #4]
   82268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8226a:	2b00      	cmp	r3, #0
   8226c:	d00a      	beq.n	82284 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8226e:	687b      	ldr	r3, [r7, #4]
   82270:	3324      	adds	r3, #36	; 0x24
   82272:	4618      	mov	r0, r3
   82274:	4b1f      	ldr	r3, [pc, #124]	; (822f4 <prvUnlockQueue+0x9c>)
   82276:	4798      	blx	r3
   82278:	4603      	mov	r3, r0
   8227a:	2b00      	cmp	r3, #0
   8227c:	d003      	beq.n	82286 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   8227e:	4b1e      	ldr	r3, [pc, #120]	; (822f8 <prvUnlockQueue+0xa0>)
   82280:	4798      	blx	r3
   82282:	e000      	b.n	82286 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   82284:	e008      	b.n	82298 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   82286:	687b      	ldr	r3, [r7, #4]
   82288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8228a:	1e5a      	subs	r2, r3, #1
   8228c:	687b      	ldr	r3, [r7, #4]
   8228e:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   82290:	687b      	ldr	r3, [r7, #4]
   82292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82294:	2b00      	cmp	r3, #0
   82296:	dce6      	bgt.n	82266 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   82298:	687b      	ldr	r3, [r7, #4]
   8229a:	f04f 32ff 	mov.w	r2, #4294967295
   8229e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   822a0:	4b16      	ldr	r3, [pc, #88]	; (822fc <prvUnlockQueue+0xa4>)
   822a2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   822a4:	4b12      	ldr	r3, [pc, #72]	; (822f0 <prvUnlockQueue+0x98>)
   822a6:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   822a8:	e014      	b.n	822d4 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   822aa:	687b      	ldr	r3, [r7, #4]
   822ac:	691b      	ldr	r3, [r3, #16]
   822ae:	2b00      	cmp	r3, #0
   822b0:	d00f      	beq.n	822d2 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   822b2:	687b      	ldr	r3, [r7, #4]
   822b4:	3310      	adds	r3, #16
   822b6:	4618      	mov	r0, r3
   822b8:	4b0e      	ldr	r3, [pc, #56]	; (822f4 <prvUnlockQueue+0x9c>)
   822ba:	4798      	blx	r3
   822bc:	4603      	mov	r3, r0
   822be:	2b00      	cmp	r3, #0
   822c0:	d001      	beq.n	822c6 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   822c2:	4b0d      	ldr	r3, [pc, #52]	; (822f8 <prvUnlockQueue+0xa0>)
   822c4:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   822c6:	687b      	ldr	r3, [r7, #4]
   822c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   822ca:	1e5a      	subs	r2, r3, #1
   822cc:	687b      	ldr	r3, [r7, #4]
   822ce:	645a      	str	r2, [r3, #68]	; 0x44
   822d0:	e000      	b.n	822d4 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   822d2:	e003      	b.n	822dc <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   822d4:	687b      	ldr	r3, [r7, #4]
   822d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   822d8:	2b00      	cmp	r3, #0
   822da:	dce6      	bgt.n	822aa <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   822dc:	687b      	ldr	r3, [r7, #4]
   822de:	f04f 32ff 	mov.w	r2, #4294967295
   822e2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   822e4:	4b05      	ldr	r3, [pc, #20]	; (822fc <prvUnlockQueue+0xa4>)
   822e6:	4798      	blx	r3
}
   822e8:	3708      	adds	r7, #8
   822ea:	46bd      	mov	sp, r7
   822ec:	bd80      	pop	{r7, pc}
   822ee:	bf00      	nop
   822f0:	00081321 	.word	0x00081321
   822f4:	0008304d 	.word	0x0008304d
   822f8:	000831f5 	.word	0x000831f5
   822fc:	00081365 	.word	0x00081365

00082300 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   82300:	b580      	push	{r7, lr}
   82302:	b084      	sub	sp, #16
   82304:	af00      	add	r7, sp, #0
   82306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   82308:	4b08      	ldr	r3, [pc, #32]	; (8232c <prvIsQueueEmpty+0x2c>)
   8230a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   8230c:	687b      	ldr	r3, [r7, #4]
   8230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82310:	2b00      	cmp	r3, #0
   82312:	d102      	bne.n	8231a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   82314:	2301      	movs	r3, #1
   82316:	60fb      	str	r3, [r7, #12]
   82318:	e001      	b.n	8231e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   8231a:	2300      	movs	r3, #0
   8231c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8231e:	4b04      	ldr	r3, [pc, #16]	; (82330 <prvIsQueueEmpty+0x30>)
   82320:	4798      	blx	r3

	return xReturn;
   82322:	68fb      	ldr	r3, [r7, #12]
}
   82324:	4618      	mov	r0, r3
   82326:	3710      	adds	r7, #16
   82328:	46bd      	mov	sp, r7
   8232a:	bd80      	pop	{r7, pc}
   8232c:	00081321 	.word	0x00081321
   82330:	00081365 	.word	0x00081365

00082334 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   82334:	b580      	push	{r7, lr}
   82336:	b084      	sub	sp, #16
   82338:	af00      	add	r7, sp, #0
   8233a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   8233c:	4b09      	ldr	r3, [pc, #36]	; (82364 <prvIsQueueFull+0x30>)
   8233e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   82340:	687b      	ldr	r3, [r7, #4]
   82342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82344:	687b      	ldr	r3, [r7, #4]
   82346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82348:	429a      	cmp	r2, r3
   8234a:	d102      	bne.n	82352 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   8234c:	2301      	movs	r3, #1
   8234e:	60fb      	str	r3, [r7, #12]
   82350:	e001      	b.n	82356 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   82352:	2300      	movs	r3, #0
   82354:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   82356:	4b04      	ldr	r3, [pc, #16]	; (82368 <prvIsQueueFull+0x34>)
   82358:	4798      	blx	r3

	return xReturn;
   8235a:	68fb      	ldr	r3, [r7, #12]
}
   8235c:	4618      	mov	r0, r3
   8235e:	3710      	adds	r7, #16
   82360:	46bd      	mov	sp, r7
   82362:	bd80      	pop	{r7, pc}
   82364:	00081321 	.word	0x00081321
   82368:	00081365 	.word	0x00081365

0008236c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   8236c:	b580      	push	{r7, lr}
   8236e:	b084      	sub	sp, #16
   82370:	af00      	add	r7, sp, #0
   82372:	6078      	str	r0, [r7, #4]
   82374:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82376:	687b      	ldr	r3, [r7, #4]
   82378:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8237a:	4b12      	ldr	r3, [pc, #72]	; (823c4 <vQueueWaitForMessageRestricted+0x58>)
   8237c:	4798      	blx	r3
   8237e:	68fb      	ldr	r3, [r7, #12]
   82380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82382:	f1b3 3fff 	cmp.w	r3, #4294967295
   82386:	d102      	bne.n	8238e <vQueueWaitForMessageRestricted+0x22>
   82388:	68fb      	ldr	r3, [r7, #12]
   8238a:	2200      	movs	r2, #0
   8238c:	645a      	str	r2, [r3, #68]	; 0x44
   8238e:	68fb      	ldr	r3, [r7, #12]
   82390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82392:	f1b3 3fff 	cmp.w	r3, #4294967295
   82396:	d102      	bne.n	8239e <vQueueWaitForMessageRestricted+0x32>
   82398:	68fb      	ldr	r3, [r7, #12]
   8239a:	2200      	movs	r2, #0
   8239c:	649a      	str	r2, [r3, #72]	; 0x48
   8239e:	4b0a      	ldr	r3, [pc, #40]	; (823c8 <vQueueWaitForMessageRestricted+0x5c>)
   823a0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   823a2:	68fb      	ldr	r3, [r7, #12]
   823a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   823a6:	2b00      	cmp	r3, #0
   823a8:	d105      	bne.n	823b6 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   823aa:	68fb      	ldr	r3, [r7, #12]
   823ac:	3324      	adds	r3, #36	; 0x24
   823ae:	4618      	mov	r0, r3
   823b0:	6839      	ldr	r1, [r7, #0]
   823b2:	4b06      	ldr	r3, [pc, #24]	; (823cc <vQueueWaitForMessageRestricted+0x60>)
   823b4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   823b6:	68f8      	ldr	r0, [r7, #12]
   823b8:	4b05      	ldr	r3, [pc, #20]	; (823d0 <vQueueWaitForMessageRestricted+0x64>)
   823ba:	4798      	blx	r3
	}
   823bc:	3710      	adds	r7, #16
   823be:	46bd      	mov	sp, r7
   823c0:	bd80      	pop	{r7, pc}
   823c2:	bf00      	nop
   823c4:	00081321 	.word	0x00081321
   823c8:	00081365 	.word	0x00081365
   823cc:	00082fcd 	.word	0x00082fcd
   823d0:	00082259 	.word	0x00082259

000823d4 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   823d4:	b590      	push	{r4, r7, lr}
   823d6:	b08b      	sub	sp, #44	; 0x2c
   823d8:	af02      	add	r7, sp, #8
   823da:	60f8      	str	r0, [r7, #12]
   823dc:	60b9      	str	r1, [r7, #8]
   823de:	603b      	str	r3, [r7, #0]
   823e0:	4613      	mov	r3, r2
   823e2:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   823e4:	68fb      	ldr	r3, [r7, #12]
   823e6:	2b00      	cmp	r3, #0
   823e8:	d102      	bne.n	823f0 <xTaskGenericCreate+0x1c>
   823ea:	4b4b      	ldr	r3, [pc, #300]	; (82518 <xTaskGenericCreate+0x144>)
   823ec:	4798      	blx	r3
   823ee:	e7fe      	b.n	823ee <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   823f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   823f2:	2b04      	cmp	r3, #4
   823f4:	d902      	bls.n	823fc <xTaskGenericCreate+0x28>
   823f6:	4b48      	ldr	r3, [pc, #288]	; (82518 <xTaskGenericCreate+0x144>)
   823f8:	4798      	blx	r3
   823fa:	e7fe      	b.n	823fa <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   823fc:	88fb      	ldrh	r3, [r7, #6]
   823fe:	4618      	mov	r0, r3
   82400:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   82402:	4b46      	ldr	r3, [pc, #280]	; (8251c <xTaskGenericCreate+0x148>)
   82404:	4798      	blx	r3
   82406:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   82408:	69bb      	ldr	r3, [r7, #24]
   8240a:	2b00      	cmp	r3, #0
   8240c:	d06d      	beq.n	824ea <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   8240e:	69bb      	ldr	r3, [r7, #24]
   82410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82412:	88fb      	ldrh	r3, [r7, #6]
   82414:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   82418:	3b01      	subs	r3, #1
   8241a:	009b      	lsls	r3, r3, #2
   8241c:	4413      	add	r3, r2
   8241e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   82420:	697b      	ldr	r3, [r7, #20]
   82422:	f023 0307 	bic.w	r3, r3, #7
   82426:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82428:	697b      	ldr	r3, [r7, #20]
   8242a:	f003 0307 	and.w	r3, r3, #7
   8242e:	2b00      	cmp	r3, #0
   82430:	d002      	beq.n	82438 <xTaskGenericCreate+0x64>
   82432:	4b39      	ldr	r3, [pc, #228]	; (82518 <xTaskGenericCreate+0x144>)
   82434:	4798      	blx	r3
   82436:	e7fe      	b.n	82436 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   82438:	88fb      	ldrh	r3, [r7, #6]
   8243a:	9300      	str	r3, [sp, #0]
   8243c:	69b8      	ldr	r0, [r7, #24]
   8243e:	68b9      	ldr	r1, [r7, #8]
   82440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   82442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82444:	4c36      	ldr	r4, [pc, #216]	; (82520 <xTaskGenericCreate+0x14c>)
   82446:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   82448:	6978      	ldr	r0, [r7, #20]
   8244a:	68f9      	ldr	r1, [r7, #12]
   8244c:	683a      	ldr	r2, [r7, #0]
   8244e:	4b35      	ldr	r3, [pc, #212]	; (82524 <xTaskGenericCreate+0x150>)
   82450:	4798      	blx	r3
   82452:	4602      	mov	r2, r0
   82454:	69bb      	ldr	r3, [r7, #24]
   82456:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   82458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8245a:	2b00      	cmp	r3, #0
   8245c:	d002      	beq.n	82464 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   8245e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   82460:	69ba      	ldr	r2, [r7, #24]
   82462:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   82464:	4b30      	ldr	r3, [pc, #192]	; (82528 <xTaskGenericCreate+0x154>)
   82466:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   82468:	4b30      	ldr	r3, [pc, #192]	; (8252c <xTaskGenericCreate+0x158>)
   8246a:	681b      	ldr	r3, [r3, #0]
   8246c:	1c5a      	adds	r2, r3, #1
   8246e:	4b2f      	ldr	r3, [pc, #188]	; (8252c <xTaskGenericCreate+0x158>)
   82470:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82472:	4b2f      	ldr	r3, [pc, #188]	; (82530 <xTaskGenericCreate+0x15c>)
   82474:	681b      	ldr	r3, [r3, #0]
   82476:	2b00      	cmp	r3, #0
   82478:	d109      	bne.n	8248e <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8247a:	4b2d      	ldr	r3, [pc, #180]	; (82530 <xTaskGenericCreate+0x15c>)
   8247c:	69ba      	ldr	r2, [r7, #24]
   8247e:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   82480:	4b2a      	ldr	r3, [pc, #168]	; (8252c <xTaskGenericCreate+0x158>)
   82482:	681b      	ldr	r3, [r3, #0]
   82484:	2b01      	cmp	r3, #1
   82486:	d10f      	bne.n	824a8 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   82488:	4b2a      	ldr	r3, [pc, #168]	; (82534 <xTaskGenericCreate+0x160>)
   8248a:	4798      	blx	r3
   8248c:	e00c      	b.n	824a8 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8248e:	4b2a      	ldr	r3, [pc, #168]	; (82538 <xTaskGenericCreate+0x164>)
   82490:	681b      	ldr	r3, [r3, #0]
   82492:	2b00      	cmp	r3, #0
   82494:	d108      	bne.n	824a8 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   82496:	4b26      	ldr	r3, [pc, #152]	; (82530 <xTaskGenericCreate+0x15c>)
   82498:	681b      	ldr	r3, [r3, #0]
   8249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8249e:	429a      	cmp	r2, r3
   824a0:	d802      	bhi.n	824a8 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   824a2:	4b23      	ldr	r3, [pc, #140]	; (82530 <xTaskGenericCreate+0x15c>)
   824a4:	69ba      	ldr	r2, [r7, #24]
   824a6:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   824a8:	4b24      	ldr	r3, [pc, #144]	; (8253c <xTaskGenericCreate+0x168>)
   824aa:	681b      	ldr	r3, [r3, #0]
   824ac:	1c5a      	adds	r2, r3, #1
   824ae:	4b23      	ldr	r3, [pc, #140]	; (8253c <xTaskGenericCreate+0x168>)
   824b0:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   824b2:	69bb      	ldr	r3, [r7, #24]
   824b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   824b6:	2201      	movs	r2, #1
   824b8:	409a      	lsls	r2, r3
   824ba:	4b21      	ldr	r3, [pc, #132]	; (82540 <xTaskGenericCreate+0x16c>)
   824bc:	681b      	ldr	r3, [r3, #0]
   824be:	431a      	orrs	r2, r3
   824c0:	4b1f      	ldr	r3, [pc, #124]	; (82540 <xTaskGenericCreate+0x16c>)
   824c2:	601a      	str	r2, [r3, #0]
   824c4:	69bb      	ldr	r3, [r7, #24]
   824c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   824c8:	4613      	mov	r3, r2
   824ca:	009b      	lsls	r3, r3, #2
   824cc:	4413      	add	r3, r2
   824ce:	009b      	lsls	r3, r3, #2
   824d0:	4a1c      	ldr	r2, [pc, #112]	; (82544 <xTaskGenericCreate+0x170>)
   824d2:	441a      	add	r2, r3
   824d4:	69bb      	ldr	r3, [r7, #24]
   824d6:	3304      	adds	r3, #4
   824d8:	4610      	mov	r0, r2
   824da:	4619      	mov	r1, r3
   824dc:	4b1a      	ldr	r3, [pc, #104]	; (82548 <xTaskGenericCreate+0x174>)
   824de:	4798      	blx	r3

			xReturn = pdPASS;
   824e0:	2301      	movs	r3, #1
   824e2:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   824e4:	4b19      	ldr	r3, [pc, #100]	; (8254c <xTaskGenericCreate+0x178>)
   824e6:	4798      	blx	r3
   824e8:	e002      	b.n	824f0 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   824ea:	f04f 33ff 	mov.w	r3, #4294967295
   824ee:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   824f0:	69fb      	ldr	r3, [r7, #28]
   824f2:	2b01      	cmp	r3, #1
   824f4:	d10b      	bne.n	8250e <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   824f6:	4b10      	ldr	r3, [pc, #64]	; (82538 <xTaskGenericCreate+0x164>)
   824f8:	681b      	ldr	r3, [r3, #0]
   824fa:	2b00      	cmp	r3, #0
   824fc:	d007      	beq.n	8250e <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   824fe:	4b0c      	ldr	r3, [pc, #48]	; (82530 <xTaskGenericCreate+0x15c>)
   82500:	681b      	ldr	r3, [r3, #0]
   82502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82506:	429a      	cmp	r2, r3
   82508:	d201      	bcs.n	8250e <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   8250a:	4b11      	ldr	r3, [pc, #68]	; (82550 <xTaskGenericCreate+0x17c>)
   8250c:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   8250e:	69fb      	ldr	r3, [r7, #28]
}
   82510:	4618      	mov	r0, r3
   82512:	3724      	adds	r7, #36	; 0x24
   82514:	46bd      	mov	sp, r7
   82516:	bd90      	pop	{r4, r7, pc}
   82518:	0008139d 	.word	0x0008139d
   8251c:	00083449 	.word	0x00083449
   82520:	00083235 	.word	0x00083235
   82524:	00081179 	.word	0x00081179
   82528:	00081321 	.word	0x00081321
   8252c:	2007a5bc 	.word	0x2007a5bc
   82530:	2007a4e4 	.word	0x2007a4e4
   82534:	000832cd 	.word	0x000832cd
   82538:	2007a5c8 	.word	0x2007a5c8
   8253c:	2007a5d8 	.word	0x2007a5d8
   82540:	2007a5c4 	.word	0x2007a5c4
   82544:	2007a4e8 	.word	0x2007a4e8
   82548:	0008106d 	.word	0x0008106d
   8254c:	00081365 	.word	0x00081365
   82550:	00081301 	.word	0x00081301

00082554 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
   82554:	b580      	push	{r7, lr}
   82556:	b084      	sub	sp, #16
   82558:	af00      	add	r7, sp, #0
   8255a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   8255c:	4b2f      	ldr	r3, [pc, #188]	; (8261c <vTaskDelete+0xc8>)
   8255e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
   82560:	687b      	ldr	r3, [r7, #4]
   82562:	2b00      	cmp	r3, #0
   82564:	d102      	bne.n	8256c <vTaskDelete+0x18>
   82566:	4b2e      	ldr	r3, [pc, #184]	; (82620 <vTaskDelete+0xcc>)
   82568:	681b      	ldr	r3, [r3, #0]
   8256a:	e000      	b.n	8256e <vTaskDelete+0x1a>
   8256c:	687b      	ldr	r3, [r7, #4]
   8256e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   82570:	68fb      	ldr	r3, [r7, #12]
   82572:	3304      	adds	r3, #4
   82574:	4618      	mov	r0, r3
   82576:	4b2b      	ldr	r3, [pc, #172]	; (82624 <vTaskDelete+0xd0>)
   82578:	4798      	blx	r3
   8257a:	4603      	mov	r3, r0
   8257c:	2b00      	cmp	r3, #0
   8257e:	d115      	bne.n	825ac <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   82580:	68fb      	ldr	r3, [r7, #12]
   82582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82584:	4928      	ldr	r1, [pc, #160]	; (82628 <vTaskDelete+0xd4>)
   82586:	4613      	mov	r3, r2
   82588:	009b      	lsls	r3, r3, #2
   8258a:	4413      	add	r3, r2
   8258c:	009b      	lsls	r3, r3, #2
   8258e:	440b      	add	r3, r1
   82590:	681b      	ldr	r3, [r3, #0]
   82592:	2b00      	cmp	r3, #0
   82594:	d10a      	bne.n	825ac <vTaskDelete+0x58>
   82596:	68fb      	ldr	r3, [r7, #12]
   82598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8259a:	2201      	movs	r2, #1
   8259c:	fa02 f303 	lsl.w	r3, r2, r3
   825a0:	43da      	mvns	r2, r3
   825a2:	4b22      	ldr	r3, [pc, #136]	; (8262c <vTaskDelete+0xd8>)
   825a4:	681b      	ldr	r3, [r3, #0]
   825a6:	401a      	ands	r2, r3
   825a8:	4b20      	ldr	r3, [pc, #128]	; (8262c <vTaskDelete+0xd8>)
   825aa:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   825ac:	68fb      	ldr	r3, [r7, #12]
   825ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   825b0:	2b00      	cmp	r3, #0
   825b2:	d004      	beq.n	825be <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   825b4:	68fb      	ldr	r3, [r7, #12]
   825b6:	3318      	adds	r3, #24
   825b8:	4618      	mov	r0, r3
   825ba:	4b1a      	ldr	r3, [pc, #104]	; (82624 <vTaskDelete+0xd0>)
   825bc:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
   825be:	68fb      	ldr	r3, [r7, #12]
   825c0:	3304      	adds	r3, #4
   825c2:	481b      	ldr	r0, [pc, #108]	; (82630 <vTaskDelete+0xdc>)
   825c4:	4619      	mov	r1, r3
   825c6:	4b1b      	ldr	r3, [pc, #108]	; (82634 <vTaskDelete+0xe0>)
   825c8:	4798      	blx	r3

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
   825ca:	4b1b      	ldr	r3, [pc, #108]	; (82638 <vTaskDelete+0xe4>)
   825cc:	681b      	ldr	r3, [r3, #0]
   825ce:	1c5a      	adds	r2, r3, #1
   825d0:	4b19      	ldr	r3, [pc, #100]	; (82638 <vTaskDelete+0xe4>)
   825d2:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
   825d4:	4b19      	ldr	r3, [pc, #100]	; (8263c <vTaskDelete+0xe8>)
   825d6:	681b      	ldr	r3, [r3, #0]
   825d8:	1c5a      	adds	r2, r3, #1
   825da:	4b18      	ldr	r3, [pc, #96]	; (8263c <vTaskDelete+0xe8>)
   825dc:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
   825de:	4b18      	ldr	r3, [pc, #96]	; (82640 <vTaskDelete+0xec>)
   825e0:	4798      	blx	r3

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
   825e2:	4b18      	ldr	r3, [pc, #96]	; (82644 <vTaskDelete+0xf0>)
   825e4:	681b      	ldr	r3, [r3, #0]
   825e6:	2b00      	cmp	r3, #0
   825e8:	d014      	beq.n	82614 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
   825ea:	4b0d      	ldr	r3, [pc, #52]	; (82620 <vTaskDelete+0xcc>)
   825ec:	681b      	ldr	r3, [r3, #0]
   825ee:	68fa      	ldr	r2, [r7, #12]
   825f0:	429a      	cmp	r2, r3
   825f2:	d109      	bne.n	82608 <vTaskDelete+0xb4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
   825f4:	4b14      	ldr	r3, [pc, #80]	; (82648 <vTaskDelete+0xf4>)
   825f6:	681b      	ldr	r3, [r3, #0]
   825f8:	2b00      	cmp	r3, #0
   825fa:	d002      	beq.n	82602 <vTaskDelete+0xae>
   825fc:	4b13      	ldr	r3, [pc, #76]	; (8264c <vTaskDelete+0xf8>)
   825fe:	4798      	blx	r3
   82600:	e7fe      	b.n	82600 <vTaskDelete+0xac>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
   82602:	4b13      	ldr	r3, [pc, #76]	; (82650 <vTaskDelete+0xfc>)
   82604:	4798      	blx	r3
   82606:	e005      	b.n	82614 <vTaskDelete+0xc0>
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
   82608:	4b04      	ldr	r3, [pc, #16]	; (8261c <vTaskDelete+0xc8>)
   8260a:	4798      	blx	r3
				{
					prvResetNextTaskUnblockTime();
   8260c:	4b11      	ldr	r3, [pc, #68]	; (82654 <vTaskDelete+0x100>)
   8260e:	4798      	blx	r3
				}
				taskEXIT_CRITICAL();
   82610:	4b0b      	ldr	r3, [pc, #44]	; (82640 <vTaskDelete+0xec>)
   82612:	4798      	blx	r3
			}
		}
	}
   82614:	3710      	adds	r7, #16
   82616:	46bd      	mov	sp, r7
   82618:	bd80      	pop	{r7, pc}
   8261a:	bf00      	nop
   8261c:	00081321 	.word	0x00081321
   82620:	2007a4e4 	.word	0x2007a4e4
   82624:	00081125 	.word	0x00081125
   82628:	2007a4e8 	.word	0x2007a4e8
   8262c:	2007a5c4 	.word	0x2007a5c4
   82630:	2007a590 	.word	0x2007a590
   82634:	0008106d 	.word	0x0008106d
   82638:	2007a5a4 	.word	0x2007a5a4
   8263c:	2007a5d8 	.word	0x2007a5d8
   82640:	00081365 	.word	0x00081365
   82644:	2007a5c8 	.word	0x2007a5c8
   82648:	2007a5dc 	.word	0x2007a5dc
   8264c:	0008139d 	.word	0x0008139d
   82650:	00081301 	.word	0x00081301
   82654:	000834dd 	.word	0x000834dd

00082658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   82658:	b580      	push	{r7, lr}
   8265a:	b084      	sub	sp, #16
   8265c:	af00      	add	r7, sp, #0
   8265e:	6078      	str	r0, [r7, #4]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
   82660:	2300      	movs	r3, #0
   82662:	60fb      	str	r3, [r7, #12]


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   82664:	687b      	ldr	r3, [r7, #4]
   82666:	2b00      	cmp	r3, #0
   82668:	d028      	beq.n	826bc <vTaskDelay+0x64>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   8266a:	4b18      	ldr	r3, [pc, #96]	; (826cc <vTaskDelay+0x74>)
   8266c:	681b      	ldr	r3, [r3, #0]
   8266e:	2b00      	cmp	r3, #0
   82670:	d002      	beq.n	82678 <vTaskDelay+0x20>
   82672:	4b17      	ldr	r3, [pc, #92]	; (826d0 <vTaskDelay+0x78>)
   82674:	4798      	blx	r3
   82676:	e7fe      	b.n	82676 <vTaskDelay+0x1e>
			vTaskSuspendAll();
   82678:	4b16      	ldr	r3, [pc, #88]	; (826d4 <vTaskDelay+0x7c>)
   8267a:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   8267c:	4b16      	ldr	r3, [pc, #88]	; (826d8 <vTaskDelay+0x80>)
   8267e:	681a      	ldr	r2, [r3, #0]
   82680:	687b      	ldr	r3, [r7, #4]
   82682:	4413      	add	r3, r2
   82684:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   82686:	4b15      	ldr	r3, [pc, #84]	; (826dc <vTaskDelay+0x84>)
   82688:	681b      	ldr	r3, [r3, #0]
   8268a:	3304      	adds	r3, #4
   8268c:	4618      	mov	r0, r3
   8268e:	4b14      	ldr	r3, [pc, #80]	; (826e0 <vTaskDelay+0x88>)
   82690:	4798      	blx	r3
   82692:	4603      	mov	r3, r0
   82694:	2b00      	cmp	r3, #0
   82696:	d10b      	bne.n	826b0 <vTaskDelay+0x58>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   82698:	4b10      	ldr	r3, [pc, #64]	; (826dc <vTaskDelay+0x84>)
   8269a:	681b      	ldr	r3, [r3, #0]
   8269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8269e:	2201      	movs	r2, #1
   826a0:	fa02 f303 	lsl.w	r3, r2, r3
   826a4:	43da      	mvns	r2, r3
   826a6:	4b0f      	ldr	r3, [pc, #60]	; (826e4 <vTaskDelay+0x8c>)
   826a8:	681b      	ldr	r3, [r3, #0]
   826aa:	401a      	ands	r2, r3
   826ac:	4b0d      	ldr	r3, [pc, #52]	; (826e4 <vTaskDelay+0x8c>)
   826ae:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   826b0:	68b8      	ldr	r0, [r7, #8]
   826b2:	4b0d      	ldr	r3, [pc, #52]	; (826e8 <vTaskDelay+0x90>)
   826b4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   826b6:	4b0d      	ldr	r3, [pc, #52]	; (826ec <vTaskDelay+0x94>)
   826b8:	4798      	blx	r3
   826ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   826bc:	68fb      	ldr	r3, [r7, #12]
   826be:	2b00      	cmp	r3, #0
   826c0:	d101      	bne.n	826c6 <vTaskDelay+0x6e>
		{
			portYIELD_WITHIN_API();
   826c2:	4b0b      	ldr	r3, [pc, #44]	; (826f0 <vTaskDelay+0x98>)
   826c4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   826c6:	3710      	adds	r7, #16
   826c8:	46bd      	mov	sp, r7
   826ca:	bd80      	pop	{r7, pc}
   826cc:	2007a5dc 	.word	0x2007a5dc
   826d0:	0008139d 	.word	0x0008139d
   826d4:	00082b31 	.word	0x00082b31
   826d8:	2007a5c0 	.word	0x2007a5c0
   826dc:	2007a4e4 	.word	0x2007a4e4
   826e0:	00081125 	.word	0x00081125
   826e4:	2007a5c4 	.word	0x2007a5c4
   826e8:	000833d9 	.word	0x000833d9
   826ec:	00082b4d 	.word	0x00082b4d
   826f0:	00081301 	.word	0x00081301

000826f4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
	{
   826f4:	b580      	push	{r7, lr}
   826f6:	b084      	sub	sp, #16
   826f8:	af00      	add	r7, sp, #0
   826fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
   826fc:	4b09      	ldr	r3, [pc, #36]	; (82724 <uxTaskPriorityGet+0x30>)
   826fe:	4798      	blx	r3
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( xTask );
   82700:	687b      	ldr	r3, [r7, #4]
   82702:	2b00      	cmp	r3, #0
   82704:	d102      	bne.n	8270c <uxTaskPriorityGet+0x18>
   82706:	4b08      	ldr	r3, [pc, #32]	; (82728 <uxTaskPriorityGet+0x34>)
   82708:	681b      	ldr	r3, [r3, #0]
   8270a:	e000      	b.n	8270e <uxTaskPriorityGet+0x1a>
   8270c:	687b      	ldr	r3, [r7, #4]
   8270e:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
   82710:	68fb      	ldr	r3, [r7, #12]
   82712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82714:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
   82716:	4b05      	ldr	r3, [pc, #20]	; (8272c <uxTaskPriorityGet+0x38>)
   82718:	4798      	blx	r3

		return uxReturn;
   8271a:	68bb      	ldr	r3, [r7, #8]
	}
   8271c:	4618      	mov	r0, r3
   8271e:	3710      	adds	r7, #16
   82720:	46bd      	mov	sp, r7
   82722:	bd80      	pop	{r7, pc}
   82724:	00081321 	.word	0x00081321
   82728:	2007a4e4 	.word	0x2007a4e4
   8272c:	00081365 	.word	0x00081365

00082730 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
   82730:	b580      	push	{r7, lr}
   82732:	b086      	sub	sp, #24
   82734:	af00      	add	r7, sp, #0
   82736:	6078      	str	r0, [r7, #4]
   82738:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
   8273a:	2300      	movs	r3, #0
   8273c:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
   8273e:	683b      	ldr	r3, [r7, #0]
   82740:	2b04      	cmp	r3, #4
   82742:	d902      	bls.n	8274a <vTaskPrioritySet+0x1a>
   82744:	4b46      	ldr	r3, [pc, #280]	; (82860 <vTaskPrioritySet+0x130>)
   82746:	4798      	blx	r3
   82748:	e7fe      	b.n	82748 <vTaskPrioritySet+0x18>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   8274a:	683b      	ldr	r3, [r7, #0]
   8274c:	2b04      	cmp	r3, #4
   8274e:	d901      	bls.n	82754 <vTaskPrioritySet+0x24>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   82750:	2304      	movs	r3, #4
   82752:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
   82754:	4b43      	ldr	r3, [pc, #268]	; (82864 <vTaskPrioritySet+0x134>)
   82756:	4798      	blx	r3
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
   82758:	687b      	ldr	r3, [r7, #4]
   8275a:	2b00      	cmp	r3, #0
   8275c:	d102      	bne.n	82764 <vTaskPrioritySet+0x34>
   8275e:	4b42      	ldr	r3, [pc, #264]	; (82868 <vTaskPrioritySet+0x138>)
   82760:	681b      	ldr	r3, [r3, #0]
   82762:	e000      	b.n	82766 <vTaskPrioritySet+0x36>
   82764:	687b      	ldr	r3, [r7, #4]
   82766:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
   82768:	693b      	ldr	r3, [r7, #16]
   8276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8276c:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
   8276e:	68fa      	ldr	r2, [r7, #12]
   82770:	683b      	ldr	r3, [r7, #0]
   82772:	429a      	cmp	r2, r3
   82774:	d06e      	beq.n	82854 <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
   82776:	683a      	ldr	r2, [r7, #0]
   82778:	68fb      	ldr	r3, [r7, #12]
   8277a:	429a      	cmp	r2, r3
   8277c:	d90d      	bls.n	8279a <vTaskPrioritySet+0x6a>
				{
					if( pxTCB != pxCurrentTCB )
   8277e:	4b3a      	ldr	r3, [pc, #232]	; (82868 <vTaskPrioritySet+0x138>)
   82780:	681b      	ldr	r3, [r3, #0]
   82782:	693a      	ldr	r2, [r7, #16]
   82784:	429a      	cmp	r2, r3
   82786:	d00f      	beq.n	827a8 <vTaskPrioritySet+0x78>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
   82788:	4b37      	ldr	r3, [pc, #220]	; (82868 <vTaskPrioritySet+0x138>)
   8278a:	681b      	ldr	r3, [r3, #0]
   8278c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8278e:	683b      	ldr	r3, [r7, #0]
   82790:	429a      	cmp	r2, r3
   82792:	d809      	bhi.n	827a8 <vTaskPrioritySet+0x78>
						{
							xYieldRequired = pdTRUE;
   82794:	2301      	movs	r3, #1
   82796:	617b      	str	r3, [r7, #20]
   82798:	e006      	b.n	827a8 <vTaskPrioritySet+0x78>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
   8279a:	4b33      	ldr	r3, [pc, #204]	; (82868 <vTaskPrioritySet+0x138>)
   8279c:	681b      	ldr	r3, [r3, #0]
   8279e:	693a      	ldr	r2, [r7, #16]
   827a0:	429a      	cmp	r2, r3
   827a2:	d101      	bne.n	827a8 <vTaskPrioritySet+0x78>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
   827a4:	2301      	movs	r3, #1
   827a6:	617b      	str	r3, [r7, #20]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
   827a8:	693b      	ldr	r3, [r7, #16]
   827aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   827ac:	60bb      	str	r3, [r7, #8]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
   827ae:	693b      	ldr	r3, [r7, #16]
   827b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   827b2:	693b      	ldr	r3, [r7, #16]
   827b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   827b6:	429a      	cmp	r2, r3
   827b8:	d102      	bne.n	827c0 <vTaskPrioritySet+0x90>
					{
						pxTCB->uxPriority = uxNewPriority;
   827ba:	693b      	ldr	r3, [r7, #16]
   827bc:	683a      	ldr	r2, [r7, #0]
   827be:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
   827c0:	693b      	ldr	r3, [r7, #16]
   827c2:	683a      	ldr	r2, [r7, #0]
   827c4:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   827c6:	693b      	ldr	r3, [r7, #16]
   827c8:	699b      	ldr	r3, [r3, #24]
   827ca:	2b00      	cmp	r3, #0
   827cc:	db04      	blt.n	827d8 <vTaskPrioritySet+0xa8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   827ce:	683b      	ldr	r3, [r7, #0]
   827d0:	f1c3 0205 	rsb	r2, r3, #5
   827d4:	693b      	ldr	r3, [r7, #16]
   827d6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   827d8:	693b      	ldr	r3, [r7, #16]
   827da:	6959      	ldr	r1, [r3, #20]
   827dc:	68ba      	ldr	r2, [r7, #8]
   827de:	4613      	mov	r3, r2
   827e0:	009b      	lsls	r3, r3, #2
   827e2:	4413      	add	r3, r2
   827e4:	009b      	lsls	r3, r3, #2
   827e6:	4a21      	ldr	r2, [pc, #132]	; (8286c <vTaskPrioritySet+0x13c>)
   827e8:	4413      	add	r3, r2
   827ea:	4299      	cmp	r1, r3
   827ec:	d101      	bne.n	827f2 <vTaskPrioritySet+0xc2>
   827ee:	2301      	movs	r3, #1
   827f0:	e000      	b.n	827f4 <vTaskPrioritySet+0xc4>
   827f2:	2300      	movs	r3, #0
   827f4:	2b00      	cmp	r3, #0
   827f6:	d028      	beq.n	8284a <vTaskPrioritySet+0x11a>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   827f8:	693b      	ldr	r3, [r7, #16]
   827fa:	3304      	adds	r3, #4
   827fc:	4618      	mov	r0, r3
   827fe:	4b1c      	ldr	r3, [pc, #112]	; (82870 <vTaskPrioritySet+0x140>)
   82800:	4798      	blx	r3
   82802:	4603      	mov	r3, r0
   82804:	2b00      	cmp	r3, #0
   82806:	d109      	bne.n	8281c <vTaskPrioritySet+0xec>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
   82808:	68bb      	ldr	r3, [r7, #8]
   8280a:	2201      	movs	r2, #1
   8280c:	fa02 f303 	lsl.w	r3, r2, r3
   82810:	43da      	mvns	r2, r3
   82812:	4b18      	ldr	r3, [pc, #96]	; (82874 <vTaskPrioritySet+0x144>)
   82814:	681b      	ldr	r3, [r3, #0]
   82816:	401a      	ands	r2, r3
   82818:	4b16      	ldr	r3, [pc, #88]	; (82874 <vTaskPrioritySet+0x144>)
   8281a:	601a      	str	r2, [r3, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
   8281c:	693b      	ldr	r3, [r7, #16]
   8281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82820:	2201      	movs	r2, #1
   82822:	409a      	lsls	r2, r3
   82824:	4b13      	ldr	r3, [pc, #76]	; (82874 <vTaskPrioritySet+0x144>)
   82826:	681b      	ldr	r3, [r3, #0]
   82828:	431a      	orrs	r2, r3
   8282a:	4b12      	ldr	r3, [pc, #72]	; (82874 <vTaskPrioritySet+0x144>)
   8282c:	601a      	str	r2, [r3, #0]
   8282e:	693b      	ldr	r3, [r7, #16]
   82830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82832:	4613      	mov	r3, r2
   82834:	009b      	lsls	r3, r3, #2
   82836:	4413      	add	r3, r2
   82838:	009b      	lsls	r3, r3, #2
   8283a:	4a0c      	ldr	r2, [pc, #48]	; (8286c <vTaskPrioritySet+0x13c>)
   8283c:	441a      	add	r2, r3
   8283e:	693b      	ldr	r3, [r7, #16]
   82840:	3304      	adds	r3, #4
   82842:	4610      	mov	r0, r2
   82844:	4619      	mov	r1, r3
   82846:	4b0c      	ldr	r3, [pc, #48]	; (82878 <vTaskPrioritySet+0x148>)
   82848:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired == pdTRUE )
   8284a:	697b      	ldr	r3, [r7, #20]
   8284c:	2b01      	cmp	r3, #1
   8284e:	d101      	bne.n	82854 <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
   82850:	4b0a      	ldr	r3, [pc, #40]	; (8287c <vTaskPrioritySet+0x14c>)
   82852:	4798      	blx	r3
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
   82854:	4b0a      	ldr	r3, [pc, #40]	; (82880 <vTaskPrioritySet+0x150>)
   82856:	4798      	blx	r3
	}
   82858:	3718      	adds	r7, #24
   8285a:	46bd      	mov	sp, r7
   8285c:	bd80      	pop	{r7, pc}
   8285e:	bf00      	nop
   82860:	0008139d 	.word	0x0008139d
   82864:	00081321 	.word	0x00081321
   82868:	2007a4e4 	.word	0x2007a4e4
   8286c:	2007a4e8 	.word	0x2007a4e8
   82870:	00081125 	.word	0x00081125
   82874:	2007a5c4 	.word	0x2007a5c4
   82878:	0008106d 	.word	0x0008106d
   8287c:	00081301 	.word	0x00081301
   82880:	00081365 	.word	0x00081365

00082884 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   82884:	b580      	push	{r7, lr}
   82886:	b084      	sub	sp, #16
   82888:	af00      	add	r7, sp, #0
   8288a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   8288c:	4b32      	ldr	r3, [pc, #200]	; (82958 <vTaskSuspend+0xd4>)
   8288e:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   82890:	687b      	ldr	r3, [r7, #4]
   82892:	2b00      	cmp	r3, #0
   82894:	d102      	bne.n	8289c <vTaskSuspend+0x18>
   82896:	4b31      	ldr	r3, [pc, #196]	; (8295c <vTaskSuspend+0xd8>)
   82898:	681b      	ldr	r3, [r3, #0]
   8289a:	e000      	b.n	8289e <vTaskSuspend+0x1a>
   8289c:	687b      	ldr	r3, [r7, #4]
   8289e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   828a0:	68fb      	ldr	r3, [r7, #12]
   828a2:	3304      	adds	r3, #4
   828a4:	4618      	mov	r0, r3
   828a6:	4b2e      	ldr	r3, [pc, #184]	; (82960 <vTaskSuspend+0xdc>)
   828a8:	4798      	blx	r3
   828aa:	4603      	mov	r3, r0
   828ac:	2b00      	cmp	r3, #0
   828ae:	d115      	bne.n	828dc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   828b0:	68fb      	ldr	r3, [r7, #12]
   828b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   828b4:	492b      	ldr	r1, [pc, #172]	; (82964 <vTaskSuspend+0xe0>)
   828b6:	4613      	mov	r3, r2
   828b8:	009b      	lsls	r3, r3, #2
   828ba:	4413      	add	r3, r2
   828bc:	009b      	lsls	r3, r3, #2
   828be:	440b      	add	r3, r1
   828c0:	681b      	ldr	r3, [r3, #0]
   828c2:	2b00      	cmp	r3, #0
   828c4:	d10a      	bne.n	828dc <vTaskSuspend+0x58>
   828c6:	68fb      	ldr	r3, [r7, #12]
   828c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   828ca:	2201      	movs	r2, #1
   828cc:	fa02 f303 	lsl.w	r3, r2, r3
   828d0:	43da      	mvns	r2, r3
   828d2:	4b25      	ldr	r3, [pc, #148]	; (82968 <vTaskSuspend+0xe4>)
   828d4:	681b      	ldr	r3, [r3, #0]
   828d6:	401a      	ands	r2, r3
   828d8:	4b23      	ldr	r3, [pc, #140]	; (82968 <vTaskSuspend+0xe4>)
   828da:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   828dc:	68fb      	ldr	r3, [r7, #12]
   828de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   828e0:	2b00      	cmp	r3, #0
   828e2:	d004      	beq.n	828ee <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   828e4:	68fb      	ldr	r3, [r7, #12]
   828e6:	3318      	adds	r3, #24
   828e8:	4618      	mov	r0, r3
   828ea:	4b1d      	ldr	r3, [pc, #116]	; (82960 <vTaskSuspend+0xdc>)
   828ec:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
   828ee:	68fb      	ldr	r3, [r7, #12]
   828f0:	3304      	adds	r3, #4
   828f2:	481e      	ldr	r0, [pc, #120]	; (8296c <vTaskSuspend+0xe8>)
   828f4:	4619      	mov	r1, r3
   828f6:	4b1e      	ldr	r3, [pc, #120]	; (82970 <vTaskSuspend+0xec>)
   828f8:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
   828fa:	4b1e      	ldr	r3, [pc, #120]	; (82974 <vTaskSuspend+0xf0>)
   828fc:	4798      	blx	r3

		if( pxTCB == pxCurrentTCB )
   828fe:	4b17      	ldr	r3, [pc, #92]	; (8295c <vTaskSuspend+0xd8>)
   82900:	681b      	ldr	r3, [r3, #0]
   82902:	68fa      	ldr	r2, [r7, #12]
   82904:	429a      	cmp	r2, r3
   82906:	d11a      	bne.n	8293e <vTaskSuspend+0xba>
		{
			if( xSchedulerRunning != pdFALSE )
   82908:	4b1b      	ldr	r3, [pc, #108]	; (82978 <vTaskSuspend+0xf4>)
   8290a:	681b      	ldr	r3, [r3, #0]
   8290c:	2b00      	cmp	r3, #0
   8290e:	d009      	beq.n	82924 <vTaskSuspend+0xa0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   82910:	4b1a      	ldr	r3, [pc, #104]	; (8297c <vTaskSuspend+0xf8>)
   82912:	681b      	ldr	r3, [r3, #0]
   82914:	2b00      	cmp	r3, #0
   82916:	d002      	beq.n	8291e <vTaskSuspend+0x9a>
   82918:	4b19      	ldr	r3, [pc, #100]	; (82980 <vTaskSuspend+0xfc>)
   8291a:	4798      	blx	r3
   8291c:	e7fe      	b.n	8291c <vTaskSuspend+0x98>
				portYIELD_WITHIN_API();
   8291e:	4b19      	ldr	r3, [pc, #100]	; (82984 <vTaskSuspend+0x100>)
   82920:	4798      	blx	r3
   82922:	e016      	b.n	82952 <vTaskSuspend+0xce>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   82924:	4b11      	ldr	r3, [pc, #68]	; (8296c <vTaskSuspend+0xe8>)
   82926:	681a      	ldr	r2, [r3, #0]
   82928:	4b17      	ldr	r3, [pc, #92]	; (82988 <vTaskSuspend+0x104>)
   8292a:	681b      	ldr	r3, [r3, #0]
   8292c:	429a      	cmp	r2, r3
   8292e:	d103      	bne.n	82938 <vTaskSuspend+0xb4>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
   82930:	4b0a      	ldr	r3, [pc, #40]	; (8295c <vTaskSuspend+0xd8>)
   82932:	2200      	movs	r2, #0
   82934:	601a      	str	r2, [r3, #0]
   82936:	e00c      	b.n	82952 <vTaskSuspend+0xce>
				}
				else
				{
					vTaskSwitchContext();
   82938:	4b14      	ldr	r3, [pc, #80]	; (8298c <vTaskSuspend+0x108>)
   8293a:	4798      	blx	r3
   8293c:	e009      	b.n	82952 <vTaskSuspend+0xce>
				}
			}
		}
		else
		{
			if( xSchedulerRunning != pdFALSE )
   8293e:	4b0e      	ldr	r3, [pc, #56]	; (82978 <vTaskSuspend+0xf4>)
   82940:	681b      	ldr	r3, [r3, #0]
   82942:	2b00      	cmp	r3, #0
   82944:	d005      	beq.n	82952 <vTaskSuspend+0xce>
			{
				/* A task other than the currently running task was suspended,
				reset the next expected unblock time in case it referred to the
				task that is now in the Suspended state. */
				taskENTER_CRITICAL();
   82946:	4b04      	ldr	r3, [pc, #16]	; (82958 <vTaskSuspend+0xd4>)
   82948:	4798      	blx	r3
				{
					prvResetNextTaskUnblockTime();
   8294a:	4b11      	ldr	r3, [pc, #68]	; (82990 <vTaskSuspend+0x10c>)
   8294c:	4798      	blx	r3
				}
				taskEXIT_CRITICAL();
   8294e:	4b09      	ldr	r3, [pc, #36]	; (82974 <vTaskSuspend+0xf0>)
   82950:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
   82952:	3710      	adds	r7, #16
   82954:	46bd      	mov	sp, r7
   82956:	bd80      	pop	{r7, pc}
   82958:	00081321 	.word	0x00081321
   8295c:	2007a4e4 	.word	0x2007a4e4
   82960:	00081125 	.word	0x00081125
   82964:	2007a4e8 	.word	0x2007a4e8
   82968:	2007a5c4 	.word	0x2007a5c4
   8296c:	2007a5a8 	.word	0x2007a5a8
   82970:	0008106d 	.word	0x0008106d
   82974:	00081365 	.word	0x00081365
   82978:	2007a5c8 	.word	0x2007a5c8
   8297c:	2007a5dc 	.word	0x2007a5dc
   82980:	0008139d 	.word	0x0008139d
   82984:	00081301 	.word	0x00081301
   82988:	2007a5bc 	.word	0x2007a5bc
   8298c:	00082e31 	.word	0x00082e31
   82990:	000834dd 	.word	0x000834dd

00082994 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
   82994:	b580      	push	{r7, lr}
   82996:	b084      	sub	sp, #16
   82998:	af00      	add	r7, sp, #0
   8299a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
   8299c:	2300      	movs	r3, #0
   8299e:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
   829a0:	687b      	ldr	r3, [r7, #4]
   829a2:	60bb      	str	r3, [r7, #8]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
   829a4:	687b      	ldr	r3, [r7, #4]
   829a6:	2b00      	cmp	r3, #0
   829a8:	d102      	bne.n	829b0 <prvTaskIsTaskSuspended+0x1c>
   829aa:	4b11      	ldr	r3, [pc, #68]	; (829f0 <prvTaskIsTaskSuspended+0x5c>)
   829ac:	4798      	blx	r3
   829ae:	e7fe      	b.n	829ae <prvTaskIsTaskSuspended+0x1a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
   829b0:	68bb      	ldr	r3, [r7, #8]
   829b2:	695a      	ldr	r2, [r3, #20]
   829b4:	4b0f      	ldr	r3, [pc, #60]	; (829f4 <prvTaskIsTaskSuspended+0x60>)
   829b6:	429a      	cmp	r2, r3
   829b8:	d101      	bne.n	829be <prvTaskIsTaskSuspended+0x2a>
   829ba:	2301      	movs	r3, #1
   829bc:	e000      	b.n	829c0 <prvTaskIsTaskSuspended+0x2c>
   829be:	2300      	movs	r3, #0
   829c0:	2b00      	cmp	r3, #0
   829c2:	d00f      	beq.n	829e4 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
   829c4:	68bb      	ldr	r3, [r7, #8]
   829c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   829c8:	4b0b      	ldr	r3, [pc, #44]	; (829f8 <prvTaskIsTaskSuspended+0x64>)
   829ca:	429a      	cmp	r2, r3
   829cc:	d00a      	beq.n	829e4 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
   829ce:	68bb      	ldr	r3, [r7, #8]
   829d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   829d2:	2b00      	cmp	r3, #0
   829d4:	d101      	bne.n	829da <prvTaskIsTaskSuspended+0x46>
   829d6:	2301      	movs	r3, #1
   829d8:	e000      	b.n	829dc <prvTaskIsTaskSuspended+0x48>
   829da:	2300      	movs	r3, #0
   829dc:	2b00      	cmp	r3, #0
   829de:	d001      	beq.n	829e4 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
   829e0:	2301      	movs	r3, #1
   829e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   829e4:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
   829e6:	4618      	mov	r0, r3
   829e8:	3710      	adds	r7, #16
   829ea:	46bd      	mov	sp, r7
   829ec:	bd80      	pop	{r7, pc}
   829ee:	bf00      	nop
   829f0:	0008139d 	.word	0x0008139d
   829f4:	2007a5a8 	.word	0x2007a5a8
   829f8:	2007a57c 	.word	0x2007a57c

000829fc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
   829fc:	b580      	push	{r7, lr}
   829fe:	b084      	sub	sp, #16
   82a00:	af00      	add	r7, sp, #0
   82a02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
   82a04:	687b      	ldr	r3, [r7, #4]
   82a06:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
   82a08:	687b      	ldr	r3, [r7, #4]
   82a0a:	2b00      	cmp	r3, #0
   82a0c:	d102      	bne.n	82a14 <vTaskResume+0x18>
   82a0e:	4b1e      	ldr	r3, [pc, #120]	; (82a88 <vTaskResume+0x8c>)
   82a10:	4798      	blx	r3
   82a12:	e7fe      	b.n	82a12 <vTaskResume+0x16>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
   82a14:	68fb      	ldr	r3, [r7, #12]
   82a16:	2b00      	cmp	r3, #0
   82a18:	d033      	beq.n	82a82 <vTaskResume+0x86>
   82a1a:	4b1c      	ldr	r3, [pc, #112]	; (82a8c <vTaskResume+0x90>)
   82a1c:	681b      	ldr	r3, [r3, #0]
   82a1e:	68fa      	ldr	r2, [r7, #12]
   82a20:	429a      	cmp	r2, r3
   82a22:	d02e      	beq.n	82a82 <vTaskResume+0x86>
		{
			taskENTER_CRITICAL();
   82a24:	4b1a      	ldr	r3, [pc, #104]	; (82a90 <vTaskResume+0x94>)
   82a26:	4798      	blx	r3
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
   82a28:	68f8      	ldr	r0, [r7, #12]
   82a2a:	4b1a      	ldr	r3, [pc, #104]	; (82a94 <vTaskResume+0x98>)
   82a2c:	4798      	blx	r3
   82a2e:	4603      	mov	r3, r0
   82a30:	2b01      	cmp	r3, #1
   82a32:	d124      	bne.n	82a7e <vTaskResume+0x82>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
   82a34:	68fb      	ldr	r3, [r7, #12]
   82a36:	3304      	adds	r3, #4
   82a38:	4618      	mov	r0, r3
   82a3a:	4b17      	ldr	r3, [pc, #92]	; (82a98 <vTaskResume+0x9c>)
   82a3c:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   82a3e:	68fb      	ldr	r3, [r7, #12]
   82a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82a42:	2201      	movs	r2, #1
   82a44:	409a      	lsls	r2, r3
   82a46:	4b15      	ldr	r3, [pc, #84]	; (82a9c <vTaskResume+0xa0>)
   82a48:	681b      	ldr	r3, [r3, #0]
   82a4a:	431a      	orrs	r2, r3
   82a4c:	4b13      	ldr	r3, [pc, #76]	; (82a9c <vTaskResume+0xa0>)
   82a4e:	601a      	str	r2, [r3, #0]
   82a50:	68fb      	ldr	r3, [r7, #12]
   82a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82a54:	4613      	mov	r3, r2
   82a56:	009b      	lsls	r3, r3, #2
   82a58:	4413      	add	r3, r2
   82a5a:	009b      	lsls	r3, r3, #2
   82a5c:	4a10      	ldr	r2, [pc, #64]	; (82aa0 <vTaskResume+0xa4>)
   82a5e:	441a      	add	r2, r3
   82a60:	68fb      	ldr	r3, [r7, #12]
   82a62:	3304      	adds	r3, #4
   82a64:	4610      	mov	r0, r2
   82a66:	4619      	mov	r1, r3
   82a68:	4b0e      	ldr	r3, [pc, #56]	; (82aa4 <vTaskResume+0xa8>)
   82a6a:	4798      	blx	r3

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82a6c:	68fb      	ldr	r3, [r7, #12]
   82a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82a70:	4b06      	ldr	r3, [pc, #24]	; (82a8c <vTaskResume+0x90>)
   82a72:	681b      	ldr	r3, [r3, #0]
   82a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82a76:	429a      	cmp	r2, r3
   82a78:	d301      	bcc.n	82a7e <vTaskResume+0x82>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
   82a7a:	4b0b      	ldr	r3, [pc, #44]	; (82aa8 <vTaskResume+0xac>)
   82a7c:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
   82a7e:	4b0b      	ldr	r3, [pc, #44]	; (82aac <vTaskResume+0xb0>)
   82a80:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   82a82:	3710      	adds	r7, #16
   82a84:	46bd      	mov	sp, r7
   82a86:	bd80      	pop	{r7, pc}
   82a88:	0008139d 	.word	0x0008139d
   82a8c:	2007a4e4 	.word	0x2007a4e4
   82a90:	00081321 	.word	0x00081321
   82a94:	00082995 	.word	0x00082995
   82a98:	00081125 	.word	0x00081125
   82a9c:	2007a5c4 	.word	0x2007a5c4
   82aa0:	2007a4e8 	.word	0x2007a4e8
   82aa4:	0008106d 	.word	0x0008106d
   82aa8:	00081301 	.word	0x00081301
   82aac:	00081365 	.word	0x00081365

00082ab0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   82ab0:	b590      	push	{r4, r7, lr}
   82ab2:	b087      	sub	sp, #28
   82ab4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   82ab6:	2300      	movs	r3, #0
   82ab8:	9300      	str	r3, [sp, #0]
   82aba:	2300      	movs	r3, #0
   82abc:	9301      	str	r3, [sp, #4]
   82abe:	2300      	movs	r3, #0
   82ac0:	9302      	str	r3, [sp, #8]
   82ac2:	2300      	movs	r3, #0
   82ac4:	9303      	str	r3, [sp, #12]
   82ac6:	4812      	ldr	r0, [pc, #72]	; (82b10 <vTaskStartScheduler+0x60>)
   82ac8:	4912      	ldr	r1, [pc, #72]	; (82b14 <vTaskStartScheduler+0x64>)
   82aca:	2282      	movs	r2, #130	; 0x82
   82acc:	2300      	movs	r3, #0
   82ace:	4c12      	ldr	r4, [pc, #72]	; (82b18 <vTaskStartScheduler+0x68>)
   82ad0:	47a0      	blx	r4
   82ad2:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   82ad4:	687b      	ldr	r3, [r7, #4]
   82ad6:	2b01      	cmp	r3, #1
   82ad8:	d102      	bne.n	82ae0 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   82ada:	4b10      	ldr	r3, [pc, #64]	; (82b1c <vTaskStartScheduler+0x6c>)
   82adc:	4798      	blx	r3
   82ade:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   82ae0:	687b      	ldr	r3, [r7, #4]
   82ae2:	2b01      	cmp	r3, #1
   82ae4:	d10a      	bne.n	82afc <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   82ae6:	4b0e      	ldr	r3, [pc, #56]	; (82b20 <vTaskStartScheduler+0x70>)
   82ae8:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   82aea:	4b0e      	ldr	r3, [pc, #56]	; (82b24 <vTaskStartScheduler+0x74>)
   82aec:	2201      	movs	r2, #1
   82aee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   82af0:	4b0d      	ldr	r3, [pc, #52]	; (82b28 <vTaskStartScheduler+0x78>)
   82af2:	2200      	movs	r2, #0
   82af4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   82af6:	4b0d      	ldr	r3, [pc, #52]	; (82b2c <vTaskStartScheduler+0x7c>)
   82af8:	4798      	blx	r3
   82afa:	e005      	b.n	82b08 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   82afc:	687b      	ldr	r3, [r7, #4]
   82afe:	2b00      	cmp	r3, #0
   82b00:	d102      	bne.n	82b08 <vTaskStartScheduler+0x58>
   82b02:	4b07      	ldr	r3, [pc, #28]	; (82b20 <vTaskStartScheduler+0x70>)
   82b04:	4798      	blx	r3
   82b06:	e7fe      	b.n	82b06 <vTaskStartScheduler+0x56>
	}
}
   82b08:	370c      	adds	r7, #12
   82b0a:	46bd      	mov	sp, r7
   82b0c:	bd90      	pop	{r4, r7, pc}
   82b0e:	bf00      	nop
   82b10:	0008320d 	.word	0x0008320d
   82b14:	00086698 	.word	0x00086698
   82b18:	000823d5 	.word	0x000823d5
   82b1c:	00083781 	.word	0x00083781
   82b20:	0008139d 	.word	0x0008139d
   82b24:	2007a5c8 	.word	0x2007a5c8
   82b28:	2007a5c0 	.word	0x2007a5c0
   82b2c:	00081239 	.word	0x00081239

00082b30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   82b30:	b480      	push	{r7}
   82b32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   82b34:	4b04      	ldr	r3, [pc, #16]	; (82b48 <vTaskSuspendAll+0x18>)
   82b36:	681b      	ldr	r3, [r3, #0]
   82b38:	1c5a      	adds	r2, r3, #1
   82b3a:	4b03      	ldr	r3, [pc, #12]	; (82b48 <vTaskSuspendAll+0x18>)
   82b3c:	601a      	str	r2, [r3, #0]
}
   82b3e:	46bd      	mov	sp, r7
   82b40:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b44:	4770      	bx	lr
   82b46:	bf00      	nop
   82b48:	2007a5dc 	.word	0x2007a5dc

00082b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   82b4c:	b580      	push	{r7, lr}
   82b4e:	b082      	sub	sp, #8
   82b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   82b52:	2300      	movs	r3, #0
   82b54:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   82b56:	4b37      	ldr	r3, [pc, #220]	; (82c34 <xTaskResumeAll+0xe8>)
   82b58:	681b      	ldr	r3, [r3, #0]
   82b5a:	2b00      	cmp	r3, #0
   82b5c:	d102      	bne.n	82b64 <xTaskResumeAll+0x18>
   82b5e:	4b36      	ldr	r3, [pc, #216]	; (82c38 <xTaskResumeAll+0xec>)
   82b60:	4798      	blx	r3
   82b62:	e7fe      	b.n	82b62 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   82b64:	4b35      	ldr	r3, [pc, #212]	; (82c3c <xTaskResumeAll+0xf0>)
   82b66:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   82b68:	4b32      	ldr	r3, [pc, #200]	; (82c34 <xTaskResumeAll+0xe8>)
   82b6a:	681b      	ldr	r3, [r3, #0]
   82b6c:	1e5a      	subs	r2, r3, #1
   82b6e:	4b31      	ldr	r3, [pc, #196]	; (82c34 <xTaskResumeAll+0xe8>)
   82b70:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   82b72:	4b30      	ldr	r3, [pc, #192]	; (82c34 <xTaskResumeAll+0xe8>)
   82b74:	681b      	ldr	r3, [r3, #0]
   82b76:	2b00      	cmp	r3, #0
   82b78:	d155      	bne.n	82c26 <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   82b7a:	4b31      	ldr	r3, [pc, #196]	; (82c40 <xTaskResumeAll+0xf4>)
   82b7c:	681b      	ldr	r3, [r3, #0]
   82b7e:	2b00      	cmp	r3, #0
   82b80:	d051      	beq.n	82c26 <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   82b82:	e02e      	b.n	82be2 <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   82b84:	4b2f      	ldr	r3, [pc, #188]	; (82c44 <xTaskResumeAll+0xf8>)
   82b86:	68db      	ldr	r3, [r3, #12]
   82b88:	68db      	ldr	r3, [r3, #12]
   82b8a:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   82b8c:	683b      	ldr	r3, [r7, #0]
   82b8e:	3318      	adds	r3, #24
   82b90:	4618      	mov	r0, r3
   82b92:	4b2d      	ldr	r3, [pc, #180]	; (82c48 <xTaskResumeAll+0xfc>)
   82b94:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   82b96:	683b      	ldr	r3, [r7, #0]
   82b98:	3304      	adds	r3, #4
   82b9a:	4618      	mov	r0, r3
   82b9c:	4b2a      	ldr	r3, [pc, #168]	; (82c48 <xTaskResumeAll+0xfc>)
   82b9e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   82ba0:	683b      	ldr	r3, [r7, #0]
   82ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82ba4:	2201      	movs	r2, #1
   82ba6:	409a      	lsls	r2, r3
   82ba8:	4b28      	ldr	r3, [pc, #160]	; (82c4c <xTaskResumeAll+0x100>)
   82baa:	681b      	ldr	r3, [r3, #0]
   82bac:	431a      	orrs	r2, r3
   82bae:	4b27      	ldr	r3, [pc, #156]	; (82c4c <xTaskResumeAll+0x100>)
   82bb0:	601a      	str	r2, [r3, #0]
   82bb2:	683b      	ldr	r3, [r7, #0]
   82bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82bb6:	4613      	mov	r3, r2
   82bb8:	009b      	lsls	r3, r3, #2
   82bba:	4413      	add	r3, r2
   82bbc:	009b      	lsls	r3, r3, #2
   82bbe:	4a24      	ldr	r2, [pc, #144]	; (82c50 <xTaskResumeAll+0x104>)
   82bc0:	441a      	add	r2, r3
   82bc2:	683b      	ldr	r3, [r7, #0]
   82bc4:	3304      	adds	r3, #4
   82bc6:	4610      	mov	r0, r2
   82bc8:	4619      	mov	r1, r3
   82bca:	4b22      	ldr	r3, [pc, #136]	; (82c54 <xTaskResumeAll+0x108>)
   82bcc:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82bce:	683b      	ldr	r3, [r7, #0]
   82bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82bd2:	4b21      	ldr	r3, [pc, #132]	; (82c58 <xTaskResumeAll+0x10c>)
   82bd4:	681b      	ldr	r3, [r3, #0]
   82bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82bd8:	429a      	cmp	r2, r3
   82bda:	d302      	bcc.n	82be2 <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   82bdc:	4b1f      	ldr	r3, [pc, #124]	; (82c5c <xTaskResumeAll+0x110>)
   82bde:	2201      	movs	r2, #1
   82be0:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   82be2:	4b18      	ldr	r3, [pc, #96]	; (82c44 <xTaskResumeAll+0xf8>)
   82be4:	681b      	ldr	r3, [r3, #0]
   82be6:	2b00      	cmp	r3, #0
   82be8:	d1cc      	bne.n	82b84 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   82bea:	4b1d      	ldr	r3, [pc, #116]	; (82c60 <xTaskResumeAll+0x114>)
   82bec:	681b      	ldr	r3, [r3, #0]
   82bee:	2b00      	cmp	r3, #0
   82bf0:	d011      	beq.n	82c16 <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   82bf2:	e00c      	b.n	82c0e <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   82bf4:	4b1b      	ldr	r3, [pc, #108]	; (82c64 <xTaskResumeAll+0x118>)
   82bf6:	4798      	blx	r3
   82bf8:	4603      	mov	r3, r0
   82bfa:	2b00      	cmp	r3, #0
   82bfc:	d002      	beq.n	82c04 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   82bfe:	4b17      	ldr	r3, [pc, #92]	; (82c5c <xTaskResumeAll+0x110>)
   82c00:	2201      	movs	r2, #1
   82c02:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   82c04:	4b16      	ldr	r3, [pc, #88]	; (82c60 <xTaskResumeAll+0x114>)
   82c06:	681b      	ldr	r3, [r3, #0]
   82c08:	1e5a      	subs	r2, r3, #1
   82c0a:	4b15      	ldr	r3, [pc, #84]	; (82c60 <xTaskResumeAll+0x114>)
   82c0c:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   82c0e:	4b14      	ldr	r3, [pc, #80]	; (82c60 <xTaskResumeAll+0x114>)
   82c10:	681b      	ldr	r3, [r3, #0]
   82c12:	2b00      	cmp	r3, #0
   82c14:	d1ee      	bne.n	82bf4 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   82c16:	4b11      	ldr	r3, [pc, #68]	; (82c5c <xTaskResumeAll+0x110>)
   82c18:	681b      	ldr	r3, [r3, #0]
   82c1a:	2b01      	cmp	r3, #1
   82c1c:	d103      	bne.n	82c26 <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   82c1e:	2301      	movs	r3, #1
   82c20:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   82c22:	4b11      	ldr	r3, [pc, #68]	; (82c68 <xTaskResumeAll+0x11c>)
   82c24:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   82c26:	4b11      	ldr	r3, [pc, #68]	; (82c6c <xTaskResumeAll+0x120>)
   82c28:	4798      	blx	r3

	return xAlreadyYielded;
   82c2a:	687b      	ldr	r3, [r7, #4]
}
   82c2c:	4618      	mov	r0, r3
   82c2e:	3708      	adds	r7, #8
   82c30:	46bd      	mov	sp, r7
   82c32:	bd80      	pop	{r7, pc}
   82c34:	2007a5dc 	.word	0x2007a5dc
   82c38:	0008139d 	.word	0x0008139d
   82c3c:	00081321 	.word	0x00081321
   82c40:	2007a5bc 	.word	0x2007a5bc
   82c44:	2007a57c 	.word	0x2007a57c
   82c48:	00081125 	.word	0x00081125
   82c4c:	2007a5c4 	.word	0x2007a5c4
   82c50:	2007a4e8 	.word	0x2007a4e8
   82c54:	0008106d 	.word	0x0008106d
   82c58:	2007a4e4 	.word	0x2007a4e4
   82c5c:	2007a5d0 	.word	0x2007a5d0
   82c60:	2007a5cc 	.word	0x2007a5cc
   82c64:	00082cb5 	.word	0x00082cb5
   82c68:	00081301 	.word	0x00081301
   82c6c:	00081365 	.word	0x00081365

00082c70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   82c70:	b580      	push	{r7, lr}
   82c72:	b082      	sub	sp, #8
   82c74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   82c76:	4b06      	ldr	r3, [pc, #24]	; (82c90 <xTaskGetTickCount+0x20>)
   82c78:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82c7a:	4b06      	ldr	r3, [pc, #24]	; (82c94 <xTaskGetTickCount+0x24>)
   82c7c:	681b      	ldr	r3, [r3, #0]
   82c7e:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   82c80:	4b05      	ldr	r3, [pc, #20]	; (82c98 <xTaskGetTickCount+0x28>)
   82c82:	4798      	blx	r3

	return xTicks;
   82c84:	687b      	ldr	r3, [r7, #4]
}
   82c86:	4618      	mov	r0, r3
   82c88:	3708      	adds	r7, #8
   82c8a:	46bd      	mov	sp, r7
   82c8c:	bd80      	pop	{r7, pc}
   82c8e:	bf00      	nop
   82c90:	00081321 	.word	0x00081321
   82c94:	2007a5c0 	.word	0x2007a5c0
   82c98:	00081365 	.word	0x00081365

00082c9c <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
   82c9c:	b480      	push	{r7}
   82c9e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
   82ca0:	4b03      	ldr	r3, [pc, #12]	; (82cb0 <uxTaskGetNumberOfTasks+0x14>)
   82ca2:	681b      	ldr	r3, [r3, #0]
}
   82ca4:	4618      	mov	r0, r3
   82ca6:	46bd      	mov	sp, r7
   82ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
   82cac:	4770      	bx	lr
   82cae:	bf00      	nop
   82cb0:	2007a5bc 	.word	0x2007a5bc

00082cb4 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   82cb4:	b580      	push	{r7, lr}
   82cb6:	b086      	sub	sp, #24
   82cb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   82cba:	2300      	movs	r3, #0
   82cbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   82cbe:	4b4d      	ldr	r3, [pc, #308]	; (82df4 <xTaskIncrementTick+0x140>)
   82cc0:	681b      	ldr	r3, [r3, #0]
   82cc2:	2b00      	cmp	r3, #0
   82cc4:	f040 8086 	bne.w	82dd4 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   82cc8:	4b4b      	ldr	r3, [pc, #300]	; (82df8 <xTaskIncrementTick+0x144>)
   82cca:	681b      	ldr	r3, [r3, #0]
   82ccc:	1c5a      	adds	r2, r3, #1
   82cce:	4b4a      	ldr	r3, [pc, #296]	; (82df8 <xTaskIncrementTick+0x144>)
   82cd0:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   82cd2:	4b49      	ldr	r3, [pc, #292]	; (82df8 <xTaskIncrementTick+0x144>)
   82cd4:	681b      	ldr	r3, [r3, #0]
   82cd6:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   82cd8:	693b      	ldr	r3, [r7, #16]
   82cda:	2b00      	cmp	r3, #0
   82cdc:	d118      	bne.n	82d10 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   82cde:	4b47      	ldr	r3, [pc, #284]	; (82dfc <xTaskIncrementTick+0x148>)
   82ce0:	681b      	ldr	r3, [r3, #0]
   82ce2:	681b      	ldr	r3, [r3, #0]
   82ce4:	2b00      	cmp	r3, #0
   82ce6:	d002      	beq.n	82cee <xTaskIncrementTick+0x3a>
   82ce8:	4b45      	ldr	r3, [pc, #276]	; (82e00 <xTaskIncrementTick+0x14c>)
   82cea:	4798      	blx	r3
   82cec:	e7fe      	b.n	82cec <xTaskIncrementTick+0x38>
   82cee:	4b43      	ldr	r3, [pc, #268]	; (82dfc <xTaskIncrementTick+0x148>)
   82cf0:	681b      	ldr	r3, [r3, #0]
   82cf2:	60fb      	str	r3, [r7, #12]
   82cf4:	4b43      	ldr	r3, [pc, #268]	; (82e04 <xTaskIncrementTick+0x150>)
   82cf6:	681a      	ldr	r2, [r3, #0]
   82cf8:	4b40      	ldr	r3, [pc, #256]	; (82dfc <xTaskIncrementTick+0x148>)
   82cfa:	601a      	str	r2, [r3, #0]
   82cfc:	4b41      	ldr	r3, [pc, #260]	; (82e04 <xTaskIncrementTick+0x150>)
   82cfe:	68fa      	ldr	r2, [r7, #12]
   82d00:	601a      	str	r2, [r3, #0]
   82d02:	4b41      	ldr	r3, [pc, #260]	; (82e08 <xTaskIncrementTick+0x154>)
   82d04:	681b      	ldr	r3, [r3, #0]
   82d06:	1c5a      	adds	r2, r3, #1
   82d08:	4b3f      	ldr	r3, [pc, #252]	; (82e08 <xTaskIncrementTick+0x154>)
   82d0a:	601a      	str	r2, [r3, #0]
   82d0c:	4b3f      	ldr	r3, [pc, #252]	; (82e0c <xTaskIncrementTick+0x158>)
   82d0e:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   82d10:	4b3f      	ldr	r3, [pc, #252]	; (82e10 <xTaskIncrementTick+0x15c>)
   82d12:	681b      	ldr	r3, [r3, #0]
   82d14:	693a      	ldr	r2, [r7, #16]
   82d16:	429a      	cmp	r2, r3
   82d18:	d34d      	bcc.n	82db6 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82d1a:	4b38      	ldr	r3, [pc, #224]	; (82dfc <xTaskIncrementTick+0x148>)
   82d1c:	681b      	ldr	r3, [r3, #0]
   82d1e:	681b      	ldr	r3, [r3, #0]
   82d20:	2b00      	cmp	r3, #0
   82d22:	d101      	bne.n	82d28 <xTaskIncrementTick+0x74>
   82d24:	2301      	movs	r3, #1
   82d26:	e000      	b.n	82d2a <xTaskIncrementTick+0x76>
   82d28:	2300      	movs	r3, #0
   82d2a:	2b00      	cmp	r3, #0
   82d2c:	d004      	beq.n	82d38 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   82d2e:	4b38      	ldr	r3, [pc, #224]	; (82e10 <xTaskIncrementTick+0x15c>)
   82d30:	f04f 32ff 	mov.w	r2, #4294967295
   82d34:	601a      	str	r2, [r3, #0]
						break;
   82d36:	e03e      	b.n	82db6 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82d38:	4b30      	ldr	r3, [pc, #192]	; (82dfc <xTaskIncrementTick+0x148>)
   82d3a:	681b      	ldr	r3, [r3, #0]
   82d3c:	68db      	ldr	r3, [r3, #12]
   82d3e:	68db      	ldr	r3, [r3, #12]
   82d40:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82d42:	68bb      	ldr	r3, [r7, #8]
   82d44:	685b      	ldr	r3, [r3, #4]
   82d46:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   82d48:	693a      	ldr	r2, [r7, #16]
   82d4a:	687b      	ldr	r3, [r7, #4]
   82d4c:	429a      	cmp	r2, r3
   82d4e:	d203      	bcs.n	82d58 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   82d50:	4b2f      	ldr	r3, [pc, #188]	; (82e10 <xTaskIncrementTick+0x15c>)
   82d52:	687a      	ldr	r2, [r7, #4]
   82d54:	601a      	str	r2, [r3, #0]
							break;
   82d56:	e02e      	b.n	82db6 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   82d58:	68bb      	ldr	r3, [r7, #8]
   82d5a:	3304      	adds	r3, #4
   82d5c:	4618      	mov	r0, r3
   82d5e:	4b2d      	ldr	r3, [pc, #180]	; (82e14 <xTaskIncrementTick+0x160>)
   82d60:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   82d62:	68bb      	ldr	r3, [r7, #8]
   82d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82d66:	2b00      	cmp	r3, #0
   82d68:	d004      	beq.n	82d74 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   82d6a:	68bb      	ldr	r3, [r7, #8]
   82d6c:	3318      	adds	r3, #24
   82d6e:	4618      	mov	r0, r3
   82d70:	4b28      	ldr	r3, [pc, #160]	; (82e14 <xTaskIncrementTick+0x160>)
   82d72:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   82d74:	68bb      	ldr	r3, [r7, #8]
   82d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82d78:	2201      	movs	r2, #1
   82d7a:	409a      	lsls	r2, r3
   82d7c:	4b26      	ldr	r3, [pc, #152]	; (82e18 <xTaskIncrementTick+0x164>)
   82d7e:	681b      	ldr	r3, [r3, #0]
   82d80:	431a      	orrs	r2, r3
   82d82:	4b25      	ldr	r3, [pc, #148]	; (82e18 <xTaskIncrementTick+0x164>)
   82d84:	601a      	str	r2, [r3, #0]
   82d86:	68bb      	ldr	r3, [r7, #8]
   82d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82d8a:	4613      	mov	r3, r2
   82d8c:	009b      	lsls	r3, r3, #2
   82d8e:	4413      	add	r3, r2
   82d90:	009b      	lsls	r3, r3, #2
   82d92:	4a22      	ldr	r2, [pc, #136]	; (82e1c <xTaskIncrementTick+0x168>)
   82d94:	441a      	add	r2, r3
   82d96:	68bb      	ldr	r3, [r7, #8]
   82d98:	3304      	adds	r3, #4
   82d9a:	4610      	mov	r0, r2
   82d9c:	4619      	mov	r1, r3
   82d9e:	4b20      	ldr	r3, [pc, #128]	; (82e20 <xTaskIncrementTick+0x16c>)
   82da0:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82da2:	68bb      	ldr	r3, [r7, #8]
   82da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82da6:	4b1f      	ldr	r3, [pc, #124]	; (82e24 <xTaskIncrementTick+0x170>)
   82da8:	681b      	ldr	r3, [r3, #0]
   82daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82dac:	429a      	cmp	r2, r3
   82dae:	d301      	bcc.n	82db4 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   82db0:	2301      	movs	r3, #1
   82db2:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   82db4:	e7b1      	b.n	82d1a <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   82db6:	4b1b      	ldr	r3, [pc, #108]	; (82e24 <xTaskIncrementTick+0x170>)
   82db8:	681b      	ldr	r3, [r3, #0]
   82dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82dbc:	4917      	ldr	r1, [pc, #92]	; (82e1c <xTaskIncrementTick+0x168>)
   82dbe:	4613      	mov	r3, r2
   82dc0:	009b      	lsls	r3, r3, #2
   82dc2:	4413      	add	r3, r2
   82dc4:	009b      	lsls	r3, r3, #2
   82dc6:	440b      	add	r3, r1
   82dc8:	681b      	ldr	r3, [r3, #0]
   82dca:	2b01      	cmp	r3, #1
   82dcc:	d907      	bls.n	82dde <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   82dce:	2301      	movs	r3, #1
   82dd0:	617b      	str	r3, [r7, #20]
   82dd2:	e004      	b.n	82dde <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   82dd4:	4b14      	ldr	r3, [pc, #80]	; (82e28 <xTaskIncrementTick+0x174>)
   82dd6:	681b      	ldr	r3, [r3, #0]
   82dd8:	1c5a      	adds	r2, r3, #1
   82dda:	4b13      	ldr	r3, [pc, #76]	; (82e28 <xTaskIncrementTick+0x174>)
   82ddc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   82dde:	4b13      	ldr	r3, [pc, #76]	; (82e2c <xTaskIncrementTick+0x178>)
   82de0:	681b      	ldr	r3, [r3, #0]
   82de2:	2b00      	cmp	r3, #0
   82de4:	d001      	beq.n	82dea <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   82de6:	2301      	movs	r3, #1
   82de8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   82dea:	697b      	ldr	r3, [r7, #20]
}
   82dec:	4618      	mov	r0, r3
   82dee:	3718      	adds	r7, #24
   82df0:	46bd      	mov	sp, r7
   82df2:	bd80      	pop	{r7, pc}
   82df4:	2007a5dc 	.word	0x2007a5dc
   82df8:	2007a5c0 	.word	0x2007a5c0
   82dfc:	2007a574 	.word	0x2007a574
   82e00:	0008139d 	.word	0x0008139d
   82e04:	2007a578 	.word	0x2007a578
   82e08:	2007a5d4 	.word	0x2007a5d4
   82e0c:	000834dd 	.word	0x000834dd
   82e10:	20070008 	.word	0x20070008
   82e14:	00081125 	.word	0x00081125
   82e18:	2007a5c4 	.word	0x2007a5c4
   82e1c:	2007a4e8 	.word	0x2007a4e8
   82e20:	0008106d 	.word	0x0008106d
   82e24:	2007a4e4 	.word	0x2007a4e4
   82e28:	2007a5cc 	.word	0x2007a5cc
   82e2c:	2007a5d0 	.word	0x2007a5d0

00082e30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82e30:	b580      	push	{r7, lr}
   82e32:	b084      	sub	sp, #16
   82e34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   82e36:	4b34      	ldr	r3, [pc, #208]	; (82f08 <vTaskSwitchContext+0xd8>)
   82e38:	681b      	ldr	r3, [r3, #0]
   82e3a:	2b00      	cmp	r3, #0
   82e3c:	d003      	beq.n	82e46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   82e3e:	4b33      	ldr	r3, [pc, #204]	; (82f0c <vTaskSwitchContext+0xdc>)
   82e40:	2201      	movs	r2, #1
   82e42:	601a      	str	r2, [r3, #0]
   82e44:	e05c      	b.n	82f00 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   82e46:	4b31      	ldr	r3, [pc, #196]	; (82f0c <vTaskSwitchContext+0xdc>)
   82e48:	2200      	movs	r2, #0
   82e4a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   82e4c:	4b30      	ldr	r3, [pc, #192]	; (82f10 <vTaskSwitchContext+0xe0>)
   82e4e:	681b      	ldr	r3, [r3, #0]
   82e50:	681a      	ldr	r2, [r3, #0]
   82e52:	4b2f      	ldr	r3, [pc, #188]	; (82f10 <vTaskSwitchContext+0xe0>)
   82e54:	681b      	ldr	r3, [r3, #0]
   82e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e58:	429a      	cmp	r2, r3
   82e5a:	d808      	bhi.n	82e6e <vTaskSwitchContext+0x3e>
   82e5c:	4b2c      	ldr	r3, [pc, #176]	; (82f10 <vTaskSwitchContext+0xe0>)
   82e5e:	681a      	ldr	r2, [r3, #0]
   82e60:	4b2b      	ldr	r3, [pc, #172]	; (82f10 <vTaskSwitchContext+0xe0>)
   82e62:	681b      	ldr	r3, [r3, #0]
   82e64:	3334      	adds	r3, #52	; 0x34
   82e66:	4610      	mov	r0, r2
   82e68:	4619      	mov	r1, r3
   82e6a:	4b2a      	ldr	r3, [pc, #168]	; (82f14 <vTaskSwitchContext+0xe4>)
   82e6c:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   82e6e:	4b28      	ldr	r3, [pc, #160]	; (82f10 <vTaskSwitchContext+0xe0>)
   82e70:	681b      	ldr	r3, [r3, #0]
   82e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e74:	4618      	mov	r0, r3
   82e76:	4928      	ldr	r1, [pc, #160]	; (82f18 <vTaskSwitchContext+0xe8>)
   82e78:	2214      	movs	r2, #20
   82e7a:	4b28      	ldr	r3, [pc, #160]	; (82f1c <vTaskSwitchContext+0xec>)
   82e7c:	4798      	blx	r3
   82e7e:	4603      	mov	r3, r0
   82e80:	2b00      	cmp	r3, #0
   82e82:	d008      	beq.n	82e96 <vTaskSwitchContext+0x66>
   82e84:	4b22      	ldr	r3, [pc, #136]	; (82f10 <vTaskSwitchContext+0xe0>)
   82e86:	681a      	ldr	r2, [r3, #0]
   82e88:	4b21      	ldr	r3, [pc, #132]	; (82f10 <vTaskSwitchContext+0xe0>)
   82e8a:	681b      	ldr	r3, [r3, #0]
   82e8c:	3334      	adds	r3, #52	; 0x34
   82e8e:	4610      	mov	r0, r2
   82e90:	4619      	mov	r1, r3
   82e92:	4b20      	ldr	r3, [pc, #128]	; (82f14 <vTaskSwitchContext+0xe4>)
   82e94:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   82e96:	4b22      	ldr	r3, [pc, #136]	; (82f20 <vTaskSwitchContext+0xf0>)
   82e98:	681b      	ldr	r3, [r3, #0]
   82e9a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   82e9c:	687b      	ldr	r3, [r7, #4]
   82e9e:	fab3 f383 	clz	r3, r3
   82ea2:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   82ea4:	78fb      	ldrb	r3, [r7, #3]
   82ea6:	f1c3 031f 	rsb	r3, r3, #31
   82eaa:	60fb      	str	r3, [r7, #12]
   82eac:	491d      	ldr	r1, [pc, #116]	; (82f24 <vTaskSwitchContext+0xf4>)
   82eae:	68fa      	ldr	r2, [r7, #12]
   82eb0:	4613      	mov	r3, r2
   82eb2:	009b      	lsls	r3, r3, #2
   82eb4:	4413      	add	r3, r2
   82eb6:	009b      	lsls	r3, r3, #2
   82eb8:	440b      	add	r3, r1
   82eba:	681b      	ldr	r3, [r3, #0]
   82ebc:	2b00      	cmp	r3, #0
   82ebe:	d102      	bne.n	82ec6 <vTaskSwitchContext+0x96>
   82ec0:	4b19      	ldr	r3, [pc, #100]	; (82f28 <vTaskSwitchContext+0xf8>)
   82ec2:	4798      	blx	r3
   82ec4:	e7fe      	b.n	82ec4 <vTaskSwitchContext+0x94>
   82ec6:	68fa      	ldr	r2, [r7, #12]
   82ec8:	4613      	mov	r3, r2
   82eca:	009b      	lsls	r3, r3, #2
   82ecc:	4413      	add	r3, r2
   82ece:	009b      	lsls	r3, r3, #2
   82ed0:	4a14      	ldr	r2, [pc, #80]	; (82f24 <vTaskSwitchContext+0xf4>)
   82ed2:	4413      	add	r3, r2
   82ed4:	60bb      	str	r3, [r7, #8]
   82ed6:	68bb      	ldr	r3, [r7, #8]
   82ed8:	685b      	ldr	r3, [r3, #4]
   82eda:	685a      	ldr	r2, [r3, #4]
   82edc:	68bb      	ldr	r3, [r7, #8]
   82ede:	605a      	str	r2, [r3, #4]
   82ee0:	68bb      	ldr	r3, [r7, #8]
   82ee2:	685a      	ldr	r2, [r3, #4]
   82ee4:	68bb      	ldr	r3, [r7, #8]
   82ee6:	3308      	adds	r3, #8
   82ee8:	429a      	cmp	r2, r3
   82eea:	d104      	bne.n	82ef6 <vTaskSwitchContext+0xc6>
   82eec:	68bb      	ldr	r3, [r7, #8]
   82eee:	685b      	ldr	r3, [r3, #4]
   82ef0:	685a      	ldr	r2, [r3, #4]
   82ef2:	68bb      	ldr	r3, [r7, #8]
   82ef4:	605a      	str	r2, [r3, #4]
   82ef6:	68bb      	ldr	r3, [r7, #8]
   82ef8:	685b      	ldr	r3, [r3, #4]
   82efa:	68da      	ldr	r2, [r3, #12]
   82efc:	4b04      	ldr	r3, [pc, #16]	; (82f10 <vTaskSwitchContext+0xe0>)
   82efe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   82f00:	3710      	adds	r7, #16
   82f02:	46bd      	mov	sp, r7
   82f04:	bd80      	pop	{r7, pc}
   82f06:	bf00      	nop
   82f08:	2007a5dc 	.word	0x2007a5dc
   82f0c:	2007a5d0 	.word	0x2007a5d0
   82f10:	2007a4e4 	.word	0x2007a4e4
   82f14:	00085fe9 	.word	0x00085fe9
   82f18:	000866a0 	.word	0x000866a0
   82f1c:	000863b9 	.word	0x000863b9
   82f20:	2007a5c4 	.word	0x2007a5c4
   82f24:	2007a4e8 	.word	0x2007a4e8
   82f28:	0008139d 	.word	0x0008139d

00082f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   82f2c:	b580      	push	{r7, lr}
   82f2e:	b084      	sub	sp, #16
   82f30:	af00      	add	r7, sp, #0
   82f32:	6078      	str	r0, [r7, #4]
   82f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   82f36:	687b      	ldr	r3, [r7, #4]
   82f38:	2b00      	cmp	r3, #0
   82f3a:	d102      	bne.n	82f42 <vTaskPlaceOnEventList+0x16>
   82f3c:	4b1a      	ldr	r3, [pc, #104]	; (82fa8 <vTaskPlaceOnEventList+0x7c>)
   82f3e:	4798      	blx	r3
   82f40:	e7fe      	b.n	82f40 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   82f42:	4b1a      	ldr	r3, [pc, #104]	; (82fac <vTaskPlaceOnEventList+0x80>)
   82f44:	681b      	ldr	r3, [r3, #0]
   82f46:	3318      	adds	r3, #24
   82f48:	6878      	ldr	r0, [r7, #4]
   82f4a:	4619      	mov	r1, r3
   82f4c:	4b18      	ldr	r3, [pc, #96]	; (82fb0 <vTaskPlaceOnEventList+0x84>)
   82f4e:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   82f50:	4b16      	ldr	r3, [pc, #88]	; (82fac <vTaskPlaceOnEventList+0x80>)
   82f52:	681b      	ldr	r3, [r3, #0]
   82f54:	3304      	adds	r3, #4
   82f56:	4618      	mov	r0, r3
   82f58:	4b16      	ldr	r3, [pc, #88]	; (82fb4 <vTaskPlaceOnEventList+0x88>)
   82f5a:	4798      	blx	r3
   82f5c:	4603      	mov	r3, r0
   82f5e:	2b00      	cmp	r3, #0
   82f60:	d10b      	bne.n	82f7a <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   82f62:	4b12      	ldr	r3, [pc, #72]	; (82fac <vTaskPlaceOnEventList+0x80>)
   82f64:	681b      	ldr	r3, [r3, #0]
   82f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82f68:	2201      	movs	r2, #1
   82f6a:	fa02 f303 	lsl.w	r3, r2, r3
   82f6e:	43da      	mvns	r2, r3
   82f70:	4b11      	ldr	r3, [pc, #68]	; (82fb8 <vTaskPlaceOnEventList+0x8c>)
   82f72:	681b      	ldr	r3, [r3, #0]
   82f74:	401a      	ands	r2, r3
   82f76:	4b10      	ldr	r3, [pc, #64]	; (82fb8 <vTaskPlaceOnEventList+0x8c>)
   82f78:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   82f7a:	683b      	ldr	r3, [r7, #0]
   82f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
   82f80:	d107      	bne.n	82f92 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   82f82:	4b0a      	ldr	r3, [pc, #40]	; (82fac <vTaskPlaceOnEventList+0x80>)
   82f84:	681b      	ldr	r3, [r3, #0]
   82f86:	3304      	adds	r3, #4
   82f88:	480c      	ldr	r0, [pc, #48]	; (82fbc <vTaskPlaceOnEventList+0x90>)
   82f8a:	4619      	mov	r1, r3
   82f8c:	4b0c      	ldr	r3, [pc, #48]	; (82fc0 <vTaskPlaceOnEventList+0x94>)
   82f8e:	4798      	blx	r3
   82f90:	e007      	b.n	82fa2 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   82f92:	4b0c      	ldr	r3, [pc, #48]	; (82fc4 <vTaskPlaceOnEventList+0x98>)
   82f94:	681a      	ldr	r2, [r3, #0]
   82f96:	683b      	ldr	r3, [r7, #0]
   82f98:	4413      	add	r3, r2
   82f9a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   82f9c:	68f8      	ldr	r0, [r7, #12]
   82f9e:	4b0a      	ldr	r3, [pc, #40]	; (82fc8 <vTaskPlaceOnEventList+0x9c>)
   82fa0:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   82fa2:	3710      	adds	r7, #16
   82fa4:	46bd      	mov	sp, r7
   82fa6:	bd80      	pop	{r7, pc}
   82fa8:	0008139d 	.word	0x0008139d
   82fac:	2007a4e4 	.word	0x2007a4e4
   82fb0:	000810b5 	.word	0x000810b5
   82fb4:	00081125 	.word	0x00081125
   82fb8:	2007a5c4 	.word	0x2007a5c4
   82fbc:	2007a5a8 	.word	0x2007a5a8
   82fc0:	0008106d 	.word	0x0008106d
   82fc4:	2007a5c0 	.word	0x2007a5c0
   82fc8:	000833d9 	.word	0x000833d9

00082fcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   82fcc:	b580      	push	{r7, lr}
   82fce:	b084      	sub	sp, #16
   82fd0:	af00      	add	r7, sp, #0
   82fd2:	6078      	str	r0, [r7, #4]
   82fd4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   82fd6:	687b      	ldr	r3, [r7, #4]
   82fd8:	2b00      	cmp	r3, #0
   82fda:	d102      	bne.n	82fe2 <vTaskPlaceOnEventListRestricted+0x16>
   82fdc:	4b14      	ldr	r3, [pc, #80]	; (83030 <vTaskPlaceOnEventListRestricted+0x64>)
   82fde:	4798      	blx	r3
   82fe0:	e7fe      	b.n	82fe0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   82fe2:	4b14      	ldr	r3, [pc, #80]	; (83034 <vTaskPlaceOnEventListRestricted+0x68>)
   82fe4:	681b      	ldr	r3, [r3, #0]
   82fe6:	3318      	adds	r3, #24
   82fe8:	6878      	ldr	r0, [r7, #4]
   82fea:	4619      	mov	r1, r3
   82fec:	4b12      	ldr	r3, [pc, #72]	; (83038 <vTaskPlaceOnEventListRestricted+0x6c>)
   82fee:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   82ff0:	4b10      	ldr	r3, [pc, #64]	; (83034 <vTaskPlaceOnEventListRestricted+0x68>)
   82ff2:	681b      	ldr	r3, [r3, #0]
   82ff4:	3304      	adds	r3, #4
   82ff6:	4618      	mov	r0, r3
   82ff8:	4b10      	ldr	r3, [pc, #64]	; (8303c <vTaskPlaceOnEventListRestricted+0x70>)
   82ffa:	4798      	blx	r3
   82ffc:	4603      	mov	r3, r0
   82ffe:	2b00      	cmp	r3, #0
   83000:	d10b      	bne.n	8301a <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83002:	4b0c      	ldr	r3, [pc, #48]	; (83034 <vTaskPlaceOnEventListRestricted+0x68>)
   83004:	681b      	ldr	r3, [r3, #0]
   83006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83008:	2201      	movs	r2, #1
   8300a:	fa02 f303 	lsl.w	r3, r2, r3
   8300e:	43da      	mvns	r2, r3
   83010:	4b0b      	ldr	r3, [pc, #44]	; (83040 <vTaskPlaceOnEventListRestricted+0x74>)
   83012:	681b      	ldr	r3, [r3, #0]
   83014:	401a      	ands	r2, r3
   83016:	4b0a      	ldr	r3, [pc, #40]	; (83040 <vTaskPlaceOnEventListRestricted+0x74>)
   83018:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8301a:	4b0a      	ldr	r3, [pc, #40]	; (83044 <vTaskPlaceOnEventListRestricted+0x78>)
   8301c:	681a      	ldr	r2, [r3, #0]
   8301e:	683b      	ldr	r3, [r7, #0]
   83020:	4413      	add	r3, r2
   83022:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   83024:	68f8      	ldr	r0, [r7, #12]
   83026:	4b08      	ldr	r3, [pc, #32]	; (83048 <vTaskPlaceOnEventListRestricted+0x7c>)
   83028:	4798      	blx	r3
	}
   8302a:	3710      	adds	r7, #16
   8302c:	46bd      	mov	sp, r7
   8302e:	bd80      	pop	{r7, pc}
   83030:	0008139d 	.word	0x0008139d
   83034:	2007a4e4 	.word	0x2007a4e4
   83038:	0008106d 	.word	0x0008106d
   8303c:	00081125 	.word	0x00081125
   83040:	2007a5c4 	.word	0x2007a5c4
   83044:	2007a5c0 	.word	0x2007a5c0
   83048:	000833d9 	.word	0x000833d9

0008304c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   8304c:	b580      	push	{r7, lr}
   8304e:	b084      	sub	sp, #16
   83050:	af00      	add	r7, sp, #0
   83052:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   83054:	687b      	ldr	r3, [r7, #4]
   83056:	68db      	ldr	r3, [r3, #12]
   83058:	68db      	ldr	r3, [r3, #12]
   8305a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   8305c:	68bb      	ldr	r3, [r7, #8]
   8305e:	2b00      	cmp	r3, #0
   83060:	d102      	bne.n	83068 <xTaskRemoveFromEventList+0x1c>
   83062:	4b21      	ldr	r3, [pc, #132]	; (830e8 <xTaskRemoveFromEventList+0x9c>)
   83064:	4798      	blx	r3
   83066:	e7fe      	b.n	83066 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   83068:	68bb      	ldr	r3, [r7, #8]
   8306a:	3318      	adds	r3, #24
   8306c:	4618      	mov	r0, r3
   8306e:	4b1f      	ldr	r3, [pc, #124]	; (830ec <xTaskRemoveFromEventList+0xa0>)
   83070:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83072:	4b1f      	ldr	r3, [pc, #124]	; (830f0 <xTaskRemoveFromEventList+0xa4>)
   83074:	681b      	ldr	r3, [r3, #0]
   83076:	2b00      	cmp	r3, #0
   83078:	d11c      	bne.n	830b4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8307a:	68bb      	ldr	r3, [r7, #8]
   8307c:	3304      	adds	r3, #4
   8307e:	4618      	mov	r0, r3
   83080:	4b1a      	ldr	r3, [pc, #104]	; (830ec <xTaskRemoveFromEventList+0xa0>)
   83082:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   83084:	68bb      	ldr	r3, [r7, #8]
   83086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83088:	2201      	movs	r2, #1
   8308a:	409a      	lsls	r2, r3
   8308c:	4b19      	ldr	r3, [pc, #100]	; (830f4 <xTaskRemoveFromEventList+0xa8>)
   8308e:	681b      	ldr	r3, [r3, #0]
   83090:	431a      	orrs	r2, r3
   83092:	4b18      	ldr	r3, [pc, #96]	; (830f4 <xTaskRemoveFromEventList+0xa8>)
   83094:	601a      	str	r2, [r3, #0]
   83096:	68bb      	ldr	r3, [r7, #8]
   83098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8309a:	4613      	mov	r3, r2
   8309c:	009b      	lsls	r3, r3, #2
   8309e:	4413      	add	r3, r2
   830a0:	009b      	lsls	r3, r3, #2
   830a2:	4a15      	ldr	r2, [pc, #84]	; (830f8 <xTaskRemoveFromEventList+0xac>)
   830a4:	441a      	add	r2, r3
   830a6:	68bb      	ldr	r3, [r7, #8]
   830a8:	3304      	adds	r3, #4
   830aa:	4610      	mov	r0, r2
   830ac:	4619      	mov	r1, r3
   830ae:	4b13      	ldr	r3, [pc, #76]	; (830fc <xTaskRemoveFromEventList+0xb0>)
   830b0:	4798      	blx	r3
   830b2:	e005      	b.n	830c0 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   830b4:	68bb      	ldr	r3, [r7, #8]
   830b6:	3318      	adds	r3, #24
   830b8:	4811      	ldr	r0, [pc, #68]	; (83100 <xTaskRemoveFromEventList+0xb4>)
   830ba:	4619      	mov	r1, r3
   830bc:	4b0f      	ldr	r3, [pc, #60]	; (830fc <xTaskRemoveFromEventList+0xb0>)
   830be:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   830c0:	68bb      	ldr	r3, [r7, #8]
   830c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   830c4:	4b0f      	ldr	r3, [pc, #60]	; (83104 <xTaskRemoveFromEventList+0xb8>)
   830c6:	681b      	ldr	r3, [r3, #0]
   830c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   830ca:	429a      	cmp	r2, r3
   830cc:	d905      	bls.n	830da <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   830ce:	2301      	movs	r3, #1
   830d0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   830d2:	4b0d      	ldr	r3, [pc, #52]	; (83108 <xTaskRemoveFromEventList+0xbc>)
   830d4:	2201      	movs	r2, #1
   830d6:	601a      	str	r2, [r3, #0]
   830d8:	e001      	b.n	830de <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   830da:	2300      	movs	r3, #0
   830dc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   830de:	68fb      	ldr	r3, [r7, #12]
}
   830e0:	4618      	mov	r0, r3
   830e2:	3710      	adds	r7, #16
   830e4:	46bd      	mov	sp, r7
   830e6:	bd80      	pop	{r7, pc}
   830e8:	0008139d 	.word	0x0008139d
   830ec:	00081125 	.word	0x00081125
   830f0:	2007a5dc 	.word	0x2007a5dc
   830f4:	2007a5c4 	.word	0x2007a5c4
   830f8:	2007a4e8 	.word	0x2007a4e8
   830fc:	0008106d 	.word	0x0008106d
   83100:	2007a57c 	.word	0x2007a57c
   83104:	2007a4e4 	.word	0x2007a4e4
   83108:	2007a5d0 	.word	0x2007a5d0

0008310c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   8310c:	b580      	push	{r7, lr}
   8310e:	b082      	sub	sp, #8
   83110:	af00      	add	r7, sp, #0
   83112:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   83114:	687b      	ldr	r3, [r7, #4]
   83116:	2b00      	cmp	r3, #0
   83118:	d102      	bne.n	83120 <vTaskSetTimeOutState+0x14>
   8311a:	4b07      	ldr	r3, [pc, #28]	; (83138 <vTaskSetTimeOutState+0x2c>)
   8311c:	4798      	blx	r3
   8311e:	e7fe      	b.n	8311e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   83120:	4b06      	ldr	r3, [pc, #24]	; (8313c <vTaskSetTimeOutState+0x30>)
   83122:	681a      	ldr	r2, [r3, #0]
   83124:	687b      	ldr	r3, [r7, #4]
   83126:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   83128:	4b05      	ldr	r3, [pc, #20]	; (83140 <vTaskSetTimeOutState+0x34>)
   8312a:	681a      	ldr	r2, [r3, #0]
   8312c:	687b      	ldr	r3, [r7, #4]
   8312e:	605a      	str	r2, [r3, #4]
}
   83130:	3708      	adds	r7, #8
   83132:	46bd      	mov	sp, r7
   83134:	bd80      	pop	{r7, pc}
   83136:	bf00      	nop
   83138:	0008139d 	.word	0x0008139d
   8313c:	2007a5d4 	.word	0x2007a5d4
   83140:	2007a5c0 	.word	0x2007a5c0

00083144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   83144:	b580      	push	{r7, lr}
   83146:	b084      	sub	sp, #16
   83148:	af00      	add	r7, sp, #0
   8314a:	6078      	str	r0, [r7, #4]
   8314c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   8314e:	687b      	ldr	r3, [r7, #4]
   83150:	2b00      	cmp	r3, #0
   83152:	d102      	bne.n	8315a <xTaskCheckForTimeOut+0x16>
   83154:	4b21      	ldr	r3, [pc, #132]	; (831dc <xTaskCheckForTimeOut+0x98>)
   83156:	4798      	blx	r3
   83158:	e7fe      	b.n	83158 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   8315a:	683b      	ldr	r3, [r7, #0]
   8315c:	2b00      	cmp	r3, #0
   8315e:	d102      	bne.n	83166 <xTaskCheckForTimeOut+0x22>
   83160:	4b1e      	ldr	r3, [pc, #120]	; (831dc <xTaskCheckForTimeOut+0x98>)
   83162:	4798      	blx	r3
   83164:	e7fe      	b.n	83164 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   83166:	4b1e      	ldr	r3, [pc, #120]	; (831e0 <xTaskCheckForTimeOut+0x9c>)
   83168:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   8316a:	4b1e      	ldr	r3, [pc, #120]	; (831e4 <xTaskCheckForTimeOut+0xa0>)
   8316c:	681b      	ldr	r3, [r3, #0]
   8316e:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   83170:	683b      	ldr	r3, [r7, #0]
   83172:	681b      	ldr	r3, [r3, #0]
   83174:	f1b3 3fff 	cmp.w	r3, #4294967295
   83178:	d102      	bne.n	83180 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   8317a:	2300      	movs	r3, #0
   8317c:	60fb      	str	r3, [r7, #12]
   8317e:	e026      	b.n	831ce <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   83180:	687b      	ldr	r3, [r7, #4]
   83182:	681a      	ldr	r2, [r3, #0]
   83184:	4b18      	ldr	r3, [pc, #96]	; (831e8 <xTaskCheckForTimeOut+0xa4>)
   83186:	681b      	ldr	r3, [r3, #0]
   83188:	429a      	cmp	r2, r3
   8318a:	d007      	beq.n	8319c <xTaskCheckForTimeOut+0x58>
   8318c:	687b      	ldr	r3, [r7, #4]
   8318e:	685a      	ldr	r2, [r3, #4]
   83190:	68bb      	ldr	r3, [r7, #8]
   83192:	429a      	cmp	r2, r3
   83194:	d802      	bhi.n	8319c <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   83196:	2301      	movs	r3, #1
   83198:	60fb      	str	r3, [r7, #12]
   8319a:	e018      	b.n	831ce <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   8319c:	687b      	ldr	r3, [r7, #4]
   8319e:	685b      	ldr	r3, [r3, #4]
   831a0:	68ba      	ldr	r2, [r7, #8]
   831a2:	1ad2      	subs	r2, r2, r3
   831a4:	683b      	ldr	r3, [r7, #0]
   831a6:	681b      	ldr	r3, [r3, #0]
   831a8:	429a      	cmp	r2, r3
   831aa:	d20e      	bcs.n	831ca <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   831ac:	683b      	ldr	r3, [r7, #0]
   831ae:	681a      	ldr	r2, [r3, #0]
   831b0:	687b      	ldr	r3, [r7, #4]
   831b2:	6859      	ldr	r1, [r3, #4]
   831b4:	68bb      	ldr	r3, [r7, #8]
   831b6:	1acb      	subs	r3, r1, r3
   831b8:	441a      	add	r2, r3
   831ba:	683b      	ldr	r3, [r7, #0]
   831bc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   831be:	6878      	ldr	r0, [r7, #4]
   831c0:	4b0a      	ldr	r3, [pc, #40]	; (831ec <xTaskCheckForTimeOut+0xa8>)
   831c2:	4798      	blx	r3
			xReturn = pdFALSE;
   831c4:	2300      	movs	r3, #0
   831c6:	60fb      	str	r3, [r7, #12]
   831c8:	e001      	b.n	831ce <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   831ca:	2301      	movs	r3, #1
   831cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   831ce:	4b08      	ldr	r3, [pc, #32]	; (831f0 <xTaskCheckForTimeOut+0xac>)
   831d0:	4798      	blx	r3

	return xReturn;
   831d2:	68fb      	ldr	r3, [r7, #12]
}
   831d4:	4618      	mov	r0, r3
   831d6:	3710      	adds	r7, #16
   831d8:	46bd      	mov	sp, r7
   831da:	bd80      	pop	{r7, pc}
   831dc:	0008139d 	.word	0x0008139d
   831e0:	00081321 	.word	0x00081321
   831e4:	2007a5c0 	.word	0x2007a5c0
   831e8:	2007a5d4 	.word	0x2007a5d4
   831ec:	0008310d 	.word	0x0008310d
   831f0:	00081365 	.word	0x00081365

000831f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   831f4:	b480      	push	{r7}
   831f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   831f8:	4b03      	ldr	r3, [pc, #12]	; (83208 <vTaskMissedYield+0x14>)
   831fa:	2201      	movs	r2, #1
   831fc:	601a      	str	r2, [r3, #0]
}
   831fe:	46bd      	mov	sp, r7
   83200:	f85d 7b04 	ldr.w	r7, [sp], #4
   83204:	4770      	bx	lr
   83206:	bf00      	nop
   83208:	2007a5d0 	.word	0x2007a5d0

0008320c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   8320c:	b580      	push	{r7, lr}
   8320e:	b082      	sub	sp, #8
   83210:	af00      	add	r7, sp, #0
   83212:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   83214:	4b04      	ldr	r3, [pc, #16]	; (83228 <prvIdleTask+0x1c>)
   83216:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   83218:	4b04      	ldr	r3, [pc, #16]	; (8322c <prvIdleTask+0x20>)
   8321a:	681b      	ldr	r3, [r3, #0]
   8321c:	2b01      	cmp	r3, #1
   8321e:	d901      	bls.n	83224 <prvIdleTask+0x18>
			{
				taskYIELD();
   83220:	4b03      	ldr	r3, [pc, #12]	; (83230 <prvIdleTask+0x24>)
   83222:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   83224:	e7f6      	b.n	83214 <prvIdleTask+0x8>
   83226:	bf00      	nop
   83228:	0008334d 	.word	0x0008334d
   8322c:	2007a4e8 	.word	0x2007a4e8
   83230:	00081301 	.word	0x00081301

00083234 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83234:	b580      	push	{r7, lr}
   83236:	b086      	sub	sp, #24
   83238:	af00      	add	r7, sp, #0
   8323a:	60f8      	str	r0, [r7, #12]
   8323c:	60b9      	str	r1, [r7, #8]
   8323e:	607a      	str	r2, [r7, #4]
   83240:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   83242:	2300      	movs	r3, #0
   83244:	617b      	str	r3, [r7, #20]
   83246:	e012      	b.n	8326e <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   83248:	68ba      	ldr	r2, [r7, #8]
   8324a:	697b      	ldr	r3, [r7, #20]
   8324c:	4413      	add	r3, r2
   8324e:	781a      	ldrb	r2, [r3, #0]
   83250:	68f9      	ldr	r1, [r7, #12]
   83252:	697b      	ldr	r3, [r7, #20]
   83254:	440b      	add	r3, r1
   83256:	3330      	adds	r3, #48	; 0x30
   83258:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   8325a:	68ba      	ldr	r2, [r7, #8]
   8325c:	697b      	ldr	r3, [r7, #20]
   8325e:	4413      	add	r3, r2
   83260:	781b      	ldrb	r3, [r3, #0]
   83262:	2b00      	cmp	r3, #0
   83264:	d100      	bne.n	83268 <prvInitialiseTCBVariables+0x34>
		{
			break;
   83266:	e005      	b.n	83274 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   83268:	697b      	ldr	r3, [r7, #20]
   8326a:	3301      	adds	r3, #1
   8326c:	617b      	str	r3, [r7, #20]
   8326e:	697b      	ldr	r3, [r7, #20]
   83270:	2b09      	cmp	r3, #9
   83272:	d9e9      	bls.n	83248 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   83274:	68fb      	ldr	r3, [r7, #12]
   83276:	2200      	movs	r2, #0
   83278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   8327c:	687b      	ldr	r3, [r7, #4]
   8327e:	2b04      	cmp	r3, #4
   83280:	d901      	bls.n	83286 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   83282:	2304      	movs	r3, #4
   83284:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   83286:	68fb      	ldr	r3, [r7, #12]
   83288:	687a      	ldr	r2, [r7, #4]
   8328a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   8328c:	68fb      	ldr	r3, [r7, #12]
   8328e:	687a      	ldr	r2, [r7, #4]
   83290:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   83292:	68fb      	ldr	r3, [r7, #12]
   83294:	2200      	movs	r2, #0
   83296:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   83298:	68fb      	ldr	r3, [r7, #12]
   8329a:	3304      	adds	r3, #4
   8329c:	4618      	mov	r0, r3
   8329e:	4b0a      	ldr	r3, [pc, #40]	; (832c8 <prvInitialiseTCBVariables+0x94>)
   832a0:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   832a2:	68fb      	ldr	r3, [r7, #12]
   832a4:	3318      	adds	r3, #24
   832a6:	4618      	mov	r0, r3
   832a8:	4b07      	ldr	r3, [pc, #28]	; (832c8 <prvInitialiseTCBVariables+0x94>)
   832aa:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   832ac:	68fb      	ldr	r3, [r7, #12]
   832ae:	68fa      	ldr	r2, [r7, #12]
   832b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   832b2:	687b      	ldr	r3, [r7, #4]
   832b4:	f1c3 0205 	rsb	r2, r3, #5
   832b8:	68fb      	ldr	r3, [r7, #12]
   832ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   832bc:	68fb      	ldr	r3, [r7, #12]
   832be:	68fa      	ldr	r2, [r7, #12]
   832c0:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   832c2:	3718      	adds	r7, #24
   832c4:	46bd      	mov	sp, r7
   832c6:	bd80      	pop	{r7, pc}
   832c8:	00081055 	.word	0x00081055

000832cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   832cc:	b580      	push	{r7, lr}
   832ce:	b082      	sub	sp, #8
   832d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   832d2:	2300      	movs	r3, #0
   832d4:	607b      	str	r3, [r7, #4]
   832d6:	e00c      	b.n	832f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   832d8:	687a      	ldr	r2, [r7, #4]
   832da:	4613      	mov	r3, r2
   832dc:	009b      	lsls	r3, r3, #2
   832de:	4413      	add	r3, r2
   832e0:	009b      	lsls	r3, r3, #2
   832e2:	4a11      	ldr	r2, [pc, #68]	; (83328 <prvInitialiseTaskLists+0x5c>)
   832e4:	4413      	add	r3, r2
   832e6:	4618      	mov	r0, r3
   832e8:	4b10      	ldr	r3, [pc, #64]	; (8332c <prvInitialiseTaskLists+0x60>)
   832ea:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   832ec:	687b      	ldr	r3, [r7, #4]
   832ee:	3301      	adds	r3, #1
   832f0:	607b      	str	r3, [r7, #4]
   832f2:	687b      	ldr	r3, [r7, #4]
   832f4:	2b04      	cmp	r3, #4
   832f6:	d9ef      	bls.n	832d8 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   832f8:	480d      	ldr	r0, [pc, #52]	; (83330 <prvInitialiseTaskLists+0x64>)
   832fa:	4b0c      	ldr	r3, [pc, #48]	; (8332c <prvInitialiseTaskLists+0x60>)
   832fc:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   832fe:	480d      	ldr	r0, [pc, #52]	; (83334 <prvInitialiseTaskLists+0x68>)
   83300:	4b0a      	ldr	r3, [pc, #40]	; (8332c <prvInitialiseTaskLists+0x60>)
   83302:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   83304:	480c      	ldr	r0, [pc, #48]	; (83338 <prvInitialiseTaskLists+0x6c>)
   83306:	4b09      	ldr	r3, [pc, #36]	; (8332c <prvInitialiseTaskLists+0x60>)
   83308:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   8330a:	480c      	ldr	r0, [pc, #48]	; (8333c <prvInitialiseTaskLists+0x70>)
   8330c:	4b07      	ldr	r3, [pc, #28]	; (8332c <prvInitialiseTaskLists+0x60>)
   8330e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   83310:	480b      	ldr	r0, [pc, #44]	; (83340 <prvInitialiseTaskLists+0x74>)
   83312:	4b06      	ldr	r3, [pc, #24]	; (8332c <prvInitialiseTaskLists+0x60>)
   83314:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   83316:	4b0b      	ldr	r3, [pc, #44]	; (83344 <prvInitialiseTaskLists+0x78>)
   83318:	4a05      	ldr	r2, [pc, #20]	; (83330 <prvInitialiseTaskLists+0x64>)
   8331a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8331c:	4b0a      	ldr	r3, [pc, #40]	; (83348 <prvInitialiseTaskLists+0x7c>)
   8331e:	4a05      	ldr	r2, [pc, #20]	; (83334 <prvInitialiseTaskLists+0x68>)
   83320:	601a      	str	r2, [r3, #0]
}
   83322:	3708      	adds	r7, #8
   83324:	46bd      	mov	sp, r7
   83326:	bd80      	pop	{r7, pc}
   83328:	2007a4e8 	.word	0x2007a4e8
   8332c:	00081015 	.word	0x00081015
   83330:	2007a54c 	.word	0x2007a54c
   83334:	2007a560 	.word	0x2007a560
   83338:	2007a57c 	.word	0x2007a57c
   8333c:	2007a590 	.word	0x2007a590
   83340:	2007a5a8 	.word	0x2007a5a8
   83344:	2007a574 	.word	0x2007a574
   83348:	2007a578 	.word	0x2007a578

0008334c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   8334c:	b580      	push	{r7, lr}
   8334e:	b082      	sub	sp, #8
   83350:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   83352:	e028      	b.n	833a6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   83354:	4b17      	ldr	r3, [pc, #92]	; (833b4 <prvCheckTasksWaitingTermination+0x68>)
   83356:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   83358:	4b17      	ldr	r3, [pc, #92]	; (833b8 <prvCheckTasksWaitingTermination+0x6c>)
   8335a:	681b      	ldr	r3, [r3, #0]
   8335c:	2b00      	cmp	r3, #0
   8335e:	bf14      	ite	ne
   83360:	2300      	movne	r3, #0
   83362:	2301      	moveq	r3, #1
   83364:	b2db      	uxtb	r3, r3
   83366:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   83368:	4b14      	ldr	r3, [pc, #80]	; (833bc <prvCheckTasksWaitingTermination+0x70>)
   8336a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   8336c:	687b      	ldr	r3, [r7, #4]
   8336e:	2b00      	cmp	r3, #0
   83370:	d119      	bne.n	833a6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   83372:	4b13      	ldr	r3, [pc, #76]	; (833c0 <prvCheckTasksWaitingTermination+0x74>)
   83374:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   83376:	4b10      	ldr	r3, [pc, #64]	; (833b8 <prvCheckTasksWaitingTermination+0x6c>)
   83378:	68db      	ldr	r3, [r3, #12]
   8337a:	68db      	ldr	r3, [r3, #12]
   8337c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   8337e:	683b      	ldr	r3, [r7, #0]
   83380:	3304      	adds	r3, #4
   83382:	4618      	mov	r0, r3
   83384:	4b0f      	ldr	r3, [pc, #60]	; (833c4 <prvCheckTasksWaitingTermination+0x78>)
   83386:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   83388:	4b0f      	ldr	r3, [pc, #60]	; (833c8 <prvCheckTasksWaitingTermination+0x7c>)
   8338a:	681b      	ldr	r3, [r3, #0]
   8338c:	1e5a      	subs	r2, r3, #1
   8338e:	4b0e      	ldr	r3, [pc, #56]	; (833c8 <prvCheckTasksWaitingTermination+0x7c>)
   83390:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   83392:	4b0e      	ldr	r3, [pc, #56]	; (833cc <prvCheckTasksWaitingTermination+0x80>)
   83394:	681b      	ldr	r3, [r3, #0]
   83396:	1e5a      	subs	r2, r3, #1
   83398:	4b0c      	ldr	r3, [pc, #48]	; (833cc <prvCheckTasksWaitingTermination+0x80>)
   8339a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   8339c:	4b0c      	ldr	r3, [pc, #48]	; (833d0 <prvCheckTasksWaitingTermination+0x84>)
   8339e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   833a0:	6838      	ldr	r0, [r7, #0]
   833a2:	4b0c      	ldr	r3, [pc, #48]	; (833d4 <prvCheckTasksWaitingTermination+0x88>)
   833a4:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   833a6:	4b09      	ldr	r3, [pc, #36]	; (833cc <prvCheckTasksWaitingTermination+0x80>)
   833a8:	681b      	ldr	r3, [r3, #0]
   833aa:	2b00      	cmp	r3, #0
   833ac:	d1d2      	bne.n	83354 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   833ae:	3708      	adds	r7, #8
   833b0:	46bd      	mov	sp, r7
   833b2:	bd80      	pop	{r7, pc}
   833b4:	00082b31 	.word	0x00082b31
   833b8:	2007a590 	.word	0x2007a590
   833bc:	00082b4d 	.word	0x00082b4d
   833c0:	00081321 	.word	0x00081321
   833c4:	00081125 	.word	0x00081125
   833c8:	2007a5bc 	.word	0x2007a5bc
   833cc:	2007a5a4 	.word	0x2007a5a4
   833d0:	00081365 	.word	0x00081365
   833d4:	000834b9 	.word	0x000834b9

000833d8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   833d8:	b580      	push	{r7, lr}
   833da:	b082      	sub	sp, #8
   833dc:	af00      	add	r7, sp, #0
   833de:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   833e0:	4b13      	ldr	r3, [pc, #76]	; (83430 <prvAddCurrentTaskToDelayedList+0x58>)
   833e2:	681b      	ldr	r3, [r3, #0]
   833e4:	687a      	ldr	r2, [r7, #4]
   833e6:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   833e8:	4b12      	ldr	r3, [pc, #72]	; (83434 <prvAddCurrentTaskToDelayedList+0x5c>)
   833ea:	681b      	ldr	r3, [r3, #0]
   833ec:	687a      	ldr	r2, [r7, #4]
   833ee:	429a      	cmp	r2, r3
   833f0:	d209      	bcs.n	83406 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   833f2:	4b11      	ldr	r3, [pc, #68]	; (83438 <prvAddCurrentTaskToDelayedList+0x60>)
   833f4:	681a      	ldr	r2, [r3, #0]
   833f6:	4b0e      	ldr	r3, [pc, #56]	; (83430 <prvAddCurrentTaskToDelayedList+0x58>)
   833f8:	681b      	ldr	r3, [r3, #0]
   833fa:	3304      	adds	r3, #4
   833fc:	4610      	mov	r0, r2
   833fe:	4619      	mov	r1, r3
   83400:	4b0e      	ldr	r3, [pc, #56]	; (8343c <prvAddCurrentTaskToDelayedList+0x64>)
   83402:	4798      	blx	r3
   83404:	e010      	b.n	83428 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   83406:	4b0e      	ldr	r3, [pc, #56]	; (83440 <prvAddCurrentTaskToDelayedList+0x68>)
   83408:	681a      	ldr	r2, [r3, #0]
   8340a:	4b09      	ldr	r3, [pc, #36]	; (83430 <prvAddCurrentTaskToDelayedList+0x58>)
   8340c:	681b      	ldr	r3, [r3, #0]
   8340e:	3304      	adds	r3, #4
   83410:	4610      	mov	r0, r2
   83412:	4619      	mov	r1, r3
   83414:	4b09      	ldr	r3, [pc, #36]	; (8343c <prvAddCurrentTaskToDelayedList+0x64>)
   83416:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   83418:	4b0a      	ldr	r3, [pc, #40]	; (83444 <prvAddCurrentTaskToDelayedList+0x6c>)
   8341a:	681b      	ldr	r3, [r3, #0]
   8341c:	687a      	ldr	r2, [r7, #4]
   8341e:	429a      	cmp	r2, r3
   83420:	d202      	bcs.n	83428 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   83422:	4b08      	ldr	r3, [pc, #32]	; (83444 <prvAddCurrentTaskToDelayedList+0x6c>)
   83424:	687a      	ldr	r2, [r7, #4]
   83426:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   83428:	3708      	adds	r7, #8
   8342a:	46bd      	mov	sp, r7
   8342c:	bd80      	pop	{r7, pc}
   8342e:	bf00      	nop
   83430:	2007a4e4 	.word	0x2007a4e4
   83434:	2007a5c0 	.word	0x2007a5c0
   83438:	2007a578 	.word	0x2007a578
   8343c:	000810b5 	.word	0x000810b5
   83440:	2007a574 	.word	0x2007a574
   83444:	20070008 	.word	0x20070008

00083448 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   83448:	b580      	push	{r7, lr}
   8344a:	b084      	sub	sp, #16
   8344c:	af00      	add	r7, sp, #0
   8344e:	4603      	mov	r3, r0
   83450:	6039      	str	r1, [r7, #0]
   83452:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   83454:	2048      	movs	r0, #72	; 0x48
   83456:	4b15      	ldr	r3, [pc, #84]	; (834ac <prvAllocateTCBAndStack+0x64>)
   83458:	4798      	blx	r3
   8345a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   8345c:	68fb      	ldr	r3, [r7, #12]
   8345e:	2b00      	cmp	r3, #0
   83460:	d01f      	beq.n	834a2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83462:	683b      	ldr	r3, [r7, #0]
   83464:	2b00      	cmp	r3, #0
   83466:	d106      	bne.n	83476 <prvAllocateTCBAndStack+0x2e>
   83468:	88fb      	ldrh	r3, [r7, #6]
   8346a:	009b      	lsls	r3, r3, #2
   8346c:	4618      	mov	r0, r3
   8346e:	4b0f      	ldr	r3, [pc, #60]	; (834ac <prvAllocateTCBAndStack+0x64>)
   83470:	4798      	blx	r3
   83472:	4603      	mov	r3, r0
   83474:	e000      	b.n	83478 <prvAllocateTCBAndStack+0x30>
   83476:	683b      	ldr	r3, [r7, #0]
   83478:	68fa      	ldr	r2, [r7, #12]
   8347a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   8347c:	68fb      	ldr	r3, [r7, #12]
   8347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83480:	2b00      	cmp	r3, #0
   83482:	d105      	bne.n	83490 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   83484:	68f8      	ldr	r0, [r7, #12]
   83486:	4b0a      	ldr	r3, [pc, #40]	; (834b0 <prvAllocateTCBAndStack+0x68>)
   83488:	4798      	blx	r3
			pxNewTCB = NULL;
   8348a:	2300      	movs	r3, #0
   8348c:	60fb      	str	r3, [r7, #12]
   8348e:	e008      	b.n	834a2 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   83490:	68fb      	ldr	r3, [r7, #12]
   83492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83494:	88fb      	ldrh	r3, [r7, #6]
   83496:	009b      	lsls	r3, r3, #2
   83498:	4610      	mov	r0, r2
   8349a:	21a5      	movs	r1, #165	; 0xa5
   8349c:	461a      	mov	r2, r3
   8349e:	4b05      	ldr	r3, [pc, #20]	; (834b4 <prvAllocateTCBAndStack+0x6c>)
   834a0:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   834a2:	68fb      	ldr	r3, [r7, #12]
}
   834a4:	4618      	mov	r0, r3
   834a6:	3710      	adds	r7, #16
   834a8:	46bd      	mov	sp, r7
   834aa:	bd80      	pop	{r7, pc}
   834ac:	000814c1 	.word	0x000814c1
   834b0:	00081639 	.word	0x00081639
   834b4:	0008650d 	.word	0x0008650d

000834b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   834b8:	b580      	push	{r7, lr}
   834ba:	b082      	sub	sp, #8
   834bc:	af00      	add	r7, sp, #0
   834be:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   834c0:	687b      	ldr	r3, [r7, #4]
   834c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   834c4:	4618      	mov	r0, r3
   834c6:	4b04      	ldr	r3, [pc, #16]	; (834d8 <prvDeleteTCB+0x20>)
   834c8:	4798      	blx	r3
		vPortFree( pxTCB );
   834ca:	6878      	ldr	r0, [r7, #4]
   834cc:	4b02      	ldr	r3, [pc, #8]	; (834d8 <prvDeleteTCB+0x20>)
   834ce:	4798      	blx	r3
	}
   834d0:	3708      	adds	r7, #8
   834d2:	46bd      	mov	sp, r7
   834d4:	bd80      	pop	{r7, pc}
   834d6:	bf00      	nop
   834d8:	00081639 	.word	0x00081639

000834dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   834dc:	b480      	push	{r7}
   834de:	b083      	sub	sp, #12
   834e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   834e2:	4b0e      	ldr	r3, [pc, #56]	; (8351c <prvResetNextTaskUnblockTime+0x40>)
   834e4:	681b      	ldr	r3, [r3, #0]
   834e6:	681b      	ldr	r3, [r3, #0]
   834e8:	2b00      	cmp	r3, #0
   834ea:	d101      	bne.n	834f0 <prvResetNextTaskUnblockTime+0x14>
   834ec:	2301      	movs	r3, #1
   834ee:	e000      	b.n	834f2 <prvResetNextTaskUnblockTime+0x16>
   834f0:	2300      	movs	r3, #0
   834f2:	2b00      	cmp	r3, #0
   834f4:	d004      	beq.n	83500 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   834f6:	4b0a      	ldr	r3, [pc, #40]	; (83520 <prvResetNextTaskUnblockTime+0x44>)
   834f8:	f04f 32ff 	mov.w	r2, #4294967295
   834fc:	601a      	str	r2, [r3, #0]
   834fe:	e008      	b.n	83512 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   83500:	4b06      	ldr	r3, [pc, #24]	; (8351c <prvResetNextTaskUnblockTime+0x40>)
   83502:	681b      	ldr	r3, [r3, #0]
   83504:	68db      	ldr	r3, [r3, #12]
   83506:	68db      	ldr	r3, [r3, #12]
   83508:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8350a:	687b      	ldr	r3, [r7, #4]
   8350c:	685a      	ldr	r2, [r3, #4]
   8350e:	4b04      	ldr	r3, [pc, #16]	; (83520 <prvResetNextTaskUnblockTime+0x44>)
   83510:	601a      	str	r2, [r3, #0]
	}
}
   83512:	370c      	adds	r7, #12
   83514:	46bd      	mov	sp, r7
   83516:	f85d 7b04 	ldr.w	r7, [sp], #4
   8351a:	4770      	bx	lr
   8351c:	2007a574 	.word	0x2007a574
   83520:	20070008 	.word	0x20070008

00083524 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   83524:	b480      	push	{r7}
   83526:	b083      	sub	sp, #12
   83528:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   8352a:	4b05      	ldr	r3, [pc, #20]	; (83540 <xTaskGetCurrentTaskHandle+0x1c>)
   8352c:	681b      	ldr	r3, [r3, #0]
   8352e:	607b      	str	r3, [r7, #4]

		return xReturn;
   83530:	687b      	ldr	r3, [r7, #4]
	}
   83532:	4618      	mov	r0, r3
   83534:	370c      	adds	r7, #12
   83536:	46bd      	mov	sp, r7
   83538:	f85d 7b04 	ldr.w	r7, [sp], #4
   8353c:	4770      	bx	lr
   8353e:	bf00      	nop
   83540:	2007a4e4 	.word	0x2007a4e4

00083544 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   83544:	b480      	push	{r7}
   83546:	b083      	sub	sp, #12
   83548:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   8354a:	4b0b      	ldr	r3, [pc, #44]	; (83578 <xTaskGetSchedulerState+0x34>)
   8354c:	681b      	ldr	r3, [r3, #0]
   8354e:	2b00      	cmp	r3, #0
   83550:	d102      	bne.n	83558 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   83552:	2301      	movs	r3, #1
   83554:	607b      	str	r3, [r7, #4]
   83556:	e008      	b.n	8356a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83558:	4b08      	ldr	r3, [pc, #32]	; (8357c <xTaskGetSchedulerState+0x38>)
   8355a:	681b      	ldr	r3, [r3, #0]
   8355c:	2b00      	cmp	r3, #0
   8355e:	d102      	bne.n	83566 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   83560:	2302      	movs	r3, #2
   83562:	607b      	str	r3, [r7, #4]
   83564:	e001      	b.n	8356a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   83566:	2300      	movs	r3, #0
   83568:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   8356a:	687b      	ldr	r3, [r7, #4]
	}
   8356c:	4618      	mov	r0, r3
   8356e:	370c      	adds	r7, #12
   83570:	46bd      	mov	sp, r7
   83572:	f85d 7b04 	ldr.w	r7, [sp], #4
   83576:	4770      	bx	lr
   83578:	2007a5c8 	.word	0x2007a5c8
   8357c:	2007a5dc 	.word	0x2007a5dc

00083580 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   83580:	b580      	push	{r7, lr}
   83582:	b084      	sub	sp, #16
   83584:	af00      	add	r7, sp, #0
   83586:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   83588:	687b      	ldr	r3, [r7, #4]
   8358a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8358c:	687b      	ldr	r3, [r7, #4]
   8358e:	2b00      	cmp	r3, #0
   83590:	d062      	beq.n	83658 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   83592:	68fb      	ldr	r3, [r7, #12]
   83594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83596:	4b32      	ldr	r3, [pc, #200]	; (83660 <vTaskPriorityInherit+0xe0>)
   83598:	681b      	ldr	r3, [r3, #0]
   8359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8359c:	429a      	cmp	r2, r3
   8359e:	d25b      	bcs.n	83658 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   835a0:	68fb      	ldr	r3, [r7, #12]
   835a2:	699b      	ldr	r3, [r3, #24]
   835a4:	2b00      	cmp	r3, #0
   835a6:	db06      	blt.n	835b6 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   835a8:	4b2d      	ldr	r3, [pc, #180]	; (83660 <vTaskPriorityInherit+0xe0>)
   835aa:	681b      	ldr	r3, [r3, #0]
   835ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   835ae:	f1c3 0205 	rsb	r2, r3, #5
   835b2:	68fb      	ldr	r3, [r7, #12]
   835b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   835b6:	68fb      	ldr	r3, [r7, #12]
   835b8:	6959      	ldr	r1, [r3, #20]
   835ba:	68fb      	ldr	r3, [r7, #12]
   835bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   835be:	4613      	mov	r3, r2
   835c0:	009b      	lsls	r3, r3, #2
   835c2:	4413      	add	r3, r2
   835c4:	009b      	lsls	r3, r3, #2
   835c6:	4a27      	ldr	r2, [pc, #156]	; (83664 <vTaskPriorityInherit+0xe4>)
   835c8:	4413      	add	r3, r2
   835ca:	4299      	cmp	r1, r3
   835cc:	d101      	bne.n	835d2 <vTaskPriorityInherit+0x52>
   835ce:	2301      	movs	r3, #1
   835d0:	e000      	b.n	835d4 <vTaskPriorityInherit+0x54>
   835d2:	2300      	movs	r3, #0
   835d4:	2b00      	cmp	r3, #0
   835d6:	d03a      	beq.n	8364e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   835d8:	68fb      	ldr	r3, [r7, #12]
   835da:	3304      	adds	r3, #4
   835dc:	4618      	mov	r0, r3
   835de:	4b22      	ldr	r3, [pc, #136]	; (83668 <vTaskPriorityInherit+0xe8>)
   835e0:	4798      	blx	r3
   835e2:	4603      	mov	r3, r0
   835e4:	2b00      	cmp	r3, #0
   835e6:	d115      	bne.n	83614 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   835e8:	68fb      	ldr	r3, [r7, #12]
   835ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   835ec:	491d      	ldr	r1, [pc, #116]	; (83664 <vTaskPriorityInherit+0xe4>)
   835ee:	4613      	mov	r3, r2
   835f0:	009b      	lsls	r3, r3, #2
   835f2:	4413      	add	r3, r2
   835f4:	009b      	lsls	r3, r3, #2
   835f6:	440b      	add	r3, r1
   835f8:	681b      	ldr	r3, [r3, #0]
   835fa:	2b00      	cmp	r3, #0
   835fc:	d10a      	bne.n	83614 <vTaskPriorityInherit+0x94>
   835fe:	68fb      	ldr	r3, [r7, #12]
   83600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83602:	2201      	movs	r2, #1
   83604:	fa02 f303 	lsl.w	r3, r2, r3
   83608:	43da      	mvns	r2, r3
   8360a:	4b18      	ldr	r3, [pc, #96]	; (8366c <vTaskPriorityInherit+0xec>)
   8360c:	681b      	ldr	r3, [r3, #0]
   8360e:	401a      	ands	r2, r3
   83610:	4b16      	ldr	r3, [pc, #88]	; (8366c <vTaskPriorityInherit+0xec>)
   83612:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   83614:	4b12      	ldr	r3, [pc, #72]	; (83660 <vTaskPriorityInherit+0xe0>)
   83616:	681b      	ldr	r3, [r3, #0]
   83618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8361a:	68fb      	ldr	r3, [r7, #12]
   8361c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   8361e:	68fb      	ldr	r3, [r7, #12]
   83620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83622:	2201      	movs	r2, #1
   83624:	409a      	lsls	r2, r3
   83626:	4b11      	ldr	r3, [pc, #68]	; (8366c <vTaskPriorityInherit+0xec>)
   83628:	681b      	ldr	r3, [r3, #0]
   8362a:	431a      	orrs	r2, r3
   8362c:	4b0f      	ldr	r3, [pc, #60]	; (8366c <vTaskPriorityInherit+0xec>)
   8362e:	601a      	str	r2, [r3, #0]
   83630:	68fb      	ldr	r3, [r7, #12]
   83632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83634:	4613      	mov	r3, r2
   83636:	009b      	lsls	r3, r3, #2
   83638:	4413      	add	r3, r2
   8363a:	009b      	lsls	r3, r3, #2
   8363c:	4a09      	ldr	r2, [pc, #36]	; (83664 <vTaskPriorityInherit+0xe4>)
   8363e:	441a      	add	r2, r3
   83640:	68fb      	ldr	r3, [r7, #12]
   83642:	3304      	adds	r3, #4
   83644:	4610      	mov	r0, r2
   83646:	4619      	mov	r1, r3
   83648:	4b09      	ldr	r3, [pc, #36]	; (83670 <vTaskPriorityInherit+0xf0>)
   8364a:	4798      	blx	r3
   8364c:	e004      	b.n	83658 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8364e:	4b04      	ldr	r3, [pc, #16]	; (83660 <vTaskPriorityInherit+0xe0>)
   83650:	681b      	ldr	r3, [r3, #0]
   83652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83654:	68fb      	ldr	r3, [r7, #12]
   83656:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   83658:	3710      	adds	r7, #16
   8365a:	46bd      	mov	sp, r7
   8365c:	bd80      	pop	{r7, pc}
   8365e:	bf00      	nop
   83660:	2007a4e4 	.word	0x2007a4e4
   83664:	2007a4e8 	.word	0x2007a4e8
   83668:	00081125 	.word	0x00081125
   8366c:	2007a5c4 	.word	0x2007a5c4
   83670:	0008106d 	.word	0x0008106d

00083674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   83674:	b580      	push	{r7, lr}
   83676:	b084      	sub	sp, #16
   83678:	af00      	add	r7, sp, #0
   8367a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   8367c:	687b      	ldr	r3, [r7, #4]
   8367e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   83680:	2300      	movs	r3, #0
   83682:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   83684:	687b      	ldr	r3, [r7, #4]
   83686:	2b00      	cmp	r3, #0
   83688:	d056      	beq.n	83738 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   8368a:	68bb      	ldr	r3, [r7, #8]
   8368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8368e:	2b00      	cmp	r3, #0
   83690:	d102      	bne.n	83698 <xTaskPriorityDisinherit+0x24>
   83692:	4b2c      	ldr	r3, [pc, #176]	; (83744 <xTaskPriorityDisinherit+0xd0>)
   83694:	4798      	blx	r3
   83696:	e7fe      	b.n	83696 <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   83698:	68bb      	ldr	r3, [r7, #8]
   8369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8369c:	1e5a      	subs	r2, r3, #1
   8369e:	68bb      	ldr	r3, [r7, #8]
   836a0:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   836a2:	68bb      	ldr	r3, [r7, #8]
   836a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   836a6:	68bb      	ldr	r3, [r7, #8]
   836a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   836aa:	429a      	cmp	r2, r3
   836ac:	d044      	beq.n	83738 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   836ae:	68bb      	ldr	r3, [r7, #8]
   836b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   836b2:	2b00      	cmp	r3, #0
   836b4:	d140      	bne.n	83738 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   836b6:	68bb      	ldr	r3, [r7, #8]
   836b8:	3304      	adds	r3, #4
   836ba:	4618      	mov	r0, r3
   836bc:	4b22      	ldr	r3, [pc, #136]	; (83748 <xTaskPriorityDisinherit+0xd4>)
   836be:	4798      	blx	r3
   836c0:	4603      	mov	r3, r0
   836c2:	2b00      	cmp	r3, #0
   836c4:	d115      	bne.n	836f2 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   836c6:	68bb      	ldr	r3, [r7, #8]
   836c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   836ca:	4920      	ldr	r1, [pc, #128]	; (8374c <xTaskPriorityDisinherit+0xd8>)
   836cc:	4613      	mov	r3, r2
   836ce:	009b      	lsls	r3, r3, #2
   836d0:	4413      	add	r3, r2
   836d2:	009b      	lsls	r3, r3, #2
   836d4:	440b      	add	r3, r1
   836d6:	681b      	ldr	r3, [r3, #0]
   836d8:	2b00      	cmp	r3, #0
   836da:	d10a      	bne.n	836f2 <xTaskPriorityDisinherit+0x7e>
   836dc:	68bb      	ldr	r3, [r7, #8]
   836de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   836e0:	2201      	movs	r2, #1
   836e2:	fa02 f303 	lsl.w	r3, r2, r3
   836e6:	43da      	mvns	r2, r3
   836e8:	4b19      	ldr	r3, [pc, #100]	; (83750 <xTaskPriorityDisinherit+0xdc>)
   836ea:	681b      	ldr	r3, [r3, #0]
   836ec:	401a      	ands	r2, r3
   836ee:	4b18      	ldr	r3, [pc, #96]	; (83750 <xTaskPriorityDisinherit+0xdc>)
   836f0:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   836f2:	68bb      	ldr	r3, [r7, #8]
   836f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   836f6:	68bb      	ldr	r3, [r7, #8]
   836f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   836fa:	68bb      	ldr	r3, [r7, #8]
   836fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   836fe:	f1c3 0205 	rsb	r2, r3, #5
   83702:	68bb      	ldr	r3, [r7, #8]
   83704:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   83706:	68bb      	ldr	r3, [r7, #8]
   83708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8370a:	2201      	movs	r2, #1
   8370c:	409a      	lsls	r2, r3
   8370e:	4b10      	ldr	r3, [pc, #64]	; (83750 <xTaskPriorityDisinherit+0xdc>)
   83710:	681b      	ldr	r3, [r3, #0]
   83712:	431a      	orrs	r2, r3
   83714:	4b0e      	ldr	r3, [pc, #56]	; (83750 <xTaskPriorityDisinherit+0xdc>)
   83716:	601a      	str	r2, [r3, #0]
   83718:	68bb      	ldr	r3, [r7, #8]
   8371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8371c:	4613      	mov	r3, r2
   8371e:	009b      	lsls	r3, r3, #2
   83720:	4413      	add	r3, r2
   83722:	009b      	lsls	r3, r3, #2
   83724:	4a09      	ldr	r2, [pc, #36]	; (8374c <xTaskPriorityDisinherit+0xd8>)
   83726:	441a      	add	r2, r3
   83728:	68bb      	ldr	r3, [r7, #8]
   8372a:	3304      	adds	r3, #4
   8372c:	4610      	mov	r0, r2
   8372e:	4619      	mov	r1, r3
   83730:	4b08      	ldr	r3, [pc, #32]	; (83754 <xTaskPriorityDisinherit+0xe0>)
   83732:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   83734:	2301      	movs	r3, #1
   83736:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   83738:	68fb      	ldr	r3, [r7, #12]
	}
   8373a:	4618      	mov	r0, r3
   8373c:	3710      	adds	r7, #16
   8373e:	46bd      	mov	sp, r7
   83740:	bd80      	pop	{r7, pc}
   83742:	bf00      	nop
   83744:	0008139d 	.word	0x0008139d
   83748:	00081125 	.word	0x00081125
   8374c:	2007a4e8 	.word	0x2007a4e8
   83750:	2007a5c4 	.word	0x2007a5c4
   83754:	0008106d 	.word	0x0008106d

00083758 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   83758:	b480      	push	{r7}
   8375a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   8375c:	4b07      	ldr	r3, [pc, #28]	; (8377c <pvTaskIncrementMutexHeldCount+0x24>)
   8375e:	681b      	ldr	r3, [r3, #0]
   83760:	2b00      	cmp	r3, #0
   83762:	d004      	beq.n	8376e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   83764:	4b05      	ldr	r3, [pc, #20]	; (8377c <pvTaskIncrementMutexHeldCount+0x24>)
   83766:	681b      	ldr	r3, [r3, #0]
   83768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   8376a:	3201      	adds	r2, #1
   8376c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   8376e:	4b03      	ldr	r3, [pc, #12]	; (8377c <pvTaskIncrementMutexHeldCount+0x24>)
   83770:	681b      	ldr	r3, [r3, #0]
	}
   83772:	4618      	mov	r0, r3
   83774:	46bd      	mov	sp, r7
   83776:	f85d 7b04 	ldr.w	r7, [sp], #4
   8377a:	4770      	bx	lr
   8377c:	2007a4e4 	.word	0x2007a4e4

00083780 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   83780:	b590      	push	{r4, r7, lr}
   83782:	b087      	sub	sp, #28
   83784:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   83786:	2300      	movs	r3, #0
   83788:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   8378a:	4b10      	ldr	r3, [pc, #64]	; (837cc <xTimerCreateTimerTask+0x4c>)
   8378c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   8378e:	4b10      	ldr	r3, [pc, #64]	; (837d0 <xTimerCreateTimerTask+0x50>)
   83790:	681b      	ldr	r3, [r3, #0]
   83792:	2b00      	cmp	r3, #0
   83794:	d00f      	beq.n	837b6 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   83796:	2302      	movs	r3, #2
   83798:	9300      	str	r3, [sp, #0]
   8379a:	2300      	movs	r3, #0
   8379c:	9301      	str	r3, [sp, #4]
   8379e:	2300      	movs	r3, #0
   837a0:	9302      	str	r3, [sp, #8]
   837a2:	2300      	movs	r3, #0
   837a4:	9303      	str	r3, [sp, #12]
   837a6:	480b      	ldr	r0, [pc, #44]	; (837d4 <xTimerCreateTimerTask+0x54>)
   837a8:	490b      	ldr	r1, [pc, #44]	; (837d8 <xTimerCreateTimerTask+0x58>)
   837aa:	f44f 7282 	mov.w	r2, #260	; 0x104
   837ae:	2300      	movs	r3, #0
   837b0:	4c0a      	ldr	r4, [pc, #40]	; (837dc <xTimerCreateTimerTask+0x5c>)
   837b2:	47a0      	blx	r4
   837b4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   837b6:	687b      	ldr	r3, [r7, #4]
   837b8:	2b00      	cmp	r3, #0
   837ba:	d102      	bne.n	837c2 <xTimerCreateTimerTask+0x42>
   837bc:	4b08      	ldr	r3, [pc, #32]	; (837e0 <xTimerCreateTimerTask+0x60>)
   837be:	4798      	blx	r3
   837c0:	e7fe      	b.n	837c0 <xTimerCreateTimerTask+0x40>
	return xReturn;
   837c2:	687b      	ldr	r3, [r7, #4]
}
   837c4:	4618      	mov	r0, r3
   837c6:	370c      	adds	r7, #12
   837c8:	46bd      	mov	sp, r7
   837ca:	bd90      	pop	{r4, r7, pc}
   837cc:	00083d31 	.word	0x00083d31
   837d0:	2007a610 	.word	0x2007a610
   837d4:	00083979 	.word	0x00083979
   837d8:	000866b4 	.word	0x000866b4
   837dc:	000823d5 	.word	0x000823d5
   837e0:	0008139d 	.word	0x0008139d

000837e4 <xTimerCreate>:
/*-----------------------------------------------------------*/

TimerHandle_t xTimerCreate( const char * const pcTimerName, const TickType_t xTimerPeriodInTicks, const UBaseType_t uxAutoReload, void * const pvTimerID, TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   837e4:	b580      	push	{r7, lr}
   837e6:	b086      	sub	sp, #24
   837e8:	af00      	add	r7, sp, #0
   837ea:	60f8      	str	r0, [r7, #12]
   837ec:	60b9      	str	r1, [r7, #8]
   837ee:	607a      	str	r2, [r7, #4]
   837f0:	603b      	str	r3, [r7, #0]
Timer_t *pxNewTimer;

	/* Allocate the timer structure. */
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
   837f2:	68bb      	ldr	r3, [r7, #8]
   837f4:	2b00      	cmp	r3, #0
   837f6:	d102      	bne.n	837fe <xTimerCreate+0x1a>
	{
		pxNewTimer = NULL;
   837f8:	2300      	movs	r3, #0
   837fa:	617b      	str	r3, [r7, #20]
   837fc:	e01c      	b.n	83838 <xTimerCreate+0x54>
	}
	else
	{
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
   837fe:	2028      	movs	r0, #40	; 0x28
   83800:	4b13      	ldr	r3, [pc, #76]	; (83850 <xTimerCreate+0x6c>)
   83802:	4798      	blx	r3
   83804:	6178      	str	r0, [r7, #20]
		if( pxNewTimer != NULL )
   83806:	697b      	ldr	r3, [r7, #20]
   83808:	2b00      	cmp	r3, #0
   8380a:	d015      	beq.n	83838 <xTimerCreate+0x54>
		{
			/* Ensure the infrastructure used by the timer service task has been
			created/initialised. */
			prvCheckForValidListAndQueue();
   8380c:	4b11      	ldr	r3, [pc, #68]	; (83854 <xTimerCreate+0x70>)
   8380e:	4798      	blx	r3

			/* Initialise the timer structure members using the function parameters. */
			pxNewTimer->pcTimerName = pcTimerName;
   83810:	697b      	ldr	r3, [r7, #20]
   83812:	68fa      	ldr	r2, [r7, #12]
   83814:	601a      	str	r2, [r3, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
   83816:	697b      	ldr	r3, [r7, #20]
   83818:	68ba      	ldr	r2, [r7, #8]
   8381a:	619a      	str	r2, [r3, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
   8381c:	697b      	ldr	r3, [r7, #20]
   8381e:	687a      	ldr	r2, [r7, #4]
   83820:	61da      	str	r2, [r3, #28]
			pxNewTimer->pvTimerID = pvTimerID;
   83822:	697b      	ldr	r3, [r7, #20]
   83824:	683a      	ldr	r2, [r7, #0]
   83826:	621a      	str	r2, [r3, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
   83828:	697b      	ldr	r3, [r7, #20]
   8382a:	6a3a      	ldr	r2, [r7, #32]
   8382c:	625a      	str	r2, [r3, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
   8382e:	697b      	ldr	r3, [r7, #20]
   83830:	3304      	adds	r3, #4
   83832:	4618      	mov	r0, r3
   83834:	4b08      	ldr	r3, [pc, #32]	; (83858 <xTimerCreate+0x74>)
   83836:	4798      	blx	r3
			traceTIMER_CREATE_FAILED();
		}
	}

	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
   83838:	68bb      	ldr	r3, [r7, #8]
   8383a:	2b00      	cmp	r3, #0
   8383c:	d102      	bne.n	83844 <xTimerCreate+0x60>
   8383e:	4b07      	ldr	r3, [pc, #28]	; (8385c <xTimerCreate+0x78>)
   83840:	4798      	blx	r3
   83842:	e7fe      	b.n	83842 <xTimerCreate+0x5e>

	return ( TimerHandle_t ) pxNewTimer;
   83844:	697b      	ldr	r3, [r7, #20]
}
   83846:	4618      	mov	r0, r3
   83848:	3718      	adds	r7, #24
   8384a:	46bd      	mov	sp, r7
   8384c:	bd80      	pop	{r7, pc}
   8384e:	bf00      	nop
   83850:	000814c1 	.word	0x000814c1
   83854:	00083d31 	.word	0x00083d31
   83858:	00081055 	.word	0x00081055
   8385c:	0008139d 	.word	0x0008139d

00083860 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   83860:	b590      	push	{r4, r7, lr}
   83862:	b089      	sub	sp, #36	; 0x24
   83864:	af00      	add	r7, sp, #0
   83866:	60f8      	str	r0, [r7, #12]
   83868:	60b9      	str	r1, [r7, #8]
   8386a:	607a      	str	r2, [r7, #4]
   8386c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   8386e:	2300      	movs	r3, #0
   83870:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   83872:	4b1d      	ldr	r3, [pc, #116]	; (838e8 <xTimerGenericCommand+0x88>)
   83874:	681b      	ldr	r3, [r3, #0]
   83876:	2b00      	cmp	r3, #0
   83878:	d030      	beq.n	838dc <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8387a:	68bb      	ldr	r3, [r7, #8]
   8387c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   8387e:	687b      	ldr	r3, [r7, #4]
   83880:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   83882:	68fb      	ldr	r3, [r7, #12]
   83884:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   83886:	68bb      	ldr	r3, [r7, #8]
   83888:	2b05      	cmp	r3, #5
   8388a:	dc1c      	bgt.n	838c6 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   8388c:	4b17      	ldr	r3, [pc, #92]	; (838ec <xTimerGenericCommand+0x8c>)
   8388e:	4798      	blx	r3
   83890:	4603      	mov	r3, r0
   83892:	2b02      	cmp	r3, #2
   83894:	d10b      	bne.n	838ae <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   83896:	4b14      	ldr	r3, [pc, #80]	; (838e8 <xTimerGenericCommand+0x88>)
   83898:	681a      	ldr	r2, [r3, #0]
   8389a:	f107 0310 	add.w	r3, r7, #16
   8389e:	4610      	mov	r0, r2
   838a0:	4619      	mov	r1, r3
   838a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   838a4:	2300      	movs	r3, #0
   838a6:	4c12      	ldr	r4, [pc, #72]	; (838f0 <xTimerGenericCommand+0x90>)
   838a8:	47a0      	blx	r4
   838aa:	61f8      	str	r0, [r7, #28]
   838ac:	e016      	b.n	838dc <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   838ae:	4b0e      	ldr	r3, [pc, #56]	; (838e8 <xTimerGenericCommand+0x88>)
   838b0:	681a      	ldr	r2, [r3, #0]
   838b2:	f107 0310 	add.w	r3, r7, #16
   838b6:	4610      	mov	r0, r2
   838b8:	4619      	mov	r1, r3
   838ba:	2200      	movs	r2, #0
   838bc:	2300      	movs	r3, #0
   838be:	4c0c      	ldr	r4, [pc, #48]	; (838f0 <xTimerGenericCommand+0x90>)
   838c0:	47a0      	blx	r4
   838c2:	61f8      	str	r0, [r7, #28]
   838c4:	e00a      	b.n	838dc <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   838c6:	4b08      	ldr	r3, [pc, #32]	; (838e8 <xTimerGenericCommand+0x88>)
   838c8:	681a      	ldr	r2, [r3, #0]
   838ca:	f107 0310 	add.w	r3, r7, #16
   838ce:	4610      	mov	r0, r2
   838d0:	4619      	mov	r1, r3
   838d2:	683a      	ldr	r2, [r7, #0]
   838d4:	2300      	movs	r3, #0
   838d6:	4c07      	ldr	r4, [pc, #28]	; (838f4 <xTimerGenericCommand+0x94>)
   838d8:	47a0      	blx	r4
   838da:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   838dc:	69fb      	ldr	r3, [r7, #28]
}
   838de:	4618      	mov	r0, r3
   838e0:	3724      	adds	r7, #36	; 0x24
   838e2:	46bd      	mov	sp, r7
   838e4:	bd90      	pop	{r4, r7, pc}
   838e6:	bf00      	nop
   838e8:	2007a610 	.word	0x2007a610
   838ec:	00083545 	.word	0x00083545
   838f0:	00081b69 	.word	0x00081b69
   838f4:	00081d2d 	.word	0x00081d2d

000838f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   838f8:	b590      	push	{r4, r7, lr}
   838fa:	b087      	sub	sp, #28
   838fc:	af02      	add	r7, sp, #8
   838fe:	6078      	str	r0, [r7, #4]
   83900:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83902:	4b18      	ldr	r3, [pc, #96]	; (83964 <prvProcessExpiredTimer+0x6c>)
   83904:	681b      	ldr	r3, [r3, #0]
   83906:	68db      	ldr	r3, [r3, #12]
   83908:	68db      	ldr	r3, [r3, #12]
   8390a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   8390c:	68fb      	ldr	r3, [r7, #12]
   8390e:	3304      	adds	r3, #4
   83910:	4618      	mov	r0, r3
   83912:	4b15      	ldr	r3, [pc, #84]	; (83968 <prvProcessExpiredTimer+0x70>)
   83914:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   83916:	68fb      	ldr	r3, [r7, #12]
   83918:	69db      	ldr	r3, [r3, #28]
   8391a:	2b01      	cmp	r3, #1
   8391c:	d11b      	bne.n	83956 <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8391e:	68fb      	ldr	r3, [r7, #12]
   83920:	699a      	ldr	r2, [r3, #24]
   83922:	687b      	ldr	r3, [r7, #4]
   83924:	4413      	add	r3, r2
   83926:	68f8      	ldr	r0, [r7, #12]
   83928:	4619      	mov	r1, r3
   8392a:	683a      	ldr	r2, [r7, #0]
   8392c:	687b      	ldr	r3, [r7, #4]
   8392e:	4c0f      	ldr	r4, [pc, #60]	; (8396c <prvProcessExpiredTimer+0x74>)
   83930:	47a0      	blx	r4
   83932:	4603      	mov	r3, r0
   83934:	2b01      	cmp	r3, #1
   83936:	d10e      	bne.n	83956 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   83938:	2300      	movs	r3, #0
   8393a:	9300      	str	r3, [sp, #0]
   8393c:	68f8      	ldr	r0, [r7, #12]
   8393e:	2100      	movs	r1, #0
   83940:	687a      	ldr	r2, [r7, #4]
   83942:	2300      	movs	r3, #0
   83944:	4c0a      	ldr	r4, [pc, #40]	; (83970 <prvProcessExpiredTimer+0x78>)
   83946:	47a0      	blx	r4
   83948:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   8394a:	68bb      	ldr	r3, [r7, #8]
   8394c:	2b00      	cmp	r3, #0
   8394e:	d102      	bne.n	83956 <prvProcessExpiredTimer+0x5e>
   83950:	4b08      	ldr	r3, [pc, #32]	; (83974 <prvProcessExpiredTimer+0x7c>)
   83952:	4798      	blx	r3
   83954:	e7fe      	b.n	83954 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   83956:	68fb      	ldr	r3, [r7, #12]
   83958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8395a:	68f8      	ldr	r0, [r7, #12]
   8395c:	4798      	blx	r3
}
   8395e:	3714      	adds	r7, #20
   83960:	46bd      	mov	sp, r7
   83962:	bd90      	pop	{r4, r7, pc}
   83964:	2007a608 	.word	0x2007a608
   83968:	00081125 	.word	0x00081125
   8396c:	00083abd 	.word	0x00083abd
   83970:	00083861 	.word	0x00083861
   83974:	0008139d 	.word	0x0008139d

00083978 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   83978:	b580      	push	{r7, lr}
   8397a:	b084      	sub	sp, #16
   8397c:	af00      	add	r7, sp, #0
   8397e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   83980:	f107 0308 	add.w	r3, r7, #8
   83984:	4618      	mov	r0, r3
   83986:	4b05      	ldr	r3, [pc, #20]	; (8399c <prvTimerTask+0x24>)
   83988:	4798      	blx	r3
   8398a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   8398c:	68bb      	ldr	r3, [r7, #8]
   8398e:	68f8      	ldr	r0, [r7, #12]
   83990:	4619      	mov	r1, r3
   83992:	4b03      	ldr	r3, [pc, #12]	; (839a0 <prvTimerTask+0x28>)
   83994:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   83996:	4b03      	ldr	r3, [pc, #12]	; (839a4 <prvTimerTask+0x2c>)
   83998:	4798      	blx	r3
	}
   8399a:	e7f1      	b.n	83980 <prvTimerTask+0x8>
   8399c:	00083a2d 	.word	0x00083a2d
   839a0:	000839a9 	.word	0x000839a9
   839a4:	00083b45 	.word	0x00083b45

000839a8 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   839a8:	b580      	push	{r7, lr}
   839aa:	b084      	sub	sp, #16
   839ac:	af00      	add	r7, sp, #0
   839ae:	6078      	str	r0, [r7, #4]
   839b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   839b2:	4b17      	ldr	r3, [pc, #92]	; (83a10 <prvProcessTimerOrBlockTask+0x68>)
   839b4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   839b6:	f107 0308 	add.w	r3, r7, #8
   839ba:	4618      	mov	r0, r3
   839bc:	4b15      	ldr	r3, [pc, #84]	; (83a14 <prvProcessTimerOrBlockTask+0x6c>)
   839be:	4798      	blx	r3
   839c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   839c2:	68bb      	ldr	r3, [r7, #8]
   839c4:	2b00      	cmp	r3, #0
   839c6:	d11e      	bne.n	83a06 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   839c8:	683b      	ldr	r3, [r7, #0]
   839ca:	2b00      	cmp	r3, #0
   839cc:	d10a      	bne.n	839e4 <prvProcessTimerOrBlockTask+0x3c>
   839ce:	687a      	ldr	r2, [r7, #4]
   839d0:	68fb      	ldr	r3, [r7, #12]
   839d2:	429a      	cmp	r2, r3
   839d4:	d806      	bhi.n	839e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   839d6:	4b10      	ldr	r3, [pc, #64]	; (83a18 <prvProcessTimerOrBlockTask+0x70>)
   839d8:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   839da:	6878      	ldr	r0, [r7, #4]
   839dc:	68f9      	ldr	r1, [r7, #12]
   839de:	4b0f      	ldr	r3, [pc, #60]	; (83a1c <prvProcessTimerOrBlockTask+0x74>)
   839e0:	4798      	blx	r3
   839e2:	e012      	b.n	83a0a <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   839e4:	4b0e      	ldr	r3, [pc, #56]	; (83a20 <prvProcessTimerOrBlockTask+0x78>)
   839e6:	681a      	ldr	r2, [r3, #0]
   839e8:	6879      	ldr	r1, [r7, #4]
   839ea:	68fb      	ldr	r3, [r7, #12]
   839ec:	1acb      	subs	r3, r1, r3
   839ee:	4610      	mov	r0, r2
   839f0:	4619      	mov	r1, r3
   839f2:	4b0c      	ldr	r3, [pc, #48]	; (83a24 <prvProcessTimerOrBlockTask+0x7c>)
   839f4:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   839f6:	4b08      	ldr	r3, [pc, #32]	; (83a18 <prvProcessTimerOrBlockTask+0x70>)
   839f8:	4798      	blx	r3
   839fa:	4603      	mov	r3, r0
   839fc:	2b00      	cmp	r3, #0
   839fe:	d104      	bne.n	83a0a <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   83a00:	4b09      	ldr	r3, [pc, #36]	; (83a28 <prvProcessTimerOrBlockTask+0x80>)
   83a02:	4798      	blx	r3
   83a04:	e001      	b.n	83a0a <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   83a06:	4b04      	ldr	r3, [pc, #16]	; (83a18 <prvProcessTimerOrBlockTask+0x70>)
   83a08:	4798      	blx	r3
		}
	}
}
   83a0a:	3710      	adds	r7, #16
   83a0c:	46bd      	mov	sp, r7
   83a0e:	bd80      	pop	{r7, pc}
   83a10:	00082b31 	.word	0x00082b31
   83a14:	00083a75 	.word	0x00083a75
   83a18:	00082b4d 	.word	0x00082b4d
   83a1c:	000838f9 	.word	0x000838f9
   83a20:	2007a610 	.word	0x2007a610
   83a24:	0008236d 	.word	0x0008236d
   83a28:	00081301 	.word	0x00081301

00083a2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   83a2c:	b480      	push	{r7}
   83a2e:	b085      	sub	sp, #20
   83a30:	af00      	add	r7, sp, #0
   83a32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   83a34:	4b0e      	ldr	r3, [pc, #56]	; (83a70 <prvGetNextExpireTime+0x44>)
   83a36:	681b      	ldr	r3, [r3, #0]
   83a38:	681b      	ldr	r3, [r3, #0]
   83a3a:	2b00      	cmp	r3, #0
   83a3c:	bf14      	ite	ne
   83a3e:	2300      	movne	r3, #0
   83a40:	2301      	moveq	r3, #1
   83a42:	b2db      	uxtb	r3, r3
   83a44:	461a      	mov	r2, r3
   83a46:	687b      	ldr	r3, [r7, #4]
   83a48:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   83a4a:	687b      	ldr	r3, [r7, #4]
   83a4c:	681b      	ldr	r3, [r3, #0]
   83a4e:	2b00      	cmp	r3, #0
   83a50:	d105      	bne.n	83a5e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83a52:	4b07      	ldr	r3, [pc, #28]	; (83a70 <prvGetNextExpireTime+0x44>)
   83a54:	681b      	ldr	r3, [r3, #0]
   83a56:	68db      	ldr	r3, [r3, #12]
   83a58:	681b      	ldr	r3, [r3, #0]
   83a5a:	60fb      	str	r3, [r7, #12]
   83a5c:	e001      	b.n	83a62 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   83a5e:	2300      	movs	r3, #0
   83a60:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   83a62:	68fb      	ldr	r3, [r7, #12]
}
   83a64:	4618      	mov	r0, r3
   83a66:	3714      	adds	r7, #20
   83a68:	46bd      	mov	sp, r7
   83a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   83a6e:	4770      	bx	lr
   83a70:	2007a608 	.word	0x2007a608

00083a74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   83a74:	b580      	push	{r7, lr}
   83a76:	b084      	sub	sp, #16
   83a78:	af00      	add	r7, sp, #0
   83a7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   83a7c:	4b0c      	ldr	r3, [pc, #48]	; (83ab0 <prvSampleTimeNow+0x3c>)
   83a7e:	4798      	blx	r3
   83a80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   83a82:	4b0c      	ldr	r3, [pc, #48]	; (83ab4 <prvSampleTimeNow+0x40>)
   83a84:	681b      	ldr	r3, [r3, #0]
   83a86:	68fa      	ldr	r2, [r7, #12]
   83a88:	429a      	cmp	r2, r3
   83a8a:	d205      	bcs.n	83a98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   83a8c:	4b0a      	ldr	r3, [pc, #40]	; (83ab8 <prvSampleTimeNow+0x44>)
   83a8e:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   83a90:	687b      	ldr	r3, [r7, #4]
   83a92:	2201      	movs	r2, #1
   83a94:	601a      	str	r2, [r3, #0]
   83a96:	e002      	b.n	83a9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   83a98:	687b      	ldr	r3, [r7, #4]
   83a9a:	2200      	movs	r2, #0
   83a9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   83a9e:	4b05      	ldr	r3, [pc, #20]	; (83ab4 <prvSampleTimeNow+0x40>)
   83aa0:	68fa      	ldr	r2, [r7, #12]
   83aa2:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   83aa4:	68fb      	ldr	r3, [r7, #12]
}
   83aa6:	4618      	mov	r0, r3
   83aa8:	3710      	adds	r7, #16
   83aaa:	46bd      	mov	sp, r7
   83aac:	bd80      	pop	{r7, pc}
   83aae:	bf00      	nop
   83ab0:	00082c71 	.word	0x00082c71
   83ab4:	2007a614 	.word	0x2007a614
   83ab8:	00083c71 	.word	0x00083c71

00083abc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   83abc:	b580      	push	{r7, lr}
   83abe:	b086      	sub	sp, #24
   83ac0:	af00      	add	r7, sp, #0
   83ac2:	60f8      	str	r0, [r7, #12]
   83ac4:	60b9      	str	r1, [r7, #8]
   83ac6:	607a      	str	r2, [r7, #4]
   83ac8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   83aca:	2300      	movs	r3, #0
   83acc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   83ace:	68fb      	ldr	r3, [r7, #12]
   83ad0:	68ba      	ldr	r2, [r7, #8]
   83ad2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83ad4:	68fb      	ldr	r3, [r7, #12]
   83ad6:	68fa      	ldr	r2, [r7, #12]
   83ad8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   83ada:	68ba      	ldr	r2, [r7, #8]
   83adc:	687b      	ldr	r3, [r7, #4]
   83ade:	429a      	cmp	r2, r3
   83ae0:	d812      	bhi.n	83b08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   83ae2:	687a      	ldr	r2, [r7, #4]
   83ae4:	683b      	ldr	r3, [r7, #0]
   83ae6:	1ad2      	subs	r2, r2, r3
   83ae8:	68fb      	ldr	r3, [r7, #12]
   83aea:	699b      	ldr	r3, [r3, #24]
   83aec:	429a      	cmp	r2, r3
   83aee:	d302      	bcc.n	83af6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   83af0:	2301      	movs	r3, #1
   83af2:	617b      	str	r3, [r7, #20]
   83af4:	e01b      	b.n	83b2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   83af6:	4b10      	ldr	r3, [pc, #64]	; (83b38 <prvInsertTimerInActiveList+0x7c>)
   83af8:	681a      	ldr	r2, [r3, #0]
   83afa:	68fb      	ldr	r3, [r7, #12]
   83afc:	3304      	adds	r3, #4
   83afe:	4610      	mov	r0, r2
   83b00:	4619      	mov	r1, r3
   83b02:	4b0e      	ldr	r3, [pc, #56]	; (83b3c <prvInsertTimerInActiveList+0x80>)
   83b04:	4798      	blx	r3
   83b06:	e012      	b.n	83b2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   83b08:	687a      	ldr	r2, [r7, #4]
   83b0a:	683b      	ldr	r3, [r7, #0]
   83b0c:	429a      	cmp	r2, r3
   83b0e:	d206      	bcs.n	83b1e <prvInsertTimerInActiveList+0x62>
   83b10:	68ba      	ldr	r2, [r7, #8]
   83b12:	683b      	ldr	r3, [r7, #0]
   83b14:	429a      	cmp	r2, r3
   83b16:	d302      	bcc.n	83b1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   83b18:	2301      	movs	r3, #1
   83b1a:	617b      	str	r3, [r7, #20]
   83b1c:	e007      	b.n	83b2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83b1e:	4b08      	ldr	r3, [pc, #32]	; (83b40 <prvInsertTimerInActiveList+0x84>)
   83b20:	681a      	ldr	r2, [r3, #0]
   83b22:	68fb      	ldr	r3, [r7, #12]
   83b24:	3304      	adds	r3, #4
   83b26:	4610      	mov	r0, r2
   83b28:	4619      	mov	r1, r3
   83b2a:	4b04      	ldr	r3, [pc, #16]	; (83b3c <prvInsertTimerInActiveList+0x80>)
   83b2c:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   83b2e:	697b      	ldr	r3, [r7, #20]
}
   83b30:	4618      	mov	r0, r3
   83b32:	3718      	adds	r7, #24
   83b34:	46bd      	mov	sp, r7
   83b36:	bd80      	pop	{r7, pc}
   83b38:	2007a60c 	.word	0x2007a60c
   83b3c:	000810b5 	.word	0x000810b5
   83b40:	2007a608 	.word	0x2007a608

00083b44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   83b44:	b590      	push	{r4, r7, lr}
   83b46:	b08b      	sub	sp, #44	; 0x2c
   83b48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   83b4a:	e070      	b.n	83c2e <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   83b4c:	68bb      	ldr	r3, [r7, #8]
   83b4e:	2b00      	cmp	r3, #0
   83b50:	db6d      	blt.n	83c2e <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   83b52:	693b      	ldr	r3, [r7, #16]
   83b54:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   83b56:	69fb      	ldr	r3, [r7, #28]
   83b58:	695b      	ldr	r3, [r3, #20]
   83b5a:	2b00      	cmp	r3, #0
   83b5c:	d004      	beq.n	83b68 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83b5e:	69fb      	ldr	r3, [r7, #28]
   83b60:	3304      	adds	r3, #4
   83b62:	4618      	mov	r0, r3
   83b64:	4b3a      	ldr	r3, [pc, #232]	; (83c50 <prvProcessReceivedCommands+0x10c>)
   83b66:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83b68:	1d3b      	adds	r3, r7, #4
   83b6a:	4618      	mov	r0, r3
   83b6c:	4b39      	ldr	r3, [pc, #228]	; (83c54 <prvProcessReceivedCommands+0x110>)
   83b6e:	4798      	blx	r3
   83b70:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   83b72:	68bb      	ldr	r3, [r7, #8]
   83b74:	2b09      	cmp	r3, #9
   83b76:	d859      	bhi.n	83c2c <prvProcessReceivedCommands+0xe8>
   83b78:	a201      	add	r2, pc, #4	; (adr r2, 83b80 <prvProcessReceivedCommands+0x3c>)
   83b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83b7e:	bf00      	nop
   83b80:	00083ba9 	.word	0x00083ba9
   83b84:	00083ba9 	.word	0x00083ba9
   83b88:	00083ba9 	.word	0x00083ba9
   83b8c:	00083c2d 	.word	0x00083c2d
   83b90:	00083bfb 	.word	0x00083bfb
   83b94:	00083c25 	.word	0x00083c25
   83b98:	00083ba9 	.word	0x00083ba9
   83b9c:	00083ba9 	.word	0x00083ba9
   83ba0:	00083c2d 	.word	0x00083c2d
   83ba4:	00083bfb 	.word	0x00083bfb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   83ba8:	68fa      	ldr	r2, [r7, #12]
   83baa:	69fb      	ldr	r3, [r7, #28]
   83bac:	699b      	ldr	r3, [r3, #24]
   83bae:	441a      	add	r2, r3
   83bb0:	68fb      	ldr	r3, [r7, #12]
   83bb2:	69f8      	ldr	r0, [r7, #28]
   83bb4:	4611      	mov	r1, r2
   83bb6:	69ba      	ldr	r2, [r7, #24]
   83bb8:	4c27      	ldr	r4, [pc, #156]	; (83c58 <prvProcessReceivedCommands+0x114>)
   83bba:	47a0      	blx	r4
   83bbc:	4603      	mov	r3, r0
   83bbe:	2b01      	cmp	r3, #1
   83bc0:	d11a      	bne.n	83bf8 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   83bc2:	69fb      	ldr	r3, [r7, #28]
   83bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83bc6:	69f8      	ldr	r0, [r7, #28]
   83bc8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   83bca:	69fb      	ldr	r3, [r7, #28]
   83bcc:	69db      	ldr	r3, [r3, #28]
   83bce:	2b01      	cmp	r3, #1
   83bd0:	d112      	bne.n	83bf8 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   83bd2:	68fa      	ldr	r2, [r7, #12]
   83bd4:	69fb      	ldr	r3, [r7, #28]
   83bd6:	699b      	ldr	r3, [r3, #24]
   83bd8:	4413      	add	r3, r2
   83bda:	2200      	movs	r2, #0
   83bdc:	9200      	str	r2, [sp, #0]
   83bde:	69f8      	ldr	r0, [r7, #28]
   83be0:	2100      	movs	r1, #0
   83be2:	461a      	mov	r2, r3
   83be4:	2300      	movs	r3, #0
   83be6:	4c1d      	ldr	r4, [pc, #116]	; (83c5c <prvProcessReceivedCommands+0x118>)
   83be8:	47a0      	blx	r4
   83bea:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   83bec:	697b      	ldr	r3, [r7, #20]
   83bee:	2b00      	cmp	r3, #0
   83bf0:	d102      	bne.n	83bf8 <prvProcessReceivedCommands+0xb4>
   83bf2:	4b1b      	ldr	r3, [pc, #108]	; (83c60 <prvProcessReceivedCommands+0x11c>)
   83bf4:	4798      	blx	r3
   83bf6:	e7fe      	b.n	83bf6 <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   83bf8:	e019      	b.n	83c2e <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   83bfa:	68fa      	ldr	r2, [r7, #12]
   83bfc:	69fb      	ldr	r3, [r7, #28]
   83bfe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   83c00:	69fb      	ldr	r3, [r7, #28]
   83c02:	699b      	ldr	r3, [r3, #24]
   83c04:	2b00      	cmp	r3, #0
   83c06:	d102      	bne.n	83c0e <prvProcessReceivedCommands+0xca>
   83c08:	4b15      	ldr	r3, [pc, #84]	; (83c60 <prvProcessReceivedCommands+0x11c>)
   83c0a:	4798      	blx	r3
   83c0c:	e7fe      	b.n	83c0c <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83c0e:	69fb      	ldr	r3, [r7, #28]
   83c10:	699a      	ldr	r2, [r3, #24]
   83c12:	69bb      	ldr	r3, [r7, #24]
   83c14:	4413      	add	r3, r2
   83c16:	69f8      	ldr	r0, [r7, #28]
   83c18:	4619      	mov	r1, r3
   83c1a:	69ba      	ldr	r2, [r7, #24]
   83c1c:	69bb      	ldr	r3, [r7, #24]
   83c1e:	4c0e      	ldr	r4, [pc, #56]	; (83c58 <prvProcessReceivedCommands+0x114>)
   83c20:	47a0      	blx	r4
					break;
   83c22:	e004      	b.n	83c2e <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   83c24:	69f8      	ldr	r0, [r7, #28]
   83c26:	4b0f      	ldr	r3, [pc, #60]	; (83c64 <prvProcessReceivedCommands+0x120>)
   83c28:	4798      	blx	r3
					break;
   83c2a:	e000      	b.n	83c2e <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   83c2c:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   83c2e:	4b0e      	ldr	r3, [pc, #56]	; (83c68 <prvProcessReceivedCommands+0x124>)
   83c30:	681a      	ldr	r2, [r3, #0]
   83c32:	f107 0308 	add.w	r3, r7, #8
   83c36:	4610      	mov	r0, r2
   83c38:	4619      	mov	r1, r3
   83c3a:	2200      	movs	r2, #0
   83c3c:	2300      	movs	r3, #0
   83c3e:	4c0b      	ldr	r4, [pc, #44]	; (83c6c <prvProcessReceivedCommands+0x128>)
   83c40:	47a0      	blx	r4
   83c42:	4603      	mov	r3, r0
   83c44:	2b00      	cmp	r3, #0
   83c46:	d181      	bne.n	83b4c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   83c48:	3724      	adds	r7, #36	; 0x24
   83c4a:	46bd      	mov	sp, r7
   83c4c:	bd90      	pop	{r4, r7, pc}
   83c4e:	bf00      	nop
   83c50:	00081125 	.word	0x00081125
   83c54:	00083a75 	.word	0x00083a75
   83c58:	00083abd 	.word	0x00083abd
   83c5c:	00083861 	.word	0x00083861
   83c60:	0008139d 	.word	0x0008139d
   83c64:	00081639 	.word	0x00081639
   83c68:	2007a610 	.word	0x2007a610
   83c6c:	00081e29 	.word	0x00081e29

00083c70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   83c70:	b590      	push	{r4, r7, lr}
   83c72:	b089      	sub	sp, #36	; 0x24
   83c74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83c76:	e03d      	b.n	83cf4 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83c78:	4b27      	ldr	r3, [pc, #156]	; (83d18 <prvSwitchTimerLists+0xa8>)
   83c7a:	681b      	ldr	r3, [r3, #0]
   83c7c:	68db      	ldr	r3, [r3, #12]
   83c7e:	681b      	ldr	r3, [r3, #0]
   83c80:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83c82:	4b25      	ldr	r3, [pc, #148]	; (83d18 <prvSwitchTimerLists+0xa8>)
   83c84:	681b      	ldr	r3, [r3, #0]
   83c86:	68db      	ldr	r3, [r3, #12]
   83c88:	68db      	ldr	r3, [r3, #12]
   83c8a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83c8c:	693b      	ldr	r3, [r7, #16]
   83c8e:	3304      	adds	r3, #4
   83c90:	4618      	mov	r0, r3
   83c92:	4b22      	ldr	r3, [pc, #136]	; (83d1c <prvSwitchTimerLists+0xac>)
   83c94:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   83c96:	693b      	ldr	r3, [r7, #16]
   83c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83c9a:	6938      	ldr	r0, [r7, #16]
   83c9c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   83c9e:	693b      	ldr	r3, [r7, #16]
   83ca0:	69db      	ldr	r3, [r3, #28]
   83ca2:	2b01      	cmp	r3, #1
   83ca4:	d126      	bne.n	83cf4 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   83ca6:	693b      	ldr	r3, [r7, #16]
   83ca8:	699a      	ldr	r2, [r3, #24]
   83caa:	697b      	ldr	r3, [r7, #20]
   83cac:	4413      	add	r3, r2
   83cae:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   83cb0:	68fa      	ldr	r2, [r7, #12]
   83cb2:	697b      	ldr	r3, [r7, #20]
   83cb4:	429a      	cmp	r2, r3
   83cb6:	d90e      	bls.n	83cd6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   83cb8:	693b      	ldr	r3, [r7, #16]
   83cba:	68fa      	ldr	r2, [r7, #12]
   83cbc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83cbe:	693b      	ldr	r3, [r7, #16]
   83cc0:	693a      	ldr	r2, [r7, #16]
   83cc2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83cc4:	4b14      	ldr	r3, [pc, #80]	; (83d18 <prvSwitchTimerLists+0xa8>)
   83cc6:	681a      	ldr	r2, [r3, #0]
   83cc8:	693b      	ldr	r3, [r7, #16]
   83cca:	3304      	adds	r3, #4
   83ccc:	4610      	mov	r0, r2
   83cce:	4619      	mov	r1, r3
   83cd0:	4b13      	ldr	r3, [pc, #76]	; (83d20 <prvSwitchTimerLists+0xb0>)
   83cd2:	4798      	blx	r3
   83cd4:	e00e      	b.n	83cf4 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   83cd6:	2300      	movs	r3, #0
   83cd8:	9300      	str	r3, [sp, #0]
   83cda:	6938      	ldr	r0, [r7, #16]
   83cdc:	2100      	movs	r1, #0
   83cde:	697a      	ldr	r2, [r7, #20]
   83ce0:	2300      	movs	r3, #0
   83ce2:	4c10      	ldr	r4, [pc, #64]	; (83d24 <prvSwitchTimerLists+0xb4>)
   83ce4:	47a0      	blx	r4
   83ce6:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   83ce8:	68bb      	ldr	r3, [r7, #8]
   83cea:	2b00      	cmp	r3, #0
   83cec:	d102      	bne.n	83cf4 <prvSwitchTimerLists+0x84>
   83cee:	4b0e      	ldr	r3, [pc, #56]	; (83d28 <prvSwitchTimerLists+0xb8>)
   83cf0:	4798      	blx	r3
   83cf2:	e7fe      	b.n	83cf2 <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83cf4:	4b08      	ldr	r3, [pc, #32]	; (83d18 <prvSwitchTimerLists+0xa8>)
   83cf6:	681b      	ldr	r3, [r3, #0]
   83cf8:	681b      	ldr	r3, [r3, #0]
   83cfa:	2b00      	cmp	r3, #0
   83cfc:	d1bc      	bne.n	83c78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   83cfe:	4b06      	ldr	r3, [pc, #24]	; (83d18 <prvSwitchTimerLists+0xa8>)
   83d00:	681b      	ldr	r3, [r3, #0]
   83d02:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   83d04:	4b09      	ldr	r3, [pc, #36]	; (83d2c <prvSwitchTimerLists+0xbc>)
   83d06:	681a      	ldr	r2, [r3, #0]
   83d08:	4b03      	ldr	r3, [pc, #12]	; (83d18 <prvSwitchTimerLists+0xa8>)
   83d0a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   83d0c:	4b07      	ldr	r3, [pc, #28]	; (83d2c <prvSwitchTimerLists+0xbc>)
   83d0e:	687a      	ldr	r2, [r7, #4]
   83d10:	601a      	str	r2, [r3, #0]
}
   83d12:	371c      	adds	r7, #28
   83d14:	46bd      	mov	sp, r7
   83d16:	bd90      	pop	{r4, r7, pc}
   83d18:	2007a608 	.word	0x2007a608
   83d1c:	00081125 	.word	0x00081125
   83d20:	000810b5 	.word	0x000810b5
   83d24:	00083861 	.word	0x00083861
   83d28:	0008139d 	.word	0x0008139d
   83d2c:	2007a60c 	.word	0x2007a60c

00083d30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   83d30:	b580      	push	{r7, lr}
   83d32:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   83d34:	4b11      	ldr	r3, [pc, #68]	; (83d7c <prvCheckForValidListAndQueue+0x4c>)
   83d36:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   83d38:	4b11      	ldr	r3, [pc, #68]	; (83d80 <prvCheckForValidListAndQueue+0x50>)
   83d3a:	681b      	ldr	r3, [r3, #0]
   83d3c:	2b00      	cmp	r3, #0
   83d3e:	d11a      	bne.n	83d76 <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   83d40:	4810      	ldr	r0, [pc, #64]	; (83d84 <prvCheckForValidListAndQueue+0x54>)
   83d42:	4b11      	ldr	r3, [pc, #68]	; (83d88 <prvCheckForValidListAndQueue+0x58>)
   83d44:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   83d46:	4811      	ldr	r0, [pc, #68]	; (83d8c <prvCheckForValidListAndQueue+0x5c>)
   83d48:	4b0f      	ldr	r3, [pc, #60]	; (83d88 <prvCheckForValidListAndQueue+0x58>)
   83d4a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   83d4c:	4b10      	ldr	r3, [pc, #64]	; (83d90 <prvCheckForValidListAndQueue+0x60>)
   83d4e:	4a0d      	ldr	r2, [pc, #52]	; (83d84 <prvCheckForValidListAndQueue+0x54>)
   83d50:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   83d52:	4b10      	ldr	r3, [pc, #64]	; (83d94 <prvCheckForValidListAndQueue+0x64>)
   83d54:	4a0d      	ldr	r2, [pc, #52]	; (83d8c <prvCheckForValidListAndQueue+0x5c>)
   83d56:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   83d58:	2005      	movs	r0, #5
   83d5a:	210c      	movs	r1, #12
   83d5c:	2200      	movs	r2, #0
   83d5e:	4b0e      	ldr	r3, [pc, #56]	; (83d98 <prvCheckForValidListAndQueue+0x68>)
   83d60:	4798      	blx	r3
   83d62:	4602      	mov	r2, r0
   83d64:	4b06      	ldr	r3, [pc, #24]	; (83d80 <prvCheckForValidListAndQueue+0x50>)
   83d66:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   83d68:	4b05      	ldr	r3, [pc, #20]	; (83d80 <prvCheckForValidListAndQueue+0x50>)
   83d6a:	681b      	ldr	r3, [r3, #0]
   83d6c:	2b00      	cmp	r3, #0
   83d6e:	d102      	bne.n	83d76 <prvCheckForValidListAndQueue+0x46>
   83d70:	4b0a      	ldr	r3, [pc, #40]	; (83d9c <prvCheckForValidListAndQueue+0x6c>)
   83d72:	4798      	blx	r3
   83d74:	e7fe      	b.n	83d74 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   83d76:	4b0a      	ldr	r3, [pc, #40]	; (83da0 <prvCheckForValidListAndQueue+0x70>)
   83d78:	4798      	blx	r3
}
   83d7a:	bd80      	pop	{r7, pc}
   83d7c:	00081321 	.word	0x00081321
   83d80:	2007a610 	.word	0x2007a610
   83d84:	2007a5e0 	.word	0x2007a5e0
   83d88:	00081015 	.word	0x00081015
   83d8c:	2007a5f4 	.word	0x2007a5f4
   83d90:	2007a608 	.word	0x2007a608
   83d94:	2007a60c 	.word	0x2007a60c
   83d98:	00081919 	.word	0x00081919
   83d9c:	0008139d 	.word	0x0008139d
   83da0:	00081365 	.word	0x00081365

00083da4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
   83da4:	b480      	push	{r7}
   83da6:	b085      	sub	sp, #20
   83da8:	af00      	add	r7, sp, #0
   83daa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
   83dac:	687b      	ldr	r3, [r7, #4]
   83dae:	60fb      	str	r3, [r7, #12]

	return pxTimer->pvTimerID;
   83db0:	68fb      	ldr	r3, [r7, #12]
   83db2:	6a1b      	ldr	r3, [r3, #32]
}
   83db4:	4618      	mov	r0, r3
   83db6:	3714      	adds	r7, #20
   83db8:	46bd      	mov	sp, r7
   83dba:	f85d 7b04 	ldr.w	r7, [sp], #4
   83dbe:	4770      	bx	lr

00083dc0 <vStartBlockingQueueTasks>:
static volatile short sBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };

/*-----------------------------------------------------------*/

void vStartBlockingQueueTasks( UBaseType_t uxPriority )
{
   83dc0:	b590      	push	{r4, r7, lr}
   83dc2:	b091      	sub	sp, #68	; 0x44
   83dc4:	af04      	add	r7, sp, #16
   83dc6:	6078      	str	r0, [r7, #4]
xBlockingQueueParameters *pxQueueParameters1, *pxQueueParameters2;
xBlockingQueueParameters *pxQueueParameters3, *pxQueueParameters4;
xBlockingQueueParameters *pxQueueParameters5, *pxQueueParameters6;
const UBaseType_t uxQueueSize1 = 1, uxQueueSize5 = 5;
   83dc8:	2301      	movs	r3, #1
   83dca:	62fb      	str	r3, [r7, #44]	; 0x2c
   83dcc:	2305      	movs	r3, #5
   83dce:	62bb      	str	r3, [r7, #40]	; 0x28
const TickType_t xBlockTime = ( TickType_t ) 1000 / portTICK_PERIOD_MS;
   83dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   83dd4:	627b      	str	r3, [r7, #36]	; 0x24
const TickType_t xDontBlock = ( TickType_t ) 0;
   83dd6:	2300      	movs	r3, #0
   83dd8:	623b      	str	r3, [r7, #32]

	/* Create the first two tasks as described at the top of the file. */

	/* First create the structure used to pass parameters to the consumer tasks. */
	pxQueueParameters1 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
   83dda:	200c      	movs	r0, #12
   83ddc:	4b5a      	ldr	r3, [pc, #360]	; (83f48 <vStartBlockingQueueTasks+0x188>)
   83dde:	4798      	blx	r3
   83de0:	61f8      	str	r0, [r7, #28]

	/* Create the queue used by the first two tasks to pass the incrementing number.
	Pass a pointer to the queue in the parameter structure. */
	pxQueueParameters1->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
   83de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   83de4:	2102      	movs	r1, #2
   83de6:	2200      	movs	r2, #0
   83de8:	4b58      	ldr	r3, [pc, #352]	; (83f4c <vStartBlockingQueueTasks+0x18c>)
   83dea:	4798      	blx	r3
   83dec:	4602      	mov	r2, r0
   83dee:	69fb      	ldr	r3, [r7, #28]
   83df0:	601a      	str	r2, [r3, #0]

	/* The consumer is created first so gets a block time as described above. */
	pxQueueParameters1->xBlockTime = xBlockTime;
   83df2:	69fb      	ldr	r3, [r7, #28]
   83df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   83df6:	605a      	str	r2, [r3, #4]

	/* Pass in the variable that this task is going to increment so we can check it
	is still running. */
	pxQueueParameters1->psCheckVariable = &( sBlockingConsumerCount[ 0 ] );
   83df8:	69fb      	ldr	r3, [r7, #28]
   83dfa:	4a55      	ldr	r2, [pc, #340]	; (83f50 <vStartBlockingQueueTasks+0x190>)
   83dfc:	609a      	str	r2, [r3, #8]

	/* Create the structure used to pass parameters to the producer task. */
	pxQueueParameters2 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
   83dfe:	200c      	movs	r0, #12
   83e00:	4b51      	ldr	r3, [pc, #324]	; (83f48 <vStartBlockingQueueTasks+0x188>)
   83e02:	4798      	blx	r3
   83e04:	61b8      	str	r0, [r7, #24]

	/* Pass the queue to this task also, using the parameter structure. */
	pxQueueParameters2->xQueue = pxQueueParameters1->xQueue;
   83e06:	69fb      	ldr	r3, [r7, #28]
   83e08:	681a      	ldr	r2, [r3, #0]
   83e0a:	69bb      	ldr	r3, [r7, #24]
   83e0c:	601a      	str	r2, [r3, #0]

	/* The producer is not going to block - as soon as it posts the consumer will
	wake and remove the item so the producer should always have room to post. */
	pxQueueParameters2->xBlockTime = xDontBlock;
   83e0e:	69bb      	ldr	r3, [r7, #24]
   83e10:	6a3a      	ldr	r2, [r7, #32]
   83e12:	605a      	str	r2, [r3, #4]

	/* Pass in the variable that this task is going to increment so we can check
	it is still running. */
	pxQueueParameters2->psCheckVariable = &( sBlockingProducerCount[ 0 ] );
   83e14:	69bb      	ldr	r3, [r7, #24]
   83e16:	4a4f      	ldr	r2, [pc, #316]	; (83f54 <vStartBlockingQueueTasks+0x194>)
   83e18:	609a      	str	r2, [r3, #8]


	/* Note the producer has a lower priority than the consumer when the tasks are
	spawned. */
	xTaskCreate( vBlockingQueueConsumer, "QConsB1", blckqSTACK_SIZE, ( void * ) pxQueueParameters1, uxPriority, NULL );
   83e1a:	687b      	ldr	r3, [r7, #4]
   83e1c:	9300      	str	r3, [sp, #0]
   83e1e:	2300      	movs	r3, #0
   83e20:	9301      	str	r3, [sp, #4]
   83e22:	2300      	movs	r3, #0
   83e24:	9302      	str	r3, [sp, #8]
   83e26:	2300      	movs	r3, #0
   83e28:	9303      	str	r3, [sp, #12]
   83e2a:	484b      	ldr	r0, [pc, #300]	; (83f58 <vStartBlockingQueueTasks+0x198>)
   83e2c:	494b      	ldr	r1, [pc, #300]	; (83f5c <vStartBlockingQueueTasks+0x19c>)
   83e2e:	2282      	movs	r2, #130	; 0x82
   83e30:	69fb      	ldr	r3, [r7, #28]
   83e32:	4c4b      	ldr	r4, [pc, #300]	; (83f60 <vStartBlockingQueueTasks+0x1a0>)
   83e34:	47a0      	blx	r4
	xTaskCreate( vBlockingQueueProducer, "QProdB2", blckqSTACK_SIZE, ( void * ) pxQueueParameters2, tskIDLE_PRIORITY, NULL );
   83e36:	2300      	movs	r3, #0
   83e38:	9300      	str	r3, [sp, #0]
   83e3a:	2300      	movs	r3, #0
   83e3c:	9301      	str	r3, [sp, #4]
   83e3e:	2300      	movs	r3, #0
   83e40:	9302      	str	r3, [sp, #8]
   83e42:	2300      	movs	r3, #0
   83e44:	9303      	str	r3, [sp, #12]
   83e46:	4847      	ldr	r0, [pc, #284]	; (83f64 <vStartBlockingQueueTasks+0x1a4>)
   83e48:	4947      	ldr	r1, [pc, #284]	; (83f68 <vStartBlockingQueueTasks+0x1a8>)
   83e4a:	2282      	movs	r2, #130	; 0x82
   83e4c:	69bb      	ldr	r3, [r7, #24]
   83e4e:	4c44      	ldr	r4, [pc, #272]	; (83f60 <vStartBlockingQueueTasks+0x1a0>)
   83e50:	47a0      	blx	r4


	/* Create the second two tasks as described at the top of the file.   This uses
	the same mechanism but reverses the task priorities. */

	pxQueueParameters3 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
   83e52:	200c      	movs	r0, #12
   83e54:	4b3c      	ldr	r3, [pc, #240]	; (83f48 <vStartBlockingQueueTasks+0x188>)
   83e56:	4798      	blx	r3
   83e58:	6178      	str	r0, [r7, #20]
	pxQueueParameters3->xQueue = xQueueCreate( uxQueueSize1, ( UBaseType_t ) sizeof( uint16_t ) );
   83e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   83e5c:	2102      	movs	r1, #2
   83e5e:	2200      	movs	r2, #0
   83e60:	4b3a      	ldr	r3, [pc, #232]	; (83f4c <vStartBlockingQueueTasks+0x18c>)
   83e62:	4798      	blx	r3
   83e64:	4602      	mov	r2, r0
   83e66:	697b      	ldr	r3, [r7, #20]
   83e68:	601a      	str	r2, [r3, #0]
	pxQueueParameters3->xBlockTime = xDontBlock;
   83e6a:	697b      	ldr	r3, [r7, #20]
   83e6c:	6a3a      	ldr	r2, [r7, #32]
   83e6e:	605a      	str	r2, [r3, #4]
	pxQueueParameters3->psCheckVariable = &( sBlockingProducerCount[ 1 ] );
   83e70:	697b      	ldr	r3, [r7, #20]
   83e72:	4a3e      	ldr	r2, [pc, #248]	; (83f6c <vStartBlockingQueueTasks+0x1ac>)
   83e74:	609a      	str	r2, [r3, #8]

	pxQueueParameters4 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
   83e76:	200c      	movs	r0, #12
   83e78:	4b33      	ldr	r3, [pc, #204]	; (83f48 <vStartBlockingQueueTasks+0x188>)
   83e7a:	4798      	blx	r3
   83e7c:	6138      	str	r0, [r7, #16]
	pxQueueParameters4->xQueue = pxQueueParameters3->xQueue;
   83e7e:	697b      	ldr	r3, [r7, #20]
   83e80:	681a      	ldr	r2, [r3, #0]
   83e82:	693b      	ldr	r3, [r7, #16]
   83e84:	601a      	str	r2, [r3, #0]
	pxQueueParameters4->xBlockTime = xBlockTime;
   83e86:	693b      	ldr	r3, [r7, #16]
   83e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   83e8a:	605a      	str	r2, [r3, #4]
	pxQueueParameters4->psCheckVariable = &( sBlockingConsumerCount[ 1 ] );
   83e8c:	693b      	ldr	r3, [r7, #16]
   83e8e:	4a38      	ldr	r2, [pc, #224]	; (83f70 <vStartBlockingQueueTasks+0x1b0>)
   83e90:	609a      	str	r2, [r3, #8]

	xTaskCreate( vBlockingQueueConsumer, "QConsB3", blckqSTACK_SIZE, ( void * ) pxQueueParameters3, tskIDLE_PRIORITY, NULL );
   83e92:	2300      	movs	r3, #0
   83e94:	9300      	str	r3, [sp, #0]
   83e96:	2300      	movs	r3, #0
   83e98:	9301      	str	r3, [sp, #4]
   83e9a:	2300      	movs	r3, #0
   83e9c:	9302      	str	r3, [sp, #8]
   83e9e:	2300      	movs	r3, #0
   83ea0:	9303      	str	r3, [sp, #12]
   83ea2:	482d      	ldr	r0, [pc, #180]	; (83f58 <vStartBlockingQueueTasks+0x198>)
   83ea4:	4933      	ldr	r1, [pc, #204]	; (83f74 <vStartBlockingQueueTasks+0x1b4>)
   83ea6:	2282      	movs	r2, #130	; 0x82
   83ea8:	697b      	ldr	r3, [r7, #20]
   83eaa:	4c2d      	ldr	r4, [pc, #180]	; (83f60 <vStartBlockingQueueTasks+0x1a0>)
   83eac:	47a0      	blx	r4
	xTaskCreate( vBlockingQueueProducer, "QProdB4", blckqSTACK_SIZE, ( void * ) pxQueueParameters4, uxPriority, NULL );
   83eae:	687b      	ldr	r3, [r7, #4]
   83eb0:	9300      	str	r3, [sp, #0]
   83eb2:	2300      	movs	r3, #0
   83eb4:	9301      	str	r3, [sp, #4]
   83eb6:	2300      	movs	r3, #0
   83eb8:	9302      	str	r3, [sp, #8]
   83eba:	2300      	movs	r3, #0
   83ebc:	9303      	str	r3, [sp, #12]
   83ebe:	4829      	ldr	r0, [pc, #164]	; (83f64 <vStartBlockingQueueTasks+0x1a4>)
   83ec0:	492d      	ldr	r1, [pc, #180]	; (83f78 <vStartBlockingQueueTasks+0x1b8>)
   83ec2:	2282      	movs	r2, #130	; 0x82
   83ec4:	693b      	ldr	r3, [r7, #16]
   83ec6:	4c26      	ldr	r4, [pc, #152]	; (83f60 <vStartBlockingQueueTasks+0x1a0>)
   83ec8:	47a0      	blx	r4



	/* Create the last two tasks as described above.  The mechanism is again just
	the same.  This time both parameter structures are given a block time. */
	pxQueueParameters5 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
   83eca:	200c      	movs	r0, #12
   83ecc:	4b1e      	ldr	r3, [pc, #120]	; (83f48 <vStartBlockingQueueTasks+0x188>)
   83ece:	4798      	blx	r3
   83ed0:	60f8      	str	r0, [r7, #12]
	pxQueueParameters5->xQueue = xQueueCreate( uxQueueSize5, ( UBaseType_t ) sizeof( uint16_t ) );
   83ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   83ed4:	2102      	movs	r1, #2
   83ed6:	2200      	movs	r2, #0
   83ed8:	4b1c      	ldr	r3, [pc, #112]	; (83f4c <vStartBlockingQueueTasks+0x18c>)
   83eda:	4798      	blx	r3
   83edc:	4602      	mov	r2, r0
   83ede:	68fb      	ldr	r3, [r7, #12]
   83ee0:	601a      	str	r2, [r3, #0]
	pxQueueParameters5->xBlockTime = xBlockTime;
   83ee2:	68fb      	ldr	r3, [r7, #12]
   83ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   83ee6:	605a      	str	r2, [r3, #4]
	pxQueueParameters5->psCheckVariable = &( sBlockingProducerCount[ 2 ] );
   83ee8:	68fb      	ldr	r3, [r7, #12]
   83eea:	4a24      	ldr	r2, [pc, #144]	; (83f7c <vStartBlockingQueueTasks+0x1bc>)
   83eec:	609a      	str	r2, [r3, #8]

	pxQueueParameters6 = ( xBlockingQueueParameters * ) pvPortMalloc( sizeof( xBlockingQueueParameters ) );
   83eee:	200c      	movs	r0, #12
   83ef0:	4b15      	ldr	r3, [pc, #84]	; (83f48 <vStartBlockingQueueTasks+0x188>)
   83ef2:	4798      	blx	r3
   83ef4:	60b8      	str	r0, [r7, #8]
	pxQueueParameters6->xQueue = pxQueueParameters5->xQueue;
   83ef6:	68fb      	ldr	r3, [r7, #12]
   83ef8:	681a      	ldr	r2, [r3, #0]
   83efa:	68bb      	ldr	r3, [r7, #8]
   83efc:	601a      	str	r2, [r3, #0]
	pxQueueParameters6->xBlockTime = xBlockTime;
   83efe:	68bb      	ldr	r3, [r7, #8]
   83f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   83f02:	605a      	str	r2, [r3, #4]
	pxQueueParameters6->psCheckVariable = &( sBlockingConsumerCount[ 2 ] );
   83f04:	68bb      	ldr	r3, [r7, #8]
   83f06:	4a1e      	ldr	r2, [pc, #120]	; (83f80 <vStartBlockingQueueTasks+0x1c0>)
   83f08:	609a      	str	r2, [r3, #8]

	xTaskCreate( vBlockingQueueProducer, "QProdB5", blckqSTACK_SIZE, ( void * ) pxQueueParameters5, tskIDLE_PRIORITY, NULL );
   83f0a:	2300      	movs	r3, #0
   83f0c:	9300      	str	r3, [sp, #0]
   83f0e:	2300      	movs	r3, #0
   83f10:	9301      	str	r3, [sp, #4]
   83f12:	2300      	movs	r3, #0
   83f14:	9302      	str	r3, [sp, #8]
   83f16:	2300      	movs	r3, #0
   83f18:	9303      	str	r3, [sp, #12]
   83f1a:	4812      	ldr	r0, [pc, #72]	; (83f64 <vStartBlockingQueueTasks+0x1a4>)
   83f1c:	4919      	ldr	r1, [pc, #100]	; (83f84 <vStartBlockingQueueTasks+0x1c4>)
   83f1e:	2282      	movs	r2, #130	; 0x82
   83f20:	68fb      	ldr	r3, [r7, #12]
   83f22:	4c0f      	ldr	r4, [pc, #60]	; (83f60 <vStartBlockingQueueTasks+0x1a0>)
   83f24:	47a0      	blx	r4
	xTaskCreate( vBlockingQueueConsumer, "QConsB6", blckqSTACK_SIZE, ( void * ) pxQueueParameters6, tskIDLE_PRIORITY, NULL );
   83f26:	2300      	movs	r3, #0
   83f28:	9300      	str	r3, [sp, #0]
   83f2a:	2300      	movs	r3, #0
   83f2c:	9301      	str	r3, [sp, #4]
   83f2e:	2300      	movs	r3, #0
   83f30:	9302      	str	r3, [sp, #8]
   83f32:	2300      	movs	r3, #0
   83f34:	9303      	str	r3, [sp, #12]
   83f36:	4808      	ldr	r0, [pc, #32]	; (83f58 <vStartBlockingQueueTasks+0x198>)
   83f38:	4913      	ldr	r1, [pc, #76]	; (83f88 <vStartBlockingQueueTasks+0x1c8>)
   83f3a:	2282      	movs	r2, #130	; 0x82
   83f3c:	68bb      	ldr	r3, [r7, #8]
   83f3e:	4c08      	ldr	r4, [pc, #32]	; (83f60 <vStartBlockingQueueTasks+0x1a0>)
   83f40:	47a0      	blx	r4
}
   83f42:	3734      	adds	r7, #52	; 0x34
   83f44:	46bd      	mov	sp, r7
   83f46:	bd90      	pop	{r4, r7, pc}
   83f48:	000814c1 	.word	0x000814c1
   83f4c:	00081919 	.word	0x00081919
   83f50:	2007a618 	.word	0x2007a618
   83f54:	2007a620 	.word	0x2007a620
   83f58:	00083fed 	.word	0x00083fed
   83f5c:	000866bc 	.word	0x000866bc
   83f60:	000823d5 	.word	0x000823d5
   83f64:	00083f8d 	.word	0x00083f8d
   83f68:	000866c4 	.word	0x000866c4
   83f6c:	2007a622 	.word	0x2007a622
   83f70:	2007a61a 	.word	0x2007a61a
   83f74:	000866cc 	.word	0x000866cc
   83f78:	000866d4 	.word	0x000866d4
   83f7c:	2007a624 	.word	0x2007a624
   83f80:	2007a61c 	.word	0x2007a61c
   83f84:	000866dc 	.word	0x000866dc
   83f88:	000866e4 	.word	0x000866e4

00083f8c <vBlockingQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueProducer, pvParameters )
{
   83f8c:	b590      	push	{r4, r7, lr}
   83f8e:	b087      	sub	sp, #28
   83f90:	af00      	add	r7, sp, #0
   83f92:	6078      	str	r0, [r7, #4]
uint16_t usValue = 0;
   83f94:	2300      	movs	r3, #0
   83f96:	81fb      	strh	r3, [r7, #14]
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
   83f98:	2300      	movs	r3, #0
   83f9a:	82fb      	strh	r3, [r7, #22]

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
   83f9c:	687b      	ldr	r3, [r7, #4]
   83f9e:	613b      	str	r3, [r7, #16]

	for( ;; )
	{
		if( xQueueSend( pxQueueParameters->xQueue, ( void * ) &usValue, pxQueueParameters->xBlockTime ) != pdPASS )
   83fa0:	693b      	ldr	r3, [r7, #16]
   83fa2:	6819      	ldr	r1, [r3, #0]
   83fa4:	693b      	ldr	r3, [r7, #16]
   83fa6:	685b      	ldr	r3, [r3, #4]
   83fa8:	f107 020e 	add.w	r2, r7, #14
   83fac:	4608      	mov	r0, r1
   83fae:	4611      	mov	r1, r2
   83fb0:	461a      	mov	r2, r3
   83fb2:	2300      	movs	r3, #0
   83fb4:	4c0c      	ldr	r4, [pc, #48]	; (83fe8 <vBlockingQueueProducer+0x5c>)
   83fb6:	47a0      	blx	r4
   83fb8:	4603      	mov	r3, r0
   83fba:	2b01      	cmp	r3, #1
   83fbc:	d002      	beq.n	83fc4 <vBlockingQueueProducer+0x38>
		{
			sErrorEverOccurred = pdTRUE;
   83fbe:	2301      	movs	r3, #1
   83fc0:	82fb      	strh	r3, [r7, #22]

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}
	}
   83fc2:	e7ed      	b.n	83fa0 <vBlockingQueueProducer+0x14>
		}
		else
		{
			/* We have successfully posted a message, so increment the variable
			used to check we are still running. */
			if( sErrorEverOccurred == pdFALSE )
   83fc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   83fc8:	2b00      	cmp	r3, #0
   83fca:	d107      	bne.n	83fdc <vBlockingQueueProducer+0x50>
			{
				( *pxQueueParameters->psCheckVariable )++;
   83fcc:	693b      	ldr	r3, [r7, #16]
   83fce:	689a      	ldr	r2, [r3, #8]
   83fd0:	8813      	ldrh	r3, [r2, #0]
   83fd2:	b29b      	uxth	r3, r3
   83fd4:	b29b      	uxth	r3, r3
   83fd6:	3301      	adds	r3, #1
   83fd8:	b29b      	uxth	r3, r3
   83fda:	8013      	strh	r3, [r2, #0]
			}

			/* Increment the variable we are going to post next time round.  The
			consumer will expect the numbers to	follow in numerical order. */
			++usValue;
   83fdc:	89fb      	ldrh	r3, [r7, #14]
   83fde:	3301      	adds	r3, #1
   83fe0:	b29b      	uxth	r3, r3
   83fe2:	81fb      	strh	r3, [r7, #14]

			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}
	}
   83fe4:	e7dc      	b.n	83fa0 <vBlockingQueueProducer+0x14>
   83fe6:	bf00      	nop
   83fe8:	00081b69 	.word	0x00081b69

00083fec <vBlockingQueueConsumer>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vBlockingQueueConsumer, pvParameters )
{
   83fec:	b590      	push	{r4, r7, lr}
   83fee:	b087      	sub	sp, #28
   83ff0:	af00      	add	r7, sp, #0
   83ff2:	6078      	str	r0, [r7, #4]
uint16_t usData, usExpectedValue = 0;
   83ff4:	2300      	movs	r3, #0
   83ff6:	82fb      	strh	r3, [r7, #22]
xBlockingQueueParameters *pxQueueParameters;
short sErrorEverOccurred = pdFALSE;
   83ff8:	2300      	movs	r3, #0
   83ffa:	82bb      	strh	r3, [r7, #20]

	pxQueueParameters = ( xBlockingQueueParameters * ) pvParameters;
   83ffc:	687b      	ldr	r3, [r7, #4]
   83ffe:	613b      	str	r3, [r7, #16]

	for( ;; )
	{
		if( xQueueReceive( pxQueueParameters->xQueue, &usData, pxQueueParameters->xBlockTime ) == pdPASS )
   84000:	693b      	ldr	r3, [r7, #16]
   84002:	6819      	ldr	r1, [r3, #0]
   84004:	693b      	ldr	r3, [r7, #16]
   84006:	685b      	ldr	r3, [r3, #4]
   84008:	f107 020e 	add.w	r2, r7, #14
   8400c:	4608      	mov	r0, r1
   8400e:	4611      	mov	r1, r2
   84010:	461a      	mov	r2, r3
   84012:	2300      	movs	r3, #0
   84014:	4c0f      	ldr	r4, [pc, #60]	; (84054 <vBlockingQueueConsumer+0x68>)
   84016:	47a0      	blx	r4
   84018:	4603      	mov	r3, r0
   8401a:	2b01      	cmp	r3, #1
   8401c:	d118      	bne.n	84050 <vBlockingQueueConsumer+0x64>
		{
			if( usData != usExpectedValue )
   8401e:	89fb      	ldrh	r3, [r7, #14]
   84020:	8afa      	ldrh	r2, [r7, #22]
   84022:	429a      	cmp	r2, r3
   84024:	d004      	beq.n	84030 <vBlockingQueueConsumer+0x44>
			{
				/* Catch-up. */
				usExpectedValue = usData;
   84026:	89fb      	ldrh	r3, [r7, #14]
   84028:	82fb      	strh	r3, [r7, #22]

				sErrorEverOccurred = pdTRUE;
   8402a:	2301      	movs	r3, #1
   8402c:	82bb      	strh	r3, [r7, #20]
   8402e:	e00f      	b.n	84050 <vBlockingQueueConsumer+0x64>
			}
			else
			{
				/* We have successfully received a message, so increment the
				variable used to check we are still running. */
				if( sErrorEverOccurred == pdFALSE )
   84030:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
   84034:	2b00      	cmp	r3, #0
   84036:	d107      	bne.n	84048 <vBlockingQueueConsumer+0x5c>
				{
					( *pxQueueParameters->psCheckVariable )++;
   84038:	693b      	ldr	r3, [r7, #16]
   8403a:	689a      	ldr	r2, [r3, #8]
   8403c:	8813      	ldrh	r3, [r2, #0]
   8403e:	b29b      	uxth	r3, r3
   84040:	b29b      	uxth	r3, r3
   84042:	3301      	adds	r3, #1
   84044:	b29b      	uxth	r3, r3
   84046:	8013      	strh	r3, [r2, #0]
				}

				/* Increment the value we expect to remove from the queue next time
				round. */
				++usExpectedValue;
   84048:	8afb      	ldrh	r3, [r7, #22]
   8404a:	3301      	adds	r3, #1
   8404c:	82fb      	strh	r3, [r7, #22]
					taskYIELD();
				}
			}
			#endif
		}
	}
   8404e:	e7d7      	b.n	84000 <vBlockingQueueConsumer+0x14>
   84050:	e7d6      	b.n	84000 <vBlockingQueueConsumer+0x14>
   84052:	bf00      	nop
   84054:	00081e29 	.word	0x00081e29

00084058 <xAreBlockingQueuesStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreBlockingQueuesStillRunning( void )
{
   84058:	b480      	push	{r7}
   8405a:	b083      	sub	sp, #12
   8405c:	af00      	add	r7, sp, #0
static short sLastBlockingConsumerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
static short sLastBlockingProducerCount[ blckqNUM_TASK_SETS ] = { ( uint16_t ) 0, ( uint16_t ) 0, ( uint16_t ) 0 };
BaseType_t xReturn = pdPASS, xTasks;
   8405e:	2301      	movs	r3, #1
   84060:	607b      	str	r3, [r7, #4]
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
   84062:	2300      	movs	r3, #0
   84064:	603b      	str	r3, [r7, #0]
   84066:	e032      	b.n	840ce <xAreBlockingQueuesStillRunning+0x76>
	{
		if( sBlockingConsumerCount[ xTasks ] == sLastBlockingConsumerCount[ xTasks ]  )
   84068:	4b1e      	ldr	r3, [pc, #120]	; (840e4 <xAreBlockingQueuesStillRunning+0x8c>)
   8406a:	683a      	ldr	r2, [r7, #0]
   8406c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   84070:	b29a      	uxth	r2, r3
   84072:	4b1d      	ldr	r3, [pc, #116]	; (840e8 <xAreBlockingQueuesStillRunning+0x90>)
   84074:	6839      	ldr	r1, [r7, #0]
   84076:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
   8407a:	b212      	sxth	r2, r2
   8407c:	b21b      	sxth	r3, r3
   8407e:	429a      	cmp	r2, r3
   84080:	d101      	bne.n	84086 <xAreBlockingQueuesStillRunning+0x2e>
		{
			xReturn = pdFALSE;
   84082:	2300      	movs	r3, #0
   84084:	607b      	str	r3, [r7, #4]
		}
		sLastBlockingConsumerCount[ xTasks ] = sBlockingConsumerCount[ xTasks ];
   84086:	4b17      	ldr	r3, [pc, #92]	; (840e4 <xAreBlockingQueuesStillRunning+0x8c>)
   84088:	683a      	ldr	r2, [r7, #0]
   8408a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   8408e:	b299      	uxth	r1, r3
   84090:	4b15      	ldr	r3, [pc, #84]	; (840e8 <xAreBlockingQueuesStillRunning+0x90>)
   84092:	683a      	ldr	r2, [r7, #0]
   84094:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]


		if( sBlockingProducerCount[ xTasks ] == sLastBlockingProducerCount[ xTasks ]  )
   84098:	4b14      	ldr	r3, [pc, #80]	; (840ec <xAreBlockingQueuesStillRunning+0x94>)
   8409a:	683a      	ldr	r2, [r7, #0]
   8409c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   840a0:	b29a      	uxth	r2, r3
   840a2:	4b13      	ldr	r3, [pc, #76]	; (840f0 <xAreBlockingQueuesStillRunning+0x98>)
   840a4:	6839      	ldr	r1, [r7, #0]
   840a6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
   840aa:	b212      	sxth	r2, r2
   840ac:	b21b      	sxth	r3, r3
   840ae:	429a      	cmp	r2, r3
   840b0:	d101      	bne.n	840b6 <xAreBlockingQueuesStillRunning+0x5e>
		{
			xReturn = pdFALSE;
   840b2:	2300      	movs	r3, #0
   840b4:	607b      	str	r3, [r7, #4]
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
   840b6:	4b0d      	ldr	r3, [pc, #52]	; (840ec <xAreBlockingQueuesStillRunning+0x94>)
   840b8:	683a      	ldr	r2, [r7, #0]
   840ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   840be:	b299      	uxth	r1, r3
   840c0:	4b0b      	ldr	r3, [pc, #44]	; (840f0 <xAreBlockingQueuesStillRunning+0x98>)
   840c2:	683a      	ldr	r2, [r7, #0]
   840c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	changed or not.

	Loop through each check variable to and return pdFALSE if any are found not
	to have changed since the last call. */

	for( xTasks = 0; xTasks < blckqNUM_TASK_SETS; xTasks++ )
   840c8:	683b      	ldr	r3, [r7, #0]
   840ca:	3301      	adds	r3, #1
   840cc:	603b      	str	r3, [r7, #0]
   840ce:	683b      	ldr	r3, [r7, #0]
   840d0:	2b02      	cmp	r3, #2
   840d2:	ddc9      	ble.n	84068 <xAreBlockingQueuesStillRunning+0x10>
			xReturn = pdFALSE;
		}
		sLastBlockingProducerCount[ xTasks ] = sBlockingProducerCount[ xTasks ];
	}

	return xReturn;
   840d4:	687b      	ldr	r3, [r7, #4]
}
   840d6:	4618      	mov	r0, r3
   840d8:	370c      	adds	r7, #12
   840da:	46bd      	mov	sp, r7
   840dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   840e0:	4770      	bx	lr
   840e2:	bf00      	nop
   840e4:	2007a618 	.word	0x2007a618
   840e8:	2007a628 	.word	0x2007a628
   840ec:	2007a620 	.word	0x2007a620
   840f0:	2007a630 	.word	0x2007a630

000840f4 <vCreateBlockTimeTasks>:
static void vSecondaryBlockTimeTestTask( void *pvParameters );

/*-----------------------------------------------------------*/

void vCreateBlockTimeTasks( void )
{
   840f4:	b590      	push	{r4, r7, lr}
   840f6:	b085      	sub	sp, #20
   840f8:	af04      	add	r7, sp, #16
	/* Create the queue on which the two tasks block. */
    xTestQueue = xQueueCreate( bktQUEUE_LENGTH, sizeof( BaseType_t ) );
   840fa:	2005      	movs	r0, #5
   840fc:	2104      	movs	r1, #4
   840fe:	2200      	movs	r2, #0
   84100:	4b11      	ldr	r3, [pc, #68]	; (84148 <vCreateBlockTimeTasks+0x54>)
   84102:	4798      	blx	r3
   84104:	4602      	mov	r2, r0
   84106:	4b11      	ldr	r3, [pc, #68]	; (8414c <vCreateBlockTimeTasks+0x58>)
   84108:	601a      	str	r2, [r3, #0]
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xTestQueue, "Block_Time_Queue" );

	/* Create the two test tasks. */
	xTaskCreate( vPrimaryBlockTimeTestTask, "BTest1", configMINIMAL_STACK_SIZE, NULL, bktPRIMARY_PRIORITY, NULL );
   8410a:	2302      	movs	r3, #2
   8410c:	9300      	str	r3, [sp, #0]
   8410e:	2300      	movs	r3, #0
   84110:	9301      	str	r3, [sp, #4]
   84112:	2300      	movs	r3, #0
   84114:	9302      	str	r3, [sp, #8]
   84116:	2300      	movs	r3, #0
   84118:	9303      	str	r3, [sp, #12]
   8411a:	480d      	ldr	r0, [pc, #52]	; (84150 <vCreateBlockTimeTasks+0x5c>)
   8411c:	490d      	ldr	r1, [pc, #52]	; (84154 <vCreateBlockTimeTasks+0x60>)
   8411e:	2282      	movs	r2, #130	; 0x82
   84120:	2300      	movs	r3, #0
   84122:	4c0d      	ldr	r4, [pc, #52]	; (84158 <vCreateBlockTimeTasks+0x64>)
   84124:	47a0      	blx	r4
	xTaskCreate( vSecondaryBlockTimeTestTask, "BTest2", configMINIMAL_STACK_SIZE, NULL, bktSECONDARY_PRIORITY, &xSecondary );
   84126:	2301      	movs	r3, #1
   84128:	9300      	str	r3, [sp, #0]
   8412a:	4b0c      	ldr	r3, [pc, #48]	; (8415c <vCreateBlockTimeTasks+0x68>)
   8412c:	9301      	str	r3, [sp, #4]
   8412e:	2300      	movs	r3, #0
   84130:	9302      	str	r3, [sp, #8]
   84132:	2300      	movs	r3, #0
   84134:	9303      	str	r3, [sp, #12]
   84136:	480a      	ldr	r0, [pc, #40]	; (84160 <vCreateBlockTimeTasks+0x6c>)
   84138:	490a      	ldr	r1, [pc, #40]	; (84164 <vCreateBlockTimeTasks+0x70>)
   8413a:	2282      	movs	r2, #130	; 0x82
   8413c:	2300      	movs	r3, #0
   8413e:	4c06      	ldr	r4, [pc, #24]	; (84158 <vCreateBlockTimeTasks+0x64>)
   84140:	47a0      	blx	r4
}
   84142:	3704      	adds	r7, #4
   84144:	46bd      	mov	sp, r7
   84146:	bd90      	pop	{r4, r7, pc}
   84148:	00081919 	.word	0x00081919
   8414c:	2007a638 	.word	0x2007a638
   84150:	00084169 	.word	0x00084169
   84154:	000866ec 	.word	0x000866ec
   84158:	000823d5 	.word	0x000823d5
   8415c:	2007a63c 	.word	0x2007a63c
   84160:	0008449d 	.word	0x0008449d
   84164:	000866f4 	.word	0x000866f4

00084168 <vPrimaryBlockTimeTestTask>:
/*-----------------------------------------------------------*/

static void vPrimaryBlockTimeTestTask( void *pvParameters )
{
   84168:	b590      	push	{r4, r7, lr}
   8416a:	b089      	sub	sp, #36	; 0x24
   8416c:	af00      	add	r7, sp, #0
   8416e:	6078      	str	r0, [r7, #4]
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   84170:	2300      	movs	r3, #0
   84172:	613b      	str	r3, [r7, #16]
   84174:	e030      	b.n	841d8 <vPrimaryBlockTimeTestTask+0x70>
		{
			/* The queue is empty. Attempt to read from the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
   84176:	693b      	ldr	r3, [r7, #16]
   84178:	220a      	movs	r2, #10
   8417a:	fa02 f303 	lsl.w	r3, r2, r3
   8417e:	61fb      	str	r3, [r7, #28]

			xTimeWhenBlocking = xTaskGetTickCount();
   84180:	4b8a      	ldr	r3, [pc, #552]	; (843ac <vPrimaryBlockTimeTestTask+0x244>)
   84182:	4798      	blx	r3
   84184:	61b8      	str	r0, [r7, #24]

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueReceive( xTestQueue, &xData, xTimeToBlock ) != errQUEUE_EMPTY )
   84186:	4b8a      	ldr	r3, [pc, #552]	; (843b0 <vPrimaryBlockTimeTestTask+0x248>)
   84188:	681a      	ldr	r2, [r3, #0]
   8418a:	f107 030c 	add.w	r3, r7, #12
   8418e:	4610      	mov	r0, r2
   84190:	4619      	mov	r1, r3
   84192:	69fa      	ldr	r2, [r7, #28]
   84194:	2300      	movs	r3, #0
   84196:	4c87      	ldr	r4, [pc, #540]	; (843b4 <vPrimaryBlockTimeTestTask+0x24c>)
   84198:	47a0      	blx	r4
   8419a:	4603      	mov	r3, r0
   8419c:	2b00      	cmp	r3, #0
   8419e:	d002      	beq.n	841a6 <vPrimaryBlockTimeTestTask+0x3e>
			{
				xErrorOccurred = pdTRUE;
   841a0:	4b85      	ldr	r3, [pc, #532]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   841a2:	2201      	movs	r2, #1
   841a4:	601a      	str	r2, [r3, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
   841a6:	4b81      	ldr	r3, [pc, #516]	; (843ac <vPrimaryBlockTimeTestTask+0x244>)
   841a8:	4798      	blx	r3
   841aa:	4602      	mov	r2, r0
   841ac:	69bb      	ldr	r3, [r7, #24]
   841ae:	1ad3      	subs	r3, r2, r3
   841b0:	617b      	str	r3, [r7, #20]

			if( xBlockedTime < xTimeToBlock )
   841b2:	697a      	ldr	r2, [r7, #20]
   841b4:	69fb      	ldr	r3, [r7, #28]
   841b6:	429a      	cmp	r2, r3
   841b8:	d202      	bcs.n	841c0 <vPrimaryBlockTimeTestTask+0x58>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
   841ba:	4b7f      	ldr	r3, [pc, #508]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   841bc:	2201      	movs	r2, #1
   841be:	601a      	str	r2, [r3, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
   841c0:	69fb      	ldr	r3, [r7, #28]
   841c2:	f103 020f 	add.w	r2, r3, #15
   841c6:	697b      	ldr	r3, [r7, #20]
   841c8:	429a      	cmp	r2, r3
   841ca:	d202      	bcs.n	841d2 <vPrimaryBlockTimeTestTask+0x6a>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
   841cc:	4b7a      	ldr	r3, [pc, #488]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   841ce:	2201      	movs	r2, #1
   841d0:	601a      	str	r2, [r3, #0]
	{
		/*********************************************************************
        Test 1

        Simple block time wakeup test on queue receives. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   841d2:	693b      	ldr	r3, [r7, #16]
   841d4:	3301      	adds	r3, #1
   841d6:	613b      	str	r3, [r7, #16]
   841d8:	693b      	ldr	r3, [r7, #16]
   841da:	2b04      	cmp	r3, #4
   841dc:	ddcb      	ble.n	84176 <vPrimaryBlockTimeTestTask+0xe>
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   841de:	2300      	movs	r3, #0
   841e0:	613b      	str	r3, [r7, #16]
   841e2:	e012      	b.n	8420a <vPrimaryBlockTimeTestTask+0xa2>
		{
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
   841e4:	4b72      	ldr	r3, [pc, #456]	; (843b0 <vPrimaryBlockTimeTestTask+0x248>)
   841e6:	681a      	ldr	r2, [r3, #0]
   841e8:	f107 0310 	add.w	r3, r7, #16
   841ec:	4610      	mov	r0, r2
   841ee:	4619      	mov	r1, r3
   841f0:	2200      	movs	r2, #0
   841f2:	2300      	movs	r3, #0
   841f4:	4c71      	ldr	r4, [pc, #452]	; (843bc <vPrimaryBlockTimeTestTask+0x254>)
   841f6:	47a0      	blx	r4
   841f8:	4603      	mov	r3, r0
   841fa:	2b01      	cmp	r3, #1
   841fc:	d002      	beq.n	84204 <vPrimaryBlockTimeTestTask+0x9c>
			{
				xErrorOccurred = pdTRUE;
   841fe:	4b6e      	ldr	r3, [pc, #440]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   84200:	2201      	movs	r2, #1
   84202:	601a      	str	r2, [r3, #0]
        Test 2

        Simple block time wakeup test on queue sends.

		First fill the queue.  It should be empty so all sends should pass. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   84204:	693b      	ldr	r3, [r7, #16]
   84206:	3301      	adds	r3, #1
   84208:	613b      	str	r3, [r7, #16]
   8420a:	693b      	ldr	r3, [r7, #16]
   8420c:	2b04      	cmp	r3, #4
   8420e:	dde9      	ble.n	841e4 <vPrimaryBlockTimeTestTask+0x7c>
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   84210:	2300      	movs	r3, #0
   84212:	613b      	str	r3, [r7, #16]
   84214:	e030      	b.n	84278 <vPrimaryBlockTimeTestTask+0x110>
		{
			/* The queue is full. Attempt to write to the queue using a block
			time.  When we wake, ensure the delta in time is as expected. */
			xTimeToBlock = ( TickType_t ) ( bktPRIMARY_BLOCK_TIME << xItem );
   84216:	693b      	ldr	r3, [r7, #16]
   84218:	220a      	movs	r2, #10
   8421a:	fa02 f303 	lsl.w	r3, r2, r3
   8421e:	61fb      	str	r3, [r7, #28]

			xTimeWhenBlocking = xTaskGetTickCount();
   84220:	4b62      	ldr	r3, [pc, #392]	; (843ac <vPrimaryBlockTimeTestTask+0x244>)
   84222:	4798      	blx	r3
   84224:	61b8      	str	r0, [r7, #24]

			/* We should unblock after xTimeToBlock having not received
			anything on the queue. */
			if( xQueueSend( xTestQueue, &xItem, xTimeToBlock ) != errQUEUE_FULL )
   84226:	4b62      	ldr	r3, [pc, #392]	; (843b0 <vPrimaryBlockTimeTestTask+0x248>)
   84228:	681a      	ldr	r2, [r3, #0]
   8422a:	f107 0310 	add.w	r3, r7, #16
   8422e:	4610      	mov	r0, r2
   84230:	4619      	mov	r1, r3
   84232:	69fa      	ldr	r2, [r7, #28]
   84234:	2300      	movs	r3, #0
   84236:	4c61      	ldr	r4, [pc, #388]	; (843bc <vPrimaryBlockTimeTestTask+0x254>)
   84238:	47a0      	blx	r4
   8423a:	4603      	mov	r3, r0
   8423c:	2b00      	cmp	r3, #0
   8423e:	d002      	beq.n	84246 <vPrimaryBlockTimeTestTask+0xde>
			{
				xErrorOccurred = pdTRUE;
   84240:	4b5d      	ldr	r3, [pc, #372]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   84242:	2201      	movs	r2, #1
   84244:	601a      	str	r2, [r3, #0]
			}

			/* How long were we blocked for? */
			xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
   84246:	4b59      	ldr	r3, [pc, #356]	; (843ac <vPrimaryBlockTimeTestTask+0x244>)
   84248:	4798      	blx	r3
   8424a:	4602      	mov	r2, r0
   8424c:	69bb      	ldr	r3, [r7, #24]
   8424e:	1ad3      	subs	r3, r2, r3
   84250:	617b      	str	r3, [r7, #20]

			if( xBlockedTime < xTimeToBlock )
   84252:	697a      	ldr	r2, [r7, #20]
   84254:	69fb      	ldr	r3, [r7, #28]
   84256:	429a      	cmp	r2, r3
   84258:	d202      	bcs.n	84260 <vPrimaryBlockTimeTestTask+0xf8>
			{
				/* Should not have blocked for less than we requested. */
				xErrorOccurred = pdTRUE;
   8425a:	4b57      	ldr	r3, [pc, #348]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   8425c:	2201      	movs	r2, #1
   8425e:	601a      	str	r2, [r3, #0]
			}

			if( xBlockedTime > ( xTimeToBlock + bktALLOWABLE_MARGIN ) )
   84260:	69fb      	ldr	r3, [r7, #28]
   84262:	f103 020f 	add.w	r2, r3, #15
   84266:	697b      	ldr	r3, [r7, #20]
   84268:	429a      	cmp	r2, r3
   8426a:	d202      	bcs.n	84272 <vPrimaryBlockTimeTestTask+0x10a>
			{
				/* Should not have blocked for longer than we requested,
				although we would not necessarily run as soon as we were
				unblocked so a margin is allowed. */
				xErrorOccurred = pdTRUE;
   8426c:	4b52      	ldr	r3, [pc, #328]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   8426e:	2201      	movs	r2, #1
   84270:	601a      	str	r2, [r3, #0]
			#if configUSE_PREEMPTION == 0
				taskYIELD();
			#endif
		}

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   84272:	693b      	ldr	r3, [r7, #16]
   84274:	3301      	adds	r3, #1
   84276:	613b      	str	r3, [r7, #16]
   84278:	693b      	ldr	r3, [r7, #16]
   8427a:	2b04      	cmp	r3, #4
   8427c:	ddcb      	ble.n	84216 <vPrimaryBlockTimeTestTask+0xae>
		recognise that its block time has not expired and return to block for
		the remains of its block time.

		Wake the other task so it blocks attempting to post to the already
		full queue. */
		xRunIndicator = 0;
   8427e:	4b50      	ldr	r3, [pc, #320]	; (843c0 <vPrimaryBlockTimeTestTask+0x258>)
   84280:	2200      	movs	r2, #0
   84282:	601a      	str	r2, [r3, #0]
		vTaskResume( xSecondary );
   84284:	4b4f      	ldr	r3, [pc, #316]	; (843c4 <vPrimaryBlockTimeTestTask+0x25c>)
   84286:	681b      	ldr	r3, [r3, #0]
   84288:	4618      	mov	r0, r3
   8428a:	4b4f      	ldr	r3, [pc, #316]	; (843c8 <vPrimaryBlockTimeTestTask+0x260>)
   8428c:	4798      	blx	r3

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
   8428e:	e002      	b.n	84296 <vPrimaryBlockTimeTestTask+0x12e>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
   84290:	2014      	movs	r0, #20
   84292:	4b4e      	ldr	r3, [pc, #312]	; (843cc <vPrimaryBlockTimeTestTask+0x264>)
   84294:	4798      	blx	r3
		full queue. */
		xRunIndicator = 0;
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
   84296:	4b4a      	ldr	r3, [pc, #296]	; (843c0 <vPrimaryBlockTimeTestTask+0x258>)
   84298:	681b      	ldr	r3, [r3, #0]
   8429a:	2b55      	cmp	r3, #85	; 0x55
   8429c:	d1f8      	bne.n	84290 <vPrimaryBlockTimeTestTask+0x128>
		{
			/* The other task has not yet executed. */
			vTaskDelay( bktSHORT_WAIT );
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
   8429e:	2014      	movs	r0, #20
   842a0:	4b4a      	ldr	r3, [pc, #296]	; (843cc <vPrimaryBlockTimeTestTask+0x264>)
   842a2:	4798      	blx	r3
		xRunIndicator = 0;
   842a4:	4b46      	ldr	r3, [pc, #280]	; (843c0 <vPrimaryBlockTimeTestTask+0x258>)
   842a6:	2200      	movs	r2, #0
   842a8:	601a      	str	r2, [r3, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   842aa:	2300      	movs	r3, #0
   842ac:	613b      	str	r3, [r7, #16]
   842ae:	e03c      	b.n	8432a <vPrimaryBlockTimeTestTask+0x1c2>
		{
			/* Now when we make space on the queue the other task should wake
			but not execute as this task has higher priority. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
   842b0:	4b3f      	ldr	r3, [pc, #252]	; (843b0 <vPrimaryBlockTimeTestTask+0x248>)
   842b2:	681a      	ldr	r2, [r3, #0]
   842b4:	f107 030c 	add.w	r3, r7, #12
   842b8:	4610      	mov	r0, r2
   842ba:	4619      	mov	r1, r3
   842bc:	2200      	movs	r2, #0
   842be:	2300      	movs	r3, #0
   842c0:	4c3c      	ldr	r4, [pc, #240]	; (843b4 <vPrimaryBlockTimeTestTask+0x24c>)
   842c2:	47a0      	blx	r4
   842c4:	4603      	mov	r3, r0
   842c6:	2b01      	cmp	r3, #1
   842c8:	d002      	beq.n	842d0 <vPrimaryBlockTimeTestTask+0x168>
			{
				xErrorOccurred = pdTRUE;
   842ca:	4b3b      	ldr	r3, [pc, #236]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   842cc:	2201      	movs	r2, #1
   842ce:	601a      	str	r2, [r3, #0]
			}

			/* Now fill the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			full ourselves, and the other task have set xRunIndicator. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
   842d0:	4b37      	ldr	r3, [pc, #220]	; (843b0 <vPrimaryBlockTimeTestTask+0x248>)
   842d2:	681a      	ldr	r2, [r3, #0]
   842d4:	f107 0310 	add.w	r3, r7, #16
   842d8:	4610      	mov	r0, r2
   842da:	4619      	mov	r1, r3
   842dc:	2200      	movs	r2, #0
   842de:	2300      	movs	r3, #0
   842e0:	4c36      	ldr	r4, [pc, #216]	; (843bc <vPrimaryBlockTimeTestTask+0x254>)
   842e2:	47a0      	blx	r4
   842e4:	4603      	mov	r3, r0
   842e6:	2b01      	cmp	r3, #1
   842e8:	d002      	beq.n	842f0 <vPrimaryBlockTimeTestTask+0x188>
			{
				xErrorOccurred = pdTRUE;
   842ea:	4b33      	ldr	r3, [pc, #204]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   842ec:	2201      	movs	r2, #1
   842ee:	601a      	str	r2, [r3, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
   842f0:	4b33      	ldr	r3, [pc, #204]	; (843c0 <vPrimaryBlockTimeTestTask+0x258>)
   842f2:	681b      	ldr	r3, [r3, #0]
   842f4:	2b55      	cmp	r3, #85	; 0x55
   842f6:	d102      	bne.n	842fe <vPrimaryBlockTimeTestTask+0x196>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
   842f8:	4b2f      	ldr	r3, [pc, #188]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   842fa:	2201      	movs	r2, #1
   842fc:	601a      	str	r2, [r3, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
   842fe:	4b31      	ldr	r3, [pc, #196]	; (843c4 <vPrimaryBlockTimeTestTask+0x25c>)
   84300:	681b      	ldr	r3, [r3, #0]
   84302:	4618      	mov	r0, r3
   84304:	2104      	movs	r1, #4
   84306:	4b32      	ldr	r3, [pc, #200]	; (843d0 <vPrimaryBlockTimeTestTask+0x268>)
   84308:	4798      	blx	r3

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
   8430a:	4b2d      	ldr	r3, [pc, #180]	; (843c0 <vPrimaryBlockTimeTestTask+0x258>)
   8430c:	681b      	ldr	r3, [r3, #0]
   8430e:	2b55      	cmp	r3, #85	; 0x55
   84310:	d102      	bne.n	84318 <vPrimaryBlockTimeTestTask+0x1b0>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
   84312:	4b29      	ldr	r3, [pc, #164]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   84314:	2201      	movs	r2, #1
   84316:	601a      	str	r2, [r3, #0]
			}

			/* Set the priority back down. */
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
   84318:	4b2a      	ldr	r3, [pc, #168]	; (843c4 <vPrimaryBlockTimeTestTask+0x25c>)
   8431a:	681b      	ldr	r3, [r3, #0]
   8431c:	4618      	mov	r0, r3
   8431e:	2101      	movs	r1, #1
   84320:	4b2b      	ldr	r3, [pc, #172]	; (843d0 <vPrimaryBlockTimeTestTask+0x268>)
   84322:	4798      	blx	r3
		}
		/* Make sure the other task is blocked on the queue. */
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   84324:	693b      	ldr	r3, [r7, #16]
   84326:	3301      	adds	r3, #1
   84328:	613b      	str	r3, [r7, #16]
   8432a:	693b      	ldr	r3, [r7, #16]
   8432c:	2b04      	cmp	r3, #4
   8432e:	ddbf      	ble.n	842b0 <vPrimaryBlockTimeTestTask+0x148>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
   84330:	e002      	b.n	84338 <vPrimaryBlockTimeTestTask+0x1d0>
		{
			vTaskDelay( bktSHORT_WAIT );
   84332:	2014      	movs	r0, #20
   84334:	4b25      	ldr	r3, [pc, #148]	; (843cc <vPrimaryBlockTimeTestTask+0x264>)
   84336:	4798      	blx	r3
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
   84338:	4b21      	ldr	r3, [pc, #132]	; (843c0 <vPrimaryBlockTimeTestTask+0x258>)
   8433a:	681b      	ldr	r3, [r3, #0]
   8433c:	2b55      	cmp	r3, #85	; 0x55
   8433e:	d1f8      	bne.n	84332 <vPrimaryBlockTimeTestTask+0x1ca>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
   84340:	2014      	movs	r0, #20
   84342:	4b22      	ldr	r3, [pc, #136]	; (843cc <vPrimaryBlockTimeTestTask+0x264>)
   84344:	4798      	blx	r3
		xRunIndicator = 0;
   84346:	4b1e      	ldr	r3, [pc, #120]	; (843c0 <vPrimaryBlockTimeTestTask+0x258>)
   84348:	2200      	movs	r2, #0
   8434a:	601a      	str	r2, [r3, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   8434c:	2300      	movs	r3, #0
   8434e:	613b      	str	r3, [r7, #16]
   84350:	e012      	b.n	84378 <vPrimaryBlockTimeTestTask+0x210>
		{
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
   84352:	4b17      	ldr	r3, [pc, #92]	; (843b0 <vPrimaryBlockTimeTestTask+0x248>)
   84354:	681a      	ldr	r2, [r3, #0]
   84356:	f107 030c 	add.w	r3, r7, #12
   8435a:	4610      	mov	r0, r2
   8435c:	4619      	mov	r1, r3
   8435e:	2200      	movs	r2, #0
   84360:	2300      	movs	r3, #0
   84362:	4c14      	ldr	r4, [pc, #80]	; (843b4 <vPrimaryBlockTimeTestTask+0x24c>)
   84364:	47a0      	blx	r4
   84366:	4603      	mov	r3, r0
   84368:	2b01      	cmp	r3, #1
   8436a:	d002      	beq.n	84372 <vPrimaryBlockTimeTestTask+0x20a>
			{
				xErrorOccurred = pdTRUE;
   8436c:	4b12      	ldr	r3, [pc, #72]	; (843b8 <vPrimaryBlockTimeTestTask+0x250>)
   8436e:	2201      	movs	r2, #1
   84370:	601a      	str	r2, [r3, #0]

		As per test 3 - but with the send and receive the other way around.
		The other task blocks attempting to read from the queue.

		Empty the queue.  We should find that it is full. */
		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   84372:	693b      	ldr	r3, [r7, #16]
   84374:	3301      	adds	r3, #1
   84376:	613b      	str	r3, [r7, #16]
   84378:	693b      	ldr	r3, [r7, #16]
   8437a:	2b04      	cmp	r3, #4
   8437c:	dde9      	ble.n	84352 <vPrimaryBlockTimeTestTask+0x1ea>
			}
		}

		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );
   8437e:	4b11      	ldr	r3, [pc, #68]	; (843c4 <vPrimaryBlockTimeTestTask+0x25c>)
   84380:	681b      	ldr	r3, [r3, #0]
   84382:	4618      	mov	r0, r3
   84384:	4b10      	ldr	r3, [pc, #64]	; (843c8 <vPrimaryBlockTimeTestTask+0x260>)
   84386:	4798      	blx	r3

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
   84388:	e002      	b.n	84390 <vPrimaryBlockTimeTestTask+0x228>
		{
			vTaskDelay( bktSHORT_WAIT );
   8438a:	2014      	movs	r0, #20
   8438c:	4b0f      	ldr	r3, [pc, #60]	; (843cc <vPrimaryBlockTimeTestTask+0x264>)
   8438e:	4798      	blx	r3
		/* Wake the other task so it blocks attempting to read from  the
		already	empty queue. */
		vTaskResume( xSecondary );

		/* We need to wait a little to ensure the other task executes. */
		while( xRunIndicator != bktRUN_INDICATOR )
   84390:	4b0b      	ldr	r3, [pc, #44]	; (843c0 <vPrimaryBlockTimeTestTask+0x258>)
   84392:	681b      	ldr	r3, [r3, #0]
   84394:	2b55      	cmp	r3, #85	; 0x55
   84396:	d1f8      	bne.n	8438a <vPrimaryBlockTimeTestTask+0x222>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
   84398:	2014      	movs	r0, #20
   8439a:	4b0c      	ldr	r3, [pc, #48]	; (843cc <vPrimaryBlockTimeTestTask+0x264>)
   8439c:	4798      	blx	r3
		xRunIndicator = 0;
   8439e:	4b08      	ldr	r3, [pc, #32]	; (843c0 <vPrimaryBlockTimeTestTask+0x258>)
   843a0:	2200      	movs	r2, #0
   843a2:	601a      	str	r2, [r3, #0]

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   843a4:	2300      	movs	r3, #0
   843a6:	613b      	str	r3, [r7, #16]
   843a8:	e051      	b.n	8444e <vPrimaryBlockTimeTestTask+0x2e6>
   843aa:	bf00      	nop
   843ac:	00082c71 	.word	0x00082c71
   843b0:	2007a638 	.word	0x2007a638
   843b4:	00081e29 	.word	0x00081e29
   843b8:	2007a648 	.word	0x2007a648
   843bc:	00081b69 	.word	0x00081b69
   843c0:	2007a64c 	.word	0x2007a64c
   843c4:	2007a63c 	.word	0x2007a63c
   843c8:	000829fd 	.word	0x000829fd
   843cc:	00082659 	.word	0x00082659
   843d0:	00082731 	.word	0x00082731
		{
			/* Now when we place an item on the queue the other task should
			wake but not execute as this task has higher priority. */
			if( xQueueSend( xTestQueue, &xItem, bktDONT_BLOCK ) != pdPASS )
   843d4:	4b28      	ldr	r3, [pc, #160]	; (84478 <vPrimaryBlockTimeTestTask+0x310>)
   843d6:	681a      	ldr	r2, [r3, #0]
   843d8:	f107 0310 	add.w	r3, r7, #16
   843dc:	4610      	mov	r0, r2
   843de:	4619      	mov	r1, r3
   843e0:	2200      	movs	r2, #0
   843e2:	2300      	movs	r3, #0
   843e4:	4c25      	ldr	r4, [pc, #148]	; (8447c <vPrimaryBlockTimeTestTask+0x314>)
   843e6:	47a0      	blx	r4
   843e8:	4603      	mov	r3, r0
   843ea:	2b01      	cmp	r3, #1
   843ec:	d002      	beq.n	843f4 <vPrimaryBlockTimeTestTask+0x28c>
			{
				xErrorOccurred = pdTRUE;
   843ee:	4b24      	ldr	r3, [pc, #144]	; (84480 <vPrimaryBlockTimeTestTask+0x318>)
   843f0:	2201      	movs	r2, #1
   843f2:	601a      	str	r2, [r3, #0]
			}

			/* Now empty the queue again before the other task gets a chance to
			execute.  If the other task had executed we would find the queue
			empty ourselves, and the other task would be suspended. */
			if( xQueueReceive( xTestQueue, &xData, bktDONT_BLOCK ) != pdPASS )
   843f4:	4b20      	ldr	r3, [pc, #128]	; (84478 <vPrimaryBlockTimeTestTask+0x310>)
   843f6:	681a      	ldr	r2, [r3, #0]
   843f8:	f107 030c 	add.w	r3, r7, #12
   843fc:	4610      	mov	r0, r2
   843fe:	4619      	mov	r1, r3
   84400:	2200      	movs	r2, #0
   84402:	2300      	movs	r3, #0
   84404:	4c1f      	ldr	r4, [pc, #124]	; (84484 <vPrimaryBlockTimeTestTask+0x31c>)
   84406:	47a0      	blx	r4
   84408:	4603      	mov	r3, r0
   8440a:	2b01      	cmp	r3, #1
   8440c:	d002      	beq.n	84414 <vPrimaryBlockTimeTestTask+0x2ac>
			{
				xErrorOccurred = pdTRUE;
   8440e:	4b1c      	ldr	r3, [pc, #112]	; (84480 <vPrimaryBlockTimeTestTask+0x318>)
   84410:	2201      	movs	r2, #1
   84412:	601a      	str	r2, [r3, #0]
			}

			if( xRunIndicator == bktRUN_INDICATOR )
   84414:	4b1c      	ldr	r3, [pc, #112]	; (84488 <vPrimaryBlockTimeTestTask+0x320>)
   84416:	681b      	ldr	r3, [r3, #0]
   84418:	2b55      	cmp	r3, #85	; 0x55
   8441a:	d102      	bne.n	84422 <vPrimaryBlockTimeTestTask+0x2ba>
			{
				/* The other task should not have executed. */
				xErrorOccurred = pdTRUE;
   8441c:	4b18      	ldr	r3, [pc, #96]	; (84480 <vPrimaryBlockTimeTestTask+0x318>)
   8441e:	2201      	movs	r2, #1
   84420:	601a      	str	r2, [r3, #0]
			}

			/* Raise the priority of the other task so it executes and blocks
			on the queue again. */
			vTaskPrioritySet( xSecondary, bktPRIMARY_PRIORITY + 2 );
   84422:	4b1a      	ldr	r3, [pc, #104]	; (8448c <vPrimaryBlockTimeTestTask+0x324>)
   84424:	681b      	ldr	r3, [r3, #0]
   84426:	4618      	mov	r0, r3
   84428:	2104      	movs	r1, #4
   8442a:	4b19      	ldr	r3, [pc, #100]	; (84490 <vPrimaryBlockTimeTestTask+0x328>)
   8442c:	4798      	blx	r3

			/* The other task should now have re-blocked without exiting the
			queue function. */
			if( xRunIndicator == bktRUN_INDICATOR )
   8442e:	4b16      	ldr	r3, [pc, #88]	; (84488 <vPrimaryBlockTimeTestTask+0x320>)
   84430:	681b      	ldr	r3, [r3, #0]
   84432:	2b55      	cmp	r3, #85	; 0x55
   84434:	d102      	bne.n	8443c <vPrimaryBlockTimeTestTask+0x2d4>
			{
				/* The other task should not have executed outside of the
				queue function. */
				xErrorOccurred = pdTRUE;
   84436:	4b12      	ldr	r3, [pc, #72]	; (84480 <vPrimaryBlockTimeTestTask+0x318>)
   84438:	2201      	movs	r2, #1
   8443a:	601a      	str	r2, [r3, #0]
			}
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
   8443c:	4b13      	ldr	r3, [pc, #76]	; (8448c <vPrimaryBlockTimeTestTask+0x324>)
   8443e:	681b      	ldr	r3, [r3, #0]
   84440:	4618      	mov	r0, r3
   84442:	2101      	movs	r1, #1
   84444:	4b12      	ldr	r3, [pc, #72]	; (84490 <vPrimaryBlockTimeTestTask+0x328>)
   84446:	4798      	blx	r3
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
		xRunIndicator = 0;

		for( xItem = 0; xItem < bktQUEUE_LENGTH; xItem++ )
   84448:	693b      	ldr	r3, [r7, #16]
   8444a:	3301      	adds	r3, #1
   8444c:	613b      	str	r3, [r7, #16]
   8444e:	693b      	ldr	r3, [r7, #16]
   84450:	2b04      	cmp	r3, #4
   84452:	ddbf      	ble.n	843d4 <vPrimaryBlockTimeTestTask+0x26c>
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
   84454:	e002      	b.n	8445c <vPrimaryBlockTimeTestTask+0x2f4>
		{
			vTaskDelay( bktSHORT_WAIT );
   84456:	2014      	movs	r0, #20
   84458:	4b0e      	ldr	r3, [pc, #56]	; (84494 <vPrimaryBlockTimeTestTask+0x32c>)
   8445a:	4798      	blx	r3
			vTaskPrioritySet( xSecondary, bktSECONDARY_PRIORITY );
		}

		/* Let the other task timeout.  When it unblockes it will check that it
		unblocked at the correct time, then suspend itself. */
		while( xRunIndicator != bktRUN_INDICATOR )
   8445c:	4b0a      	ldr	r3, [pc, #40]	; (84488 <vPrimaryBlockTimeTestTask+0x320>)
   8445e:	681b      	ldr	r3, [r3, #0]
   84460:	2b55      	cmp	r3, #85	; 0x55
   84462:	d1f8      	bne.n	84456 <vPrimaryBlockTimeTestTask+0x2ee>
		{
			vTaskDelay( bktSHORT_WAIT );
		}
		vTaskDelay( bktSHORT_WAIT );
   84464:	2014      	movs	r0, #20
   84466:	4b0b      	ldr	r3, [pc, #44]	; (84494 <vPrimaryBlockTimeTestTask+0x32c>)
   84468:	4798      	blx	r3

		xPrimaryCycles++;
   8446a:	4b0b      	ldr	r3, [pc, #44]	; (84498 <vPrimaryBlockTimeTestTask+0x330>)
   8446c:	681b      	ldr	r3, [r3, #0]
   8446e:	1c5a      	adds	r2, r3, #1
   84470:	4b09      	ldr	r3, [pc, #36]	; (84498 <vPrimaryBlockTimeTestTask+0x330>)
   84472:	601a      	str	r2, [r3, #0]
	}
   84474:	e67c      	b.n	84170 <vPrimaryBlockTimeTestTask+0x8>
   84476:	bf00      	nop
   84478:	2007a638 	.word	0x2007a638
   8447c:	00081b69 	.word	0x00081b69
   84480:	2007a648 	.word	0x2007a648
   84484:	00081e29 	.word	0x00081e29
   84488:	2007a64c 	.word	0x2007a64c
   8448c:	2007a63c 	.word	0x2007a63c
   84490:	00082731 	.word	0x00082731
   84494:	00082659 	.word	0x00082659
   84498:	2007a640 	.word	0x2007a640

0008449c <vSecondaryBlockTimeTestTask>:
}
/*-----------------------------------------------------------*/

static void vSecondaryBlockTimeTestTask( void *pvParameters )
{
   8449c:	b590      	push	{r4, r7, lr}
   8449e:	b087      	sub	sp, #28
   844a0:	af00      	add	r7, sp, #0
   844a2:	6078      	str	r0, [r7, #4]
	{
		/*********************************************************************
        Test 1 and 2

		This task does does not participate in these tests. */
		vTaskSuspend( NULL );
   844a4:	2000      	movs	r0, #0
   844a6:	4b31      	ldr	r3, [pc, #196]	; (8456c <vSecondaryBlockTimeTestTask+0xd0>)
   844a8:	4798      	blx	r3
        Test 3

		The first thing we do is attempt to read from the queue.  It should be
		full so we block.  Note the time before we block so we can check the
		wake time is as per that expected. */
		xTimeWhenBlocking = xTaskGetTickCount();
   844aa:	4b31      	ldr	r3, [pc, #196]	; (84570 <vSecondaryBlockTimeTestTask+0xd4>)
   844ac:	4798      	blx	r3
   844ae:	6178      	str	r0, [r7, #20]

		/* We should unblock after bktTIME_TO_BLOCK having not sent
		anything to the queue. */
		xData = 0;
   844b0:	2300      	movs	r3, #0
   844b2:	60fb      	str	r3, [r7, #12]
		xRunIndicator = bktRUN_INDICATOR;
   844b4:	4b2f      	ldr	r3, [pc, #188]	; (84574 <vSecondaryBlockTimeTestTask+0xd8>)
   844b6:	2255      	movs	r2, #85	; 0x55
   844b8:	601a      	str	r2, [r3, #0]
		if( xQueueSend( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_FULL )
   844ba:	4b2f      	ldr	r3, [pc, #188]	; (84578 <vSecondaryBlockTimeTestTask+0xdc>)
   844bc:	681a      	ldr	r2, [r3, #0]
   844be:	f107 030c 	add.w	r3, r7, #12
   844c2:	4610      	mov	r0, r2
   844c4:	4619      	mov	r1, r3
   844c6:	22af      	movs	r2, #175	; 0xaf
   844c8:	2300      	movs	r3, #0
   844ca:	4c2c      	ldr	r4, [pc, #176]	; (8457c <vSecondaryBlockTimeTestTask+0xe0>)
   844cc:	47a0      	blx	r4
   844ce:	4603      	mov	r3, r0
   844d0:	2b00      	cmp	r3, #0
   844d2:	d002      	beq.n	844da <vSecondaryBlockTimeTestTask+0x3e>
		{
			xErrorOccurred = pdTRUE;
   844d4:	4b2a      	ldr	r3, [pc, #168]	; (84580 <vSecondaryBlockTimeTestTask+0xe4>)
   844d6:	2201      	movs	r2, #1
   844d8:	601a      	str	r2, [r3, #0]
		}

		/* How long were we inside the send function? */
		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
   844da:	4b25      	ldr	r3, [pc, #148]	; (84570 <vSecondaryBlockTimeTestTask+0xd4>)
   844dc:	4798      	blx	r3
   844de:	4602      	mov	r2, r0
   844e0:	697b      	ldr	r3, [r7, #20]
   844e2:	1ad3      	subs	r3, r2, r3
   844e4:	613b      	str	r3, [r7, #16]

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
   844e6:	693b      	ldr	r3, [r7, #16]
   844e8:	2bae      	cmp	r3, #174	; 0xae
   844ea:	d802      	bhi.n	844f2 <vSecondaryBlockTimeTestTask+0x56>
		{
			xErrorOccurred = pdTRUE;
   844ec:	4b24      	ldr	r3, [pc, #144]	; (84580 <vSecondaryBlockTimeTestTask+0xe4>)
   844ee:	2201      	movs	r2, #1
   844f0:	601a      	str	r2, [r3, #0]
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as
		soon as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
   844f2:	693b      	ldr	r3, [r7, #16]
   844f4:	2bbe      	cmp	r3, #190	; 0xbe
   844f6:	d902      	bls.n	844fe <vSecondaryBlockTimeTestTask+0x62>
		{
			xErrorOccurred = pdTRUE;
   844f8:	4b21      	ldr	r3, [pc, #132]	; (84580 <vSecondaryBlockTimeTestTask+0xe4>)
   844fa:	2201      	movs	r2, #1
   844fc:	601a      	str	r2, [r3, #0]
		}

		/* Suspend ready for test 3. */
		xRunIndicator = bktRUN_INDICATOR;
   844fe:	4b1d      	ldr	r3, [pc, #116]	; (84574 <vSecondaryBlockTimeTestTask+0xd8>)
   84500:	2255      	movs	r2, #85	; 0x55
   84502:	601a      	str	r2, [r3, #0]
		vTaskSuspend( NULL );
   84504:	2000      	movs	r0, #0
   84506:	4b19      	ldr	r3, [pc, #100]	; (8456c <vSecondaryBlockTimeTestTask+0xd0>)
   84508:	4798      	blx	r3

		/*********************************************************************
        Test 4

		As per test three, but with the send and receive reversed. */
		xTimeWhenBlocking = xTaskGetTickCount();
   8450a:	4b19      	ldr	r3, [pc, #100]	; (84570 <vSecondaryBlockTimeTestTask+0xd4>)
   8450c:	4798      	blx	r3
   8450e:	6178      	str	r0, [r7, #20]

		/* We should unblock after bktTIME_TO_BLOCK having not received
		anything on the queue. */
		xRunIndicator = bktRUN_INDICATOR;
   84510:	4b18      	ldr	r3, [pc, #96]	; (84574 <vSecondaryBlockTimeTestTask+0xd8>)
   84512:	2255      	movs	r2, #85	; 0x55
   84514:	601a      	str	r2, [r3, #0]
		if( xQueueReceive( xTestQueue, &xData, bktTIME_TO_BLOCK ) != errQUEUE_EMPTY )
   84516:	4b18      	ldr	r3, [pc, #96]	; (84578 <vSecondaryBlockTimeTestTask+0xdc>)
   84518:	681a      	ldr	r2, [r3, #0]
   8451a:	f107 030c 	add.w	r3, r7, #12
   8451e:	4610      	mov	r0, r2
   84520:	4619      	mov	r1, r3
   84522:	22af      	movs	r2, #175	; 0xaf
   84524:	2300      	movs	r3, #0
   84526:	4c17      	ldr	r4, [pc, #92]	; (84584 <vSecondaryBlockTimeTestTask+0xe8>)
   84528:	47a0      	blx	r4
   8452a:	4603      	mov	r3, r0
   8452c:	2b00      	cmp	r3, #0
   8452e:	d002      	beq.n	84536 <vSecondaryBlockTimeTestTask+0x9a>
		{
			xErrorOccurred = pdTRUE;
   84530:	4b13      	ldr	r3, [pc, #76]	; (84580 <vSecondaryBlockTimeTestTask+0xe4>)
   84532:	2201      	movs	r2, #1
   84534:	601a      	str	r2, [r3, #0]
		}

		xBlockedTime = xTaskGetTickCount() - xTimeWhenBlocking;
   84536:	4b0e      	ldr	r3, [pc, #56]	; (84570 <vSecondaryBlockTimeTestTask+0xd4>)
   84538:	4798      	blx	r3
   8453a:	4602      	mov	r2, r0
   8453c:	697b      	ldr	r3, [r7, #20]
   8453e:	1ad3      	subs	r3, r2, r3
   84540:	613b      	str	r3, [r7, #16]

		/* We should not have blocked for less time than bktTIME_TO_BLOCK. */
		if( xBlockedTime < bktTIME_TO_BLOCK )
   84542:	693b      	ldr	r3, [r7, #16]
   84544:	2bae      	cmp	r3, #174	; 0xae
   84546:	d802      	bhi.n	8454e <vSecondaryBlockTimeTestTask+0xb2>
		{
			xErrorOccurred = pdTRUE;
   84548:	4b0d      	ldr	r3, [pc, #52]	; (84580 <vSecondaryBlockTimeTestTask+0xe4>)
   8454a:	2201      	movs	r2, #1
   8454c:	601a      	str	r2, [r3, #0]
		}

		/* We should of not blocked for much longer than bktALLOWABLE_MARGIN
		either.  A margin is permitted as we would not necessarily run as soon
		as we unblocked. */
		if( xBlockedTime > ( bktTIME_TO_BLOCK + bktALLOWABLE_MARGIN ) )
   8454e:	693b      	ldr	r3, [r7, #16]
   84550:	2bbe      	cmp	r3, #190	; 0xbe
   84552:	d902      	bls.n	8455a <vSecondaryBlockTimeTestTask+0xbe>
		{
			xErrorOccurred = pdTRUE;
   84554:	4b0a      	ldr	r3, [pc, #40]	; (84580 <vSecondaryBlockTimeTestTask+0xe4>)
   84556:	2201      	movs	r2, #1
   84558:	601a      	str	r2, [r3, #0]
		}

		xRunIndicator = bktRUN_INDICATOR;
   8455a:	4b06      	ldr	r3, [pc, #24]	; (84574 <vSecondaryBlockTimeTestTask+0xd8>)
   8455c:	2255      	movs	r2, #85	; 0x55
   8455e:	601a      	str	r2, [r3, #0]

		xSecondaryCycles++;
   84560:	4b09      	ldr	r3, [pc, #36]	; (84588 <vSecondaryBlockTimeTestTask+0xec>)
   84562:	681b      	ldr	r3, [r3, #0]
   84564:	1c5a      	adds	r2, r3, #1
   84566:	4b08      	ldr	r3, [pc, #32]	; (84588 <vSecondaryBlockTimeTestTask+0xec>)
   84568:	601a      	str	r2, [r3, #0]
	}
   8456a:	e79b      	b.n	844a4 <vSecondaryBlockTimeTestTask+0x8>
   8456c:	00082885 	.word	0x00082885
   84570:	00082c71 	.word	0x00082c71
   84574:	2007a64c 	.word	0x2007a64c
   84578:	2007a638 	.word	0x2007a638
   8457c:	00081b69 	.word	0x00081b69
   84580:	2007a648 	.word	0x2007a648
   84584:	00081e29 	.word	0x00081e29
   84588:	2007a644 	.word	0x2007a644

0008458c <xAreBlockTimeTestTasksStillRunning>:
}
/*-----------------------------------------------------------*/

BaseType_t xAreBlockTimeTestTasksStillRunning( void )
{
   8458c:	b480      	push	{r7}
   8458e:	b083      	sub	sp, #12
   84590:	af00      	add	r7, sp, #0
static BaseType_t xLastPrimaryCycleCount = 0, xLastSecondaryCycleCount = 0;
BaseType_t xReturn = pdPASS;
   84592:	2301      	movs	r3, #1
   84594:	607b      	str	r3, [r7, #4]

	/* Have both tasks performed at least one cycle since this function was
	last called? */
	if( xPrimaryCycles == xLastPrimaryCycleCount )
   84596:	4b12      	ldr	r3, [pc, #72]	; (845e0 <xAreBlockTimeTestTasksStillRunning+0x54>)
   84598:	681a      	ldr	r2, [r3, #0]
   8459a:	4b12      	ldr	r3, [pc, #72]	; (845e4 <xAreBlockTimeTestTasksStillRunning+0x58>)
   8459c:	681b      	ldr	r3, [r3, #0]
   8459e:	429a      	cmp	r2, r3
   845a0:	d101      	bne.n	845a6 <xAreBlockTimeTestTasksStillRunning+0x1a>
	{
		xReturn = pdFAIL;
   845a2:	2300      	movs	r3, #0
   845a4:	607b      	str	r3, [r7, #4]
	}

	if( xSecondaryCycles == xLastSecondaryCycleCount )
   845a6:	4b10      	ldr	r3, [pc, #64]	; (845e8 <xAreBlockTimeTestTasksStillRunning+0x5c>)
   845a8:	681a      	ldr	r2, [r3, #0]
   845aa:	4b10      	ldr	r3, [pc, #64]	; (845ec <xAreBlockTimeTestTasksStillRunning+0x60>)
   845ac:	681b      	ldr	r3, [r3, #0]
   845ae:	429a      	cmp	r2, r3
   845b0:	d101      	bne.n	845b6 <xAreBlockTimeTestTasksStillRunning+0x2a>
	{
		xReturn = pdFAIL;
   845b2:	2300      	movs	r3, #0
   845b4:	607b      	str	r3, [r7, #4]
	}

	if( xErrorOccurred == pdTRUE )
   845b6:	4b0e      	ldr	r3, [pc, #56]	; (845f0 <xAreBlockTimeTestTasksStillRunning+0x64>)
   845b8:	681b      	ldr	r3, [r3, #0]
   845ba:	2b01      	cmp	r3, #1
   845bc:	d101      	bne.n	845c2 <xAreBlockTimeTestTasksStillRunning+0x36>
	{
		xReturn = pdFAIL;
   845be:	2300      	movs	r3, #0
   845c0:	607b      	str	r3, [r7, #4]
	}

	xLastSecondaryCycleCount = xSecondaryCycles;
   845c2:	4b09      	ldr	r3, [pc, #36]	; (845e8 <xAreBlockTimeTestTasksStillRunning+0x5c>)
   845c4:	681a      	ldr	r2, [r3, #0]
   845c6:	4b09      	ldr	r3, [pc, #36]	; (845ec <xAreBlockTimeTestTasksStillRunning+0x60>)
   845c8:	601a      	str	r2, [r3, #0]
	xLastPrimaryCycleCount = xPrimaryCycles;
   845ca:	4b05      	ldr	r3, [pc, #20]	; (845e0 <xAreBlockTimeTestTasksStillRunning+0x54>)
   845cc:	681a      	ldr	r2, [r3, #0]
   845ce:	4b05      	ldr	r3, [pc, #20]	; (845e4 <xAreBlockTimeTestTasksStillRunning+0x58>)
   845d0:	601a      	str	r2, [r3, #0]

	return xReturn;
   845d2:	687b      	ldr	r3, [r7, #4]
}
   845d4:	4618      	mov	r0, r3
   845d6:	370c      	adds	r7, #12
   845d8:	46bd      	mov	sp, r7
   845da:	f85d 7b04 	ldr.w	r7, [sp], #4
   845de:	4770      	bx	lr
   845e0:	2007a640 	.word	0x2007a640
   845e4:	2007a650 	.word	0x2007a650
   845e8:	2007a644 	.word	0x2007a644
   845ec:	2007a654 	.word	0x2007a654
   845f0:	2007a648 	.word	0x2007a648

000845f4 <xAreComTestTasksStillRunning>:
	}
} /*lint !e715 !e818 pvParameters is required for a task function even if it is not referenced. */
/*-----------------------------------------------------------*/

portBASE_TYPE xAreComTestTasksStillRunning( void )
{
   845f4:	b480      	push	{r7}
   845f6:	b083      	sub	sp, #12
   845f8:	af00      	add	r7, sp, #0
portBASE_TYPE xReturn;

	/* If the count of successful reception loops has not changed than at
	some time an error occurred (i.e. a character was received out of sequence)
	and we will return false. */
	if( uxRxLoops == comINITIAL_RX_COUNT_VALUE )
   845fa:	4b09      	ldr	r3, [pc, #36]	; (84620 <xAreComTestTasksStillRunning+0x2c>)
   845fc:	681b      	ldr	r3, [r3, #0]
   845fe:	2b00      	cmp	r3, #0
   84600:	d102      	bne.n	84608 <xAreComTestTasksStillRunning+0x14>
	{
		xReturn = pdFALSE;
   84602:	2300      	movs	r3, #0
   84604:	607b      	str	r3, [r7, #4]
   84606:	e001      	b.n	8460c <xAreComTestTasksStillRunning+0x18>
	}
	else
	{
		xReturn = pdTRUE;
   84608:	2301      	movs	r3, #1
   8460a:	607b      	str	r3, [r7, #4]
	}

	/* Reset the count of successful Rx loops.  When this function is called
	again we expect this to have been incremented. */
	uxRxLoops = comINITIAL_RX_COUNT_VALUE;
   8460c:	4b04      	ldr	r3, [pc, #16]	; (84620 <xAreComTestTasksStillRunning+0x2c>)
   8460e:	2200      	movs	r2, #0
   84610:	601a      	str	r2, [r3, #0]

	return xReturn;
   84612:	687b      	ldr	r3, [r7, #4]
}
   84614:	4618      	mov	r0, r3
   84616:	370c      	adds	r7, #12
   84618:	46bd      	mov	sp, r7
   8461a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8461e:	4770      	bx	lr
   84620:	2007a658 	.word	0x2007a658

00084624 <vStartCountingSemaphoreTasks>:
static volatile xCountSemStruct xParameters[ countNUM_TEST_TASKS ];

/*-----------------------------------------------------------*/

void vStartCountingSemaphoreTasks( void )
{
   84624:	b590      	push	{r4, r7, lr}
   84626:	b085      	sub	sp, #20
   84628:	af04      	add	r7, sp, #16
	/* Create the semaphores that we are going to use for the test/demo.  The
	first should be created such that it starts at its maximum count value,
	the second should be created such that it starts with a count value of zero. */
	xParameters[ 0 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, countMAX_COUNT_VALUE );
   8462a:	20c8      	movs	r0, #200	; 0xc8
   8462c:	21c8      	movs	r1, #200	; 0xc8
   8462e:	4b1f      	ldr	r3, [pc, #124]	; (846ac <vStartCountingSemaphoreTasks+0x88>)
   84630:	4798      	blx	r3
   84632:	4602      	mov	r2, r0
   84634:	4b1e      	ldr	r3, [pc, #120]	; (846b0 <vStartCountingSemaphoreTasks+0x8c>)
   84636:	601a      	str	r2, [r3, #0]
	xParameters[ 0 ].uxExpectedStartCount = countSTART_AT_MAX_COUNT;
   84638:	4b1d      	ldr	r3, [pc, #116]	; (846b0 <vStartCountingSemaphoreTasks+0x8c>)
   8463a:	22aa      	movs	r2, #170	; 0xaa
   8463c:	605a      	str	r2, [r3, #4]
	xParameters[ 0 ].uxLoopCounter = 0;
   8463e:	4b1c      	ldr	r3, [pc, #112]	; (846b0 <vStartCountingSemaphoreTasks+0x8c>)
   84640:	2200      	movs	r2, #0
   84642:	609a      	str	r2, [r3, #8]

	xParameters[ 1 ].xSemaphore = xSemaphoreCreateCounting( countMAX_COUNT_VALUE, 0 );
   84644:	20c8      	movs	r0, #200	; 0xc8
   84646:	2100      	movs	r1, #0
   84648:	4b18      	ldr	r3, [pc, #96]	; (846ac <vStartCountingSemaphoreTasks+0x88>)
   8464a:	4798      	blx	r3
   8464c:	4602      	mov	r2, r0
   8464e:	4b18      	ldr	r3, [pc, #96]	; (846b0 <vStartCountingSemaphoreTasks+0x8c>)
   84650:	60da      	str	r2, [r3, #12]
	xParameters[ 1 ].uxExpectedStartCount = 0;
   84652:	4b17      	ldr	r3, [pc, #92]	; (846b0 <vStartCountingSemaphoreTasks+0x8c>)
   84654:	2200      	movs	r2, #0
   84656:	611a      	str	r2, [r3, #16]
	xParameters[ 1 ].uxLoopCounter = 0;
   84658:	4b15      	ldr	r3, [pc, #84]	; (846b0 <vStartCountingSemaphoreTasks+0x8c>)
   8465a:	2200      	movs	r2, #0
   8465c:	615a      	str	r2, [r3, #20]
	vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 0 ].xSemaphore, "Counting_Sem_1" );
	vQueueAddToRegistry( ( QueueHandle_t ) xParameters[ 1 ].xSemaphore, "Counting_Sem_2" );


	/* Were the semaphores created? */
	if( ( xParameters[ 0 ].xSemaphore != NULL ) || ( xParameters[ 1 ].xSemaphore != NULL ) )
   8465e:	4b14      	ldr	r3, [pc, #80]	; (846b0 <vStartCountingSemaphoreTasks+0x8c>)
   84660:	681b      	ldr	r3, [r3, #0]
   84662:	2b00      	cmp	r3, #0
   84664:	d103      	bne.n	8466e <vStartCountingSemaphoreTasks+0x4a>
   84666:	4b12      	ldr	r3, [pc, #72]	; (846b0 <vStartCountingSemaphoreTasks+0x8c>)
   84668:	68db      	ldr	r3, [r3, #12]
   8466a:	2b00      	cmp	r3, #0
   8466c:	d01b      	beq.n	846a6 <vStartCountingSemaphoreTasks+0x82>
	{
		/* Create the demo tasks, passing in the semaphore to use as the parameter. */
		xTaskCreate( prvCountingSemaphoreTask, "CNT1", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 0 ] ), tskIDLE_PRIORITY, NULL );
   8466e:	2300      	movs	r3, #0
   84670:	9300      	str	r3, [sp, #0]
   84672:	2300      	movs	r3, #0
   84674:	9301      	str	r3, [sp, #4]
   84676:	2300      	movs	r3, #0
   84678:	9302      	str	r3, [sp, #8]
   8467a:	2300      	movs	r3, #0
   8467c:	9303      	str	r3, [sp, #12]
   8467e:	480d      	ldr	r0, [pc, #52]	; (846b4 <vStartCountingSemaphoreTasks+0x90>)
   84680:	490d      	ldr	r1, [pc, #52]	; (846b8 <vStartCountingSemaphoreTasks+0x94>)
   84682:	2282      	movs	r2, #130	; 0x82
   84684:	4b0a      	ldr	r3, [pc, #40]	; (846b0 <vStartCountingSemaphoreTasks+0x8c>)
   84686:	4c0d      	ldr	r4, [pc, #52]	; (846bc <vStartCountingSemaphoreTasks+0x98>)
   84688:	47a0      	blx	r4
		xTaskCreate( prvCountingSemaphoreTask, "CNT2", configMINIMAL_STACK_SIZE, ( void * ) &( xParameters[ 1 ] ), tskIDLE_PRIORITY, NULL );		
   8468a:	2300      	movs	r3, #0
   8468c:	9300      	str	r3, [sp, #0]
   8468e:	2300      	movs	r3, #0
   84690:	9301      	str	r3, [sp, #4]
   84692:	2300      	movs	r3, #0
   84694:	9302      	str	r3, [sp, #8]
   84696:	2300      	movs	r3, #0
   84698:	9303      	str	r3, [sp, #12]
   8469a:	4806      	ldr	r0, [pc, #24]	; (846b4 <vStartCountingSemaphoreTasks+0x90>)
   8469c:	4908      	ldr	r1, [pc, #32]	; (846c0 <vStartCountingSemaphoreTasks+0x9c>)
   8469e:	2282      	movs	r2, #130	; 0x82
   846a0:	4b08      	ldr	r3, [pc, #32]	; (846c4 <vStartCountingSemaphoreTasks+0xa0>)
   846a2:	4c06      	ldr	r4, [pc, #24]	; (846bc <vStartCountingSemaphoreTasks+0x98>)
   846a4:	47a0      	blx	r4
	}
}
   846a6:	3704      	adds	r7, #4
   846a8:	46bd      	mov	sp, r7
   846aa:	bd90      	pop	{r4, r7, pc}
   846ac:	00081b0d 	.word	0x00081b0d
   846b0:	2007a660 	.word	0x2007a660
   846b4:	000847c9 	.word	0x000847c9
   846b8:	000866fc 	.word	0x000866fc
   846bc:	000823d5 	.word	0x000823d5
   846c0:	00086704 	.word	0x00086704
   846c4:	2007a66c 	.word	0x2007a66c

000846c8 <prvDecrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvDecrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
   846c8:	b590      	push	{r4, r7, lr}
   846ca:	b085      	sub	sp, #20
   846cc:	af00      	add	r7, sp, #0
   846ce:	6078      	str	r0, [r7, #4]
   846d0:	6039      	str	r1, [r7, #0]
UBaseType_t ux;

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
   846d2:	6878      	ldr	r0, [r7, #4]
   846d4:	2100      	movs	r1, #0
   846d6:	2200      	movs	r2, #0
   846d8:	2300      	movs	r3, #0
   846da:	4c18      	ldr	r4, [pc, #96]	; (8473c <prvDecrementSemaphoreCount+0x74>)
   846dc:	47a0      	blx	r4
   846de:	4603      	mov	r3, r0
   846e0:	2b01      	cmp	r3, #1
   846e2:	d102      	bne.n	846ea <prvDecrementSemaphoreCount+0x22>
	{
		xErrorDetected = pdTRUE;
   846e4:	4b16      	ldr	r3, [pc, #88]	; (84740 <prvDecrementSemaphoreCount+0x78>)
   846e6:	2201      	movs	r2, #1
   846e8:	601a      	str	r2, [r3, #0]
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
   846ea:	2300      	movs	r3, #0
   846ec:	60fb      	str	r3, [r7, #12]
   846ee:	e013      	b.n	84718 <prvDecrementSemaphoreCount+0x50>
	{
		if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) != pdPASS )
   846f0:	6878      	ldr	r0, [r7, #4]
   846f2:	2100      	movs	r1, #0
   846f4:	2200      	movs	r2, #0
   846f6:	2300      	movs	r3, #0
   846f8:	4c12      	ldr	r4, [pc, #72]	; (84744 <prvDecrementSemaphoreCount+0x7c>)
   846fa:	47a0      	blx	r4
   846fc:	4603      	mov	r3, r0
   846fe:	2b01      	cmp	r3, #1
   84700:	d002      	beq.n	84708 <prvDecrementSemaphoreCount+0x40>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
   84702:	4b0f      	ldr	r3, [pc, #60]	; (84740 <prvDecrementSemaphoreCount+0x78>)
   84704:	2201      	movs	r2, #1
   84706:	601a      	str	r2, [r3, #0]
		}

		( *puxLoopCounter )++;
   84708:	683b      	ldr	r3, [r7, #0]
   8470a:	681b      	ldr	r3, [r3, #0]
   8470c:	1c5a      	adds	r2, r3, #1
   8470e:	683b      	ldr	r3, [r7, #0]
   84710:	601a      	str	r2, [r3, #0]
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'take' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
   84712:	68fb      	ldr	r3, [r7, #12]
   84714:	3301      	adds	r3, #1
   84716:	60fb      	str	r3, [r7, #12]
   84718:	68fb      	ldr	r3, [r7, #12]
   8471a:	2bc7      	cmp	r3, #199	; 0xc7
   8471c:	d9e8      	bls.n	846f0 <prvDecrementSemaphoreCount+0x28>
		taskYIELD();
	#endif

	/* If the semaphore count is zero then we should not be able to	'take' 
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
   8471e:	6878      	ldr	r0, [r7, #4]
   84720:	2100      	movs	r1, #0
   84722:	2200      	movs	r2, #0
   84724:	2300      	movs	r3, #0
   84726:	4c07      	ldr	r4, [pc, #28]	; (84744 <prvDecrementSemaphoreCount+0x7c>)
   84728:	47a0      	blx	r4
   8472a:	4603      	mov	r3, r0
   8472c:	2b01      	cmp	r3, #1
   8472e:	d102      	bne.n	84736 <prvDecrementSemaphoreCount+0x6e>
	{
		xErrorDetected = pdTRUE;
   84730:	4b03      	ldr	r3, [pc, #12]	; (84740 <prvDecrementSemaphoreCount+0x78>)
   84732:	2201      	movs	r2, #1
   84734:	601a      	str	r2, [r3, #0]
	}
}
   84736:	3714      	adds	r7, #20
   84738:	46bd      	mov	sp, r7
   8473a:	bd90      	pop	{r4, r7, pc}
   8473c:	00081b69 	.word	0x00081b69
   84740:	2007a65c 	.word	0x2007a65c
   84744:	00081e29 	.word	0x00081e29

00084748 <prvIncrementSemaphoreCount>:
/*-----------------------------------------------------------*/

static void prvIncrementSemaphoreCount( SemaphoreHandle_t xSemaphore, UBaseType_t *puxLoopCounter )
{
   84748:	b590      	push	{r4, r7, lr}
   8474a:	b085      	sub	sp, #20
   8474c:	af00      	add	r7, sp, #0
   8474e:	6078      	str	r0, [r7, #4]
   84750:	6039      	str	r1, [r7, #0]
UBaseType_t ux;

	/* If the semaphore count is zero then we should not be able to	'take' 
	the semaphore. */
	if( xSemaphoreTake( xSemaphore, countDONT_BLOCK ) == pdPASS )
   84752:	6878      	ldr	r0, [r7, #4]
   84754:	2100      	movs	r1, #0
   84756:	2200      	movs	r2, #0
   84758:	2300      	movs	r3, #0
   8475a:	4c18      	ldr	r4, [pc, #96]	; (847bc <prvIncrementSemaphoreCount+0x74>)
   8475c:	47a0      	blx	r4
   8475e:	4603      	mov	r3, r0
   84760:	2b01      	cmp	r3, #1
   84762:	d102      	bne.n	8476a <prvIncrementSemaphoreCount+0x22>
	{
		xErrorDetected = pdTRUE;
   84764:	4b16      	ldr	r3, [pc, #88]	; (847c0 <prvIncrementSemaphoreCount+0x78>)
   84766:	2201      	movs	r2, #1
   84768:	601a      	str	r2, [r3, #0]
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
   8476a:	2300      	movs	r3, #0
   8476c:	60fb      	str	r3, [r7, #12]
   8476e:	e013      	b.n	84798 <prvIncrementSemaphoreCount+0x50>
	{
		if( xSemaphoreGive( xSemaphore ) != pdPASS )
   84770:	6878      	ldr	r0, [r7, #4]
   84772:	2100      	movs	r1, #0
   84774:	2200      	movs	r2, #0
   84776:	2300      	movs	r3, #0
   84778:	4c12      	ldr	r4, [pc, #72]	; (847c4 <prvIncrementSemaphoreCount+0x7c>)
   8477a:	47a0      	blx	r4
   8477c:	4603      	mov	r3, r0
   8477e:	2b01      	cmp	r3, #1
   84780:	d002      	beq.n	84788 <prvIncrementSemaphoreCount+0x40>
		{
			/* We expected to be able to take the semaphore. */
			xErrorDetected = pdTRUE;
   84782:	4b0f      	ldr	r3, [pc, #60]	; (847c0 <prvIncrementSemaphoreCount+0x78>)
   84784:	2201      	movs	r2, #1
   84786:	601a      	str	r2, [r3, #0]
		}

		( *puxLoopCounter )++;
   84788:	683b      	ldr	r3, [r7, #0]
   8478a:	681b      	ldr	r3, [r3, #0]
   8478c:	1c5a      	adds	r2, r3, #1
   8478e:	683b      	ldr	r3, [r7, #0]
   84790:	601a      	str	r2, [r3, #0]
	{
		xErrorDetected = pdTRUE;
	}

	/* We should be able to 'give' the semaphore countMAX_COUNT_VALUE times. */
	for( ux = 0; ux < countMAX_COUNT_VALUE; ux++ )
   84792:	68fb      	ldr	r3, [r7, #12]
   84794:	3301      	adds	r3, #1
   84796:	60fb      	str	r3, [r7, #12]
   84798:	68fb      	ldr	r3, [r7, #12]
   8479a:	2bc7      	cmp	r3, #199	; 0xc7
   8479c:	d9e8      	bls.n	84770 <prvIncrementSemaphoreCount+0x28>
		taskYIELD();
	#endif

	/* If the semaphore count is at its maximum then we should not be able to
	'give' the semaphore. */
	if( xSemaphoreGive( xSemaphore ) == pdPASS )
   8479e:	6878      	ldr	r0, [r7, #4]
   847a0:	2100      	movs	r1, #0
   847a2:	2200      	movs	r2, #0
   847a4:	2300      	movs	r3, #0
   847a6:	4c07      	ldr	r4, [pc, #28]	; (847c4 <prvIncrementSemaphoreCount+0x7c>)
   847a8:	47a0      	blx	r4
   847aa:	4603      	mov	r3, r0
   847ac:	2b01      	cmp	r3, #1
   847ae:	d102      	bne.n	847b6 <prvIncrementSemaphoreCount+0x6e>
	{
		xErrorDetected = pdTRUE;
   847b0:	4b03      	ldr	r3, [pc, #12]	; (847c0 <prvIncrementSemaphoreCount+0x78>)
   847b2:	2201      	movs	r2, #1
   847b4:	601a      	str	r2, [r3, #0]
	}
}
   847b6:	3714      	adds	r7, #20
   847b8:	46bd      	mov	sp, r7
   847ba:	bd90      	pop	{r4, r7, pc}
   847bc:	00081e29 	.word	0x00081e29
   847c0:	2007a65c 	.word	0x2007a65c
   847c4:	00081b69 	.word	0x00081b69

000847c8 <prvCountingSemaphoreTask>:
/*-----------------------------------------------------------*/

static void prvCountingSemaphoreTask( void *pvParameters )
{
   847c8:	b590      	push	{r4, r7, lr}
   847ca:	b085      	sub	sp, #20
   847cc:	af00      	add	r7, sp, #0
   847ce:	6078      	str	r0, [r7, #4]
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The semaphore to be used was passed as the parameter. */
	pxParameter = ( xCountSemStruct * ) pvParameters;
   847d0:	687b      	ldr	r3, [r7, #4]
   847d2:	60fb      	str	r3, [r7, #12]

	/* Did we expect to find the semaphore already at its max count value, or
	at zero? */
	if( pxParameter->uxExpectedStartCount == countSTART_AT_MAX_COUNT )
   847d4:	68fb      	ldr	r3, [r7, #12]
   847d6:	685b      	ldr	r3, [r3, #4]
   847d8:	2baa      	cmp	r3, #170	; 0xaa
   847da:	d107      	bne.n	847ec <prvCountingSemaphoreTask+0x24>
	{
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
   847dc:	68fb      	ldr	r3, [r7, #12]
   847de:	681a      	ldr	r2, [r3, #0]
   847e0:	68fb      	ldr	r3, [r7, #12]
   847e2:	3308      	adds	r3, #8
   847e4:	4610      	mov	r0, r2
   847e6:	4619      	mov	r1, r3
   847e8:	4b10      	ldr	r3, [pc, #64]	; (8482c <prvCountingSemaphoreTask+0x64>)
   847ea:	4798      	blx	r3
	}

	/* Now we expect the semaphore count to be 0, so this time there is an
	error if we can take the semaphore. */
	if( xSemaphoreTake( pxParameter->xSemaphore, 0 ) == pdPASS )
   847ec:	68fb      	ldr	r3, [r7, #12]
   847ee:	681b      	ldr	r3, [r3, #0]
   847f0:	4618      	mov	r0, r3
   847f2:	2100      	movs	r1, #0
   847f4:	2200      	movs	r2, #0
   847f6:	2300      	movs	r3, #0
   847f8:	4c0d      	ldr	r4, [pc, #52]	; (84830 <prvCountingSemaphoreTask+0x68>)
   847fa:	47a0      	blx	r4
   847fc:	4603      	mov	r3, r0
   847fe:	2b01      	cmp	r3, #1
   84800:	d102      	bne.n	84808 <prvCountingSemaphoreTask+0x40>
	{
		xErrorDetected = pdTRUE;
   84802:	4b0c      	ldr	r3, [pc, #48]	; (84834 <prvCountingSemaphoreTask+0x6c>)
   84804:	2201      	movs	r2, #1
   84806:	601a      	str	r2, [r3, #0]
	}

	for( ;; )
	{
		prvIncrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
   84808:	68fb      	ldr	r3, [r7, #12]
   8480a:	681a      	ldr	r2, [r3, #0]
   8480c:	68fb      	ldr	r3, [r7, #12]
   8480e:	3308      	adds	r3, #8
   84810:	4610      	mov	r0, r2
   84812:	4619      	mov	r1, r3
   84814:	4b08      	ldr	r3, [pc, #32]	; (84838 <prvCountingSemaphoreTask+0x70>)
   84816:	4798      	blx	r3
		prvDecrementSemaphoreCount( pxParameter->xSemaphore, &( pxParameter->uxLoopCounter ) );
   84818:	68fb      	ldr	r3, [r7, #12]
   8481a:	681a      	ldr	r2, [r3, #0]
   8481c:	68fb      	ldr	r3, [r7, #12]
   8481e:	3308      	adds	r3, #8
   84820:	4610      	mov	r0, r2
   84822:	4619      	mov	r1, r3
   84824:	4b01      	ldr	r3, [pc, #4]	; (8482c <prvCountingSemaphoreTask+0x64>)
   84826:	4798      	blx	r3
	}
   84828:	e7ee      	b.n	84808 <prvCountingSemaphoreTask+0x40>
   8482a:	bf00      	nop
   8482c:	000846c9 	.word	0x000846c9
   84830:	00081e29 	.word	0x00081e29
   84834:	2007a65c 	.word	0x2007a65c
   84838:	00084749 	.word	0x00084749

0008483c <vCreateSuicidalTasks>:
TaskHandle_t xCreatedTask;

/*-----------------------------------------------------------*/

void vCreateSuicidalTasks( UBaseType_t uxPriority )
{
   8483c:	b590      	push	{r4, r7, lr}
   8483e:	b089      	sub	sp, #36	; 0x24
   84840:	af04      	add	r7, sp, #16
   84842:	6078      	str	r0, [r7, #4]
UBaseType_t *puxPriority;

	/* Create the Creator tasks - passing in as a parameter the priority at which
	the suicidal tasks should be created. */
	puxPriority = ( UBaseType_t * ) pvPortMalloc( sizeof( UBaseType_t ) );
   84844:	2004      	movs	r0, #4
   84846:	4b13      	ldr	r3, [pc, #76]	; (84894 <vCreateSuicidalTasks+0x58>)
   84848:	4798      	blx	r3
   8484a:	60f8      	str	r0, [r7, #12]
	*puxPriority = uxPriority;
   8484c:	68fb      	ldr	r3, [r7, #12]
   8484e:	687a      	ldr	r2, [r7, #4]
   84850:	601a      	str	r2, [r3, #0]

	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) puxPriority, uxPriority, NULL );
   84852:	687b      	ldr	r3, [r7, #4]
   84854:	9300      	str	r3, [sp, #0]
   84856:	2300      	movs	r3, #0
   84858:	9301      	str	r3, [sp, #4]
   8485a:	2300      	movs	r3, #0
   8485c:	9302      	str	r3, [sp, #8]
   8485e:	2300      	movs	r3, #0
   84860:	9303      	str	r3, [sp, #12]
   84862:	480d      	ldr	r0, [pc, #52]	; (84898 <vCreateSuicidalTasks+0x5c>)
   84864:	490d      	ldr	r1, [pc, #52]	; (8489c <vCreateSuicidalTasks+0x60>)
   84866:	22be      	movs	r2, #190	; 0xbe
   84868:	68fb      	ldr	r3, [r7, #12]
   8486a:	4c0d      	ldr	r4, [pc, #52]	; (848a0 <vCreateSuicidalTasks+0x64>)
   8486c:	47a0      	blx	r4

	/* Record the number of tasks that are running now so we know if any of the
	suicidal tasks have failed to be killed. */
	uxTasksRunningAtStart = ( UBaseType_t ) uxTaskGetNumberOfTasks();
   8486e:	4b0d      	ldr	r3, [pc, #52]	; (848a4 <vCreateSuicidalTasks+0x68>)
   84870:	4798      	blx	r3
   84872:	4602      	mov	r2, r0
   84874:	4b0c      	ldr	r3, [pc, #48]	; (848a8 <vCreateSuicidalTasks+0x6c>)
   84876:	601a      	str	r2, [r3, #0]
	/* FreeRTOS.org versions before V3.0 started the idle-task as the very
	first task. The idle task was then already included in uxTasksRunningAtStart.
	From FreeRTOS V3.0 on, the idle task is started when the scheduler is
	started. Therefore the idle task is not yet accounted for. We correct
	this by increasing uxTasksRunningAtStart by 1. */
	uxTasksRunningAtStart++;
   84878:	4b0b      	ldr	r3, [pc, #44]	; (848a8 <vCreateSuicidalTasks+0x6c>)
   8487a:	681b      	ldr	r3, [r3, #0]
   8487c:	1c5a      	adds	r2, r3, #1
   8487e:	4b0a      	ldr	r3, [pc, #40]	; (848a8 <vCreateSuicidalTasks+0x6c>)
   84880:	601a      	str	r2, [r3, #0]
	
	/* From FreeRTOS version 7.0.0 can optionally create a timer service task.  
	If this is done, then uxTasksRunningAtStart needs incrementing again as that
	too is created when the scheduler is started. */
	#if configUSE_TIMERS == 1
		uxTasksRunningAtStart++;
   84882:	4b09      	ldr	r3, [pc, #36]	; (848a8 <vCreateSuicidalTasks+0x6c>)
   84884:	681b      	ldr	r3, [r3, #0]
   84886:	1c5a      	adds	r2, r3, #1
   84888:	4b07      	ldr	r3, [pc, #28]	; (848a8 <vCreateSuicidalTasks+0x6c>)
   8488a:	601a      	str	r2, [r3, #0]
	#endif
}
   8488c:	3714      	adds	r7, #20
   8488e:	46bd      	mov	sp, r7
   84890:	bd90      	pop	{r4, r7, pc}
   84892:	bf00      	nop
   84894:	000814c1 	.word	0x000814c1
   84898:	00084909 	.word	0x00084909
   8489c:	0008670c 	.word	0x0008670c
   848a0:	000823d5 	.word	0x000823d5
   848a4:	00082c9d 	.word	0x00082c9d
   848a8:	2007a67c 	.word	0x2007a67c

000848ac <vSuicidalTask>:
/*-----------------------------------------------------------*/
					
static portTASK_FUNCTION( vSuicidalTask, pvParameters )
{
   848ac:	b580      	push	{r7, lr}
   848ae:	b086      	sub	sp, #24
   848b0:	af00      	add	r7, sp, #0
   848b2:	6078      	str	r0, [r7, #4]
volatile long l1, l2;
TaskHandle_t xTaskToKill;
const TickType_t xDelay = ( TickType_t ) 200 / portTICK_PERIOD_MS;
   848b4:	23c8      	movs	r3, #200	; 0xc8
   848b6:	613b      	str	r3, [r7, #16]

	if( pvParameters != NULL )
   848b8:	687b      	ldr	r3, [r7, #4]
   848ba:	2b00      	cmp	r3, #0
   848bc:	d003      	beq.n	848c6 <vSuicidalTask+0x1a>
	{
		/* This task is periodically created four times.  Two created tasks are
		passed a handle to the other task so it can kill it before killing itself.
		The other task is passed in null. */
		xTaskToKill = *( TaskHandle_t* )pvParameters;
   848be:	687b      	ldr	r3, [r7, #4]
   848c0:	681b      	ldr	r3, [r3, #0]
   848c2:	617b      	str	r3, [r7, #20]
   848c4:	e001      	b.n	848ca <vSuicidalTask+0x1e>
	}
	else
	{
		xTaskToKill = NULL;
   848c6:	2300      	movs	r3, #0
   848c8:	617b      	str	r3, [r7, #20]
	}

	for( ;; )
	{
		/* Do something random just to use some stack and registers. */
		l1 = 2;
   848ca:	2302      	movs	r3, #2
   848cc:	60fb      	str	r3, [r7, #12]
		l2 = 89;
   848ce:	2359      	movs	r3, #89	; 0x59
   848d0:	60bb      	str	r3, [r7, #8]
		l2 *= l1;
   848d2:	68bb      	ldr	r3, [r7, #8]
   848d4:	68fa      	ldr	r2, [r7, #12]
   848d6:	fb02 f303 	mul.w	r3, r2, r3
   848da:	60bb      	str	r3, [r7, #8]
		vTaskDelay( xDelay );
   848dc:	6938      	ldr	r0, [r7, #16]
   848de:	4b08      	ldr	r3, [pc, #32]	; (84900 <vSuicidalTask+0x54>)
   848e0:	4798      	blx	r3

		if( xTaskToKill != NULL )
   848e2:	697b      	ldr	r3, [r7, #20]
   848e4:	2b00      	cmp	r3, #0
   848e6:	d009      	beq.n	848fc <vSuicidalTask+0x50>
		{
			/* Make sure the other task has a go before we delete it. */
			vTaskDelay( ( TickType_t ) 0 );
   848e8:	2000      	movs	r0, #0
   848ea:	4b05      	ldr	r3, [pc, #20]	; (84900 <vSuicidalTask+0x54>)
   848ec:	4798      	blx	r3

			/* Kill the other task that was created by vCreateTasks(). */
			vTaskDelete( xTaskToKill );
   848ee:	6978      	ldr	r0, [r7, #20]
   848f0:	4b04      	ldr	r3, [pc, #16]	; (84904 <vSuicidalTask+0x58>)
   848f2:	4798      	blx	r3

			/* Kill ourselves. */
			vTaskDelete( NULL );
   848f4:	2000      	movs	r0, #0
   848f6:	4b03      	ldr	r3, [pc, #12]	; (84904 <vSuicidalTask+0x58>)
   848f8:	4798      	blx	r3
		}
	}
   848fa:	e7e6      	b.n	848ca <vSuicidalTask+0x1e>
   848fc:	e7e5      	b.n	848ca <vSuicidalTask+0x1e>
   848fe:	bf00      	nop
   84900:	00082659 	.word	0x00082659
   84904:	00082555 	.word	0x00082555

00084908 <vCreateTasks>:
}/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCreateTasks, pvParameters )
{
   84908:	b590      	push	{r4, r7, lr}
   8490a:	b089      	sub	sp, #36	; 0x24
   8490c:	af04      	add	r7, sp, #16
   8490e:	6078      	str	r0, [r7, #4]
const TickType_t xDelay = ( TickType_t ) 1000 / portTICK_PERIOD_MS;
   84910:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   84914:	60fb      	str	r3, [r7, #12]
UBaseType_t uxPriority;

	uxPriority = *( UBaseType_t * ) pvParameters;
   84916:	687b      	ldr	r3, [r7, #4]
   84918:	681b      	ldr	r3, [r3, #0]
   8491a:	60bb      	str	r3, [r7, #8]
	vPortFree( pvParameters );
   8491c:	6878      	ldr	r0, [r7, #4]
   8491e:	4b16      	ldr	r3, [pc, #88]	; (84978 <vCreateTasks+0x70>)
   84920:	4798      	blx	r3

	for( ;; )
	{
		/* Just loop round, delaying then creating the four suicidal tasks. */
		vTaskDelay( xDelay );
   84922:	68f8      	ldr	r0, [r7, #12]
   84924:	4b15      	ldr	r3, [pc, #84]	; (8497c <vCreateTasks+0x74>)
   84926:	4798      	blx	r3

		xCreatedTask = NULL;
   84928:	4b15      	ldr	r3, [pc, #84]	; (84980 <vCreateTasks+0x78>)
   8492a:	2200      	movs	r2, #0
   8492c:	601a      	str	r2, [r3, #0]

		xTaskCreate( vSuicidalTask, "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask );
   8492e:	68bb      	ldr	r3, [r7, #8]
   84930:	9300      	str	r3, [sp, #0]
   84932:	4b13      	ldr	r3, [pc, #76]	; (84980 <vCreateTasks+0x78>)
   84934:	9301      	str	r3, [sp, #4]
   84936:	2300      	movs	r3, #0
   84938:	9302      	str	r3, [sp, #8]
   8493a:	2300      	movs	r3, #0
   8493c:	9303      	str	r3, [sp, #12]
   8493e:	4811      	ldr	r0, [pc, #68]	; (84984 <vCreateTasks+0x7c>)
   84940:	4911      	ldr	r1, [pc, #68]	; (84988 <vCreateTasks+0x80>)
   84942:	2282      	movs	r2, #130	; 0x82
   84944:	2300      	movs	r3, #0
   84946:	4c11      	ldr	r4, [pc, #68]	; (8498c <vCreateTasks+0x84>)
   84948:	47a0      	blx	r4
		xTaskCreate( vSuicidalTask, "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL );
   8494a:	68bb      	ldr	r3, [r7, #8]
   8494c:	9300      	str	r3, [sp, #0]
   8494e:	2300      	movs	r3, #0
   84950:	9301      	str	r3, [sp, #4]
   84952:	2300      	movs	r3, #0
   84954:	9302      	str	r3, [sp, #8]
   84956:	2300      	movs	r3, #0
   84958:	9303      	str	r3, [sp, #12]
   8495a:	480a      	ldr	r0, [pc, #40]	; (84984 <vCreateTasks+0x7c>)
   8495c:	490c      	ldr	r1, [pc, #48]	; (84990 <vCreateTasks+0x88>)
   8495e:	2282      	movs	r2, #130	; 0x82
   84960:	4b07      	ldr	r3, [pc, #28]	; (84980 <vCreateTasks+0x78>)
   84962:	4c0a      	ldr	r4, [pc, #40]	; (8498c <vCreateTasks+0x84>)
   84964:	47a0      	blx	r4

		++usCreationCount;
   84966:	4b0b      	ldr	r3, [pc, #44]	; (84994 <vCreateTasks+0x8c>)
   84968:	881b      	ldrh	r3, [r3, #0]
   8496a:	b29b      	uxth	r3, r3
   8496c:	3301      	adds	r3, #1
   8496e:	b29a      	uxth	r2, r3
   84970:	4b08      	ldr	r3, [pc, #32]	; (84994 <vCreateTasks+0x8c>)
   84972:	801a      	strh	r2, [r3, #0]
	}
   84974:	e7d5      	b.n	84922 <vCreateTasks+0x1a>
   84976:	bf00      	nop
   84978:	00081639 	.word	0x00081639
   8497c:	00082659 	.word	0x00082659
   84980:	2007a730 	.word	0x2007a730
   84984:	000848ad 	.word	0x000848ad
   84988:	00086714 	.word	0x00086714
   8498c:	000823d5 	.word	0x000823d5
   84990:	0008671c 	.word	0x0008671c
   84994:	2007a678 	.word	0x2007a678

00084998 <xIsCreateTaskStillRunning>:
/*-----------------------------------------------------------*/

/* This is called to check that the creator task is still running and that there
are not any more than four extra tasks. */
BaseType_t xIsCreateTaskStillRunning( void )
{
   84998:	b580      	push	{r7, lr}
   8499a:	b082      	sub	sp, #8
   8499c:	af00      	add	r7, sp, #0
static uint16_t usLastCreationCount = 0xfff;
BaseType_t xReturn = pdTRUE;
   8499e:	2301      	movs	r3, #1
   849a0:	607b      	str	r3, [r7, #4]
static UBaseType_t uxTasksRunningNow;

	if( usLastCreationCount == usCreationCount )
   849a2:	4b16      	ldr	r3, [pc, #88]	; (849fc <xIsCreateTaskStillRunning+0x64>)
   849a4:	881a      	ldrh	r2, [r3, #0]
   849a6:	4b16      	ldr	r3, [pc, #88]	; (84a00 <xIsCreateTaskStillRunning+0x68>)
   849a8:	881b      	ldrh	r3, [r3, #0]
   849aa:	b29b      	uxth	r3, r3
   849ac:	429a      	cmp	r2, r3
   849ae:	d102      	bne.n	849b6 <xIsCreateTaskStillRunning+0x1e>
	{
		xReturn = pdFALSE;
   849b0:	2300      	movs	r3, #0
   849b2:	607b      	str	r3, [r7, #4]
   849b4:	e004      	b.n	849c0 <xIsCreateTaskStillRunning+0x28>
	}
	else
	{
		usLastCreationCount = usCreationCount;
   849b6:	4b12      	ldr	r3, [pc, #72]	; (84a00 <xIsCreateTaskStillRunning+0x68>)
   849b8:	881b      	ldrh	r3, [r3, #0]
   849ba:	b29a      	uxth	r2, r3
   849bc:	4b0f      	ldr	r3, [pc, #60]	; (849fc <xIsCreateTaskStillRunning+0x64>)
   849be:	801a      	strh	r2, [r3, #0]
	}
	
	uxTasksRunningNow = ( UBaseType_t ) uxTaskGetNumberOfTasks();
   849c0:	4b10      	ldr	r3, [pc, #64]	; (84a04 <xIsCreateTaskStillRunning+0x6c>)
   849c2:	4798      	blx	r3
   849c4:	4602      	mov	r2, r0
   849c6:	4b10      	ldr	r3, [pc, #64]	; (84a08 <xIsCreateTaskStillRunning+0x70>)
   849c8:	601a      	str	r2, [r3, #0]

	if( uxTasksRunningNow < uxTasksRunningAtStart )
   849ca:	4b0f      	ldr	r3, [pc, #60]	; (84a08 <xIsCreateTaskStillRunning+0x70>)
   849cc:	681a      	ldr	r2, [r3, #0]
   849ce:	4b0f      	ldr	r3, [pc, #60]	; (84a0c <xIsCreateTaskStillRunning+0x74>)
   849d0:	681b      	ldr	r3, [r3, #0]
   849d2:	429a      	cmp	r2, r3
   849d4:	d202      	bcs.n	849dc <xIsCreateTaskStillRunning+0x44>
	{
		xReturn = pdFALSE;
   849d6:	2300      	movs	r3, #0
   849d8:	607b      	str	r3, [r7, #4]
   849da:	e009      	b.n	849f0 <xIsCreateTaskStillRunning+0x58>
	}
	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
   849dc:	4b0a      	ldr	r3, [pc, #40]	; (84a08 <xIsCreateTaskStillRunning+0x70>)
   849de:	681a      	ldr	r2, [r3, #0]
   849e0:	4b0a      	ldr	r3, [pc, #40]	; (84a0c <xIsCreateTaskStillRunning+0x74>)
   849e2:	681b      	ldr	r3, [r3, #0]
   849e4:	1ad2      	subs	r2, r2, r3
   849e6:	2303      	movs	r3, #3
   849e8:	429a      	cmp	r2, r3
   849ea:	d901      	bls.n	849f0 <xIsCreateTaskStillRunning+0x58>
	{
		xReturn = pdFALSE;
   849ec:	2300      	movs	r3, #0
   849ee:	607b      	str	r3, [r7, #4]
	else
	{
		/* Everything is okay. */
	}

	return xReturn;
   849f0:	687b      	ldr	r3, [r7, #4]
}
   849f2:	4618      	mov	r0, r3
   849f4:	3708      	adds	r7, #8
   849f6:	46bd      	mov	sp, r7
   849f8:	bd80      	pop	{r7, pc}
   849fa:	bf00      	nop
   849fc:	2007000c 	.word	0x2007000c
   84a00:	2007a678 	.word	0x2007a678
   84a04:	00082c9d 	.word	0x00082c9d
   84a08:	2007a680 	.word	0x2007a680
   84a0c:	2007a67c 	.word	0x2007a67c

00084a10 <vStartDynamicPriorityTasks>:
/*
 * Start the three tasks as described at the top of the file.
 * Note that the limited count task is given a higher priority.
 */
void vStartDynamicPriorityTasks( void )
{
   84a10:	b590      	push	{r4, r7, lr}
   84a12:	b085      	sub	sp, #20
   84a14:	af04      	add	r7, sp, #16
	xSuspendedTestQueue = xQueueCreate( priSUSPENDED_QUEUE_LENGTH, sizeof( uint32_t ) );
   84a16:	2001      	movs	r0, #1
   84a18:	2104      	movs	r1, #4
   84a1a:	2200      	movs	r2, #0
   84a1c:	4b26      	ldr	r3, [pc, #152]	; (84ab8 <vStartDynamicPriorityTasks+0xa8>)
   84a1e:	4798      	blx	r3
   84a20:	4602      	mov	r2, r0
   84a22:	4b26      	ldr	r3, [pc, #152]	; (84abc <vStartDynamicPriorityTasks+0xac>)
   84a24:	601a      	str	r2, [r3, #0]
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( xSuspendedTestQueue, "Suspended_Test_Queue" );

	xTaskCreate( vContinuousIncrementTask, "CNT_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY, &xContinuousIncrementHandle );
   84a26:	2300      	movs	r3, #0
   84a28:	9300      	str	r3, [sp, #0]
   84a2a:	4b25      	ldr	r3, [pc, #148]	; (84ac0 <vStartDynamicPriorityTasks+0xb0>)
   84a2c:	9301      	str	r3, [sp, #4]
   84a2e:	2300      	movs	r3, #0
   84a30:	9302      	str	r3, [sp, #8]
   84a32:	2300      	movs	r3, #0
   84a34:	9303      	str	r3, [sp, #12]
   84a36:	4823      	ldr	r0, [pc, #140]	; (84ac4 <vStartDynamicPriorityTasks+0xb4>)
   84a38:	4923      	ldr	r1, [pc, #140]	; (84ac8 <vStartDynamicPriorityTasks+0xb8>)
   84a3a:	2282      	movs	r2, #130	; 0x82
   84a3c:	4b23      	ldr	r3, [pc, #140]	; (84acc <vStartDynamicPriorityTasks+0xbc>)
   84a3e:	4c24      	ldr	r4, [pc, #144]	; (84ad0 <vStartDynamicPriorityTasks+0xc0>)
   84a40:	47a0      	blx	r4
	xTaskCreate( vLimitedIncrementTask, "LIM_INC", priSTACK_SIZE, ( void * ) &ulCounter, tskIDLE_PRIORITY + 1, &xLimitedIncrementHandle );
   84a42:	2301      	movs	r3, #1
   84a44:	9300      	str	r3, [sp, #0]
   84a46:	4b23      	ldr	r3, [pc, #140]	; (84ad4 <vStartDynamicPriorityTasks+0xc4>)
   84a48:	9301      	str	r3, [sp, #4]
   84a4a:	2300      	movs	r3, #0
   84a4c:	9302      	str	r3, [sp, #8]
   84a4e:	2300      	movs	r3, #0
   84a50:	9303      	str	r3, [sp, #12]
   84a52:	4821      	ldr	r0, [pc, #132]	; (84ad8 <vStartDynamicPriorityTasks+0xc8>)
   84a54:	4921      	ldr	r1, [pc, #132]	; (84adc <vStartDynamicPriorityTasks+0xcc>)
   84a56:	2282      	movs	r2, #130	; 0x82
   84a58:	4b1c      	ldr	r3, [pc, #112]	; (84acc <vStartDynamicPriorityTasks+0xbc>)
   84a5a:	4c1d      	ldr	r4, [pc, #116]	; (84ad0 <vStartDynamicPriorityTasks+0xc0>)
   84a5c:	47a0      	blx	r4
	xTaskCreate( vCounterControlTask, "C_CTRL", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
   84a5e:	2300      	movs	r3, #0
   84a60:	9300      	str	r3, [sp, #0]
   84a62:	2300      	movs	r3, #0
   84a64:	9301      	str	r3, [sp, #4]
   84a66:	2300      	movs	r3, #0
   84a68:	9302      	str	r3, [sp, #8]
   84a6a:	2300      	movs	r3, #0
   84a6c:	9303      	str	r3, [sp, #12]
   84a6e:	481c      	ldr	r0, [pc, #112]	; (84ae0 <vStartDynamicPriorityTasks+0xd0>)
   84a70:	491c      	ldr	r1, [pc, #112]	; (84ae4 <vStartDynamicPriorityTasks+0xd4>)
   84a72:	2282      	movs	r2, #130	; 0x82
   84a74:	2300      	movs	r3, #0
   84a76:	4c16      	ldr	r4, [pc, #88]	; (84ad0 <vStartDynamicPriorityTasks+0xc0>)
   84a78:	47a0      	blx	r4
	xTaskCreate( vQueueSendWhenSuspendedTask, "SUSP_TX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
   84a7a:	2300      	movs	r3, #0
   84a7c:	9300      	str	r3, [sp, #0]
   84a7e:	2300      	movs	r3, #0
   84a80:	9301      	str	r3, [sp, #4]
   84a82:	2300      	movs	r3, #0
   84a84:	9302      	str	r3, [sp, #8]
   84a86:	2300      	movs	r3, #0
   84a88:	9303      	str	r3, [sp, #12]
   84a8a:	4817      	ldr	r0, [pc, #92]	; (84ae8 <vStartDynamicPriorityTasks+0xd8>)
   84a8c:	4917      	ldr	r1, [pc, #92]	; (84aec <vStartDynamicPriorityTasks+0xdc>)
   84a8e:	2282      	movs	r2, #130	; 0x82
   84a90:	2300      	movs	r3, #0
   84a92:	4c0f      	ldr	r4, [pc, #60]	; (84ad0 <vStartDynamicPriorityTasks+0xc0>)
   84a94:	47a0      	blx	r4
	xTaskCreate( vQueueReceiveWhenSuspendedTask, "SUSP_RX", priSTACK_SIZE, NULL, tskIDLE_PRIORITY, NULL );
   84a96:	2300      	movs	r3, #0
   84a98:	9300      	str	r3, [sp, #0]
   84a9a:	2300      	movs	r3, #0
   84a9c:	9301      	str	r3, [sp, #4]
   84a9e:	2300      	movs	r3, #0
   84aa0:	9302      	str	r3, [sp, #8]
   84aa2:	2300      	movs	r3, #0
   84aa4:	9303      	str	r3, [sp, #12]
   84aa6:	4812      	ldr	r0, [pc, #72]	; (84af0 <vStartDynamicPriorityTasks+0xe0>)
   84aa8:	4912      	ldr	r1, [pc, #72]	; (84af4 <vStartDynamicPriorityTasks+0xe4>)
   84aaa:	2282      	movs	r2, #130	; 0x82
   84aac:	2300      	movs	r3, #0
   84aae:	4c08      	ldr	r4, [pc, #32]	; (84ad0 <vStartDynamicPriorityTasks+0xc0>)
   84ab0:	47a0      	blx	r4
}
   84ab2:	3704      	adds	r7, #4
   84ab4:	46bd      	mov	sp, r7
   84ab6:	bd90      	pop	{r4, r7, pc}
   84ab8:	00081919 	.word	0x00081919
   84abc:	2007a734 	.word	0x2007a734
   84ac0:	2007a684 	.word	0x2007a684
   84ac4:	00084b2d 	.word	0x00084b2d
   84ac8:	00086724 	.word	0x00086724
   84acc:	2007a68c 	.word	0x2007a68c
   84ad0:	000823d5 	.word	0x000823d5
   84ad4:	2007a688 	.word	0x2007a688
   84ad8:	00084af9 	.word	0x00084af9
   84adc:	0008672c 	.word	0x0008672c
   84ae0:	00084b99 	.word	0x00084b99
   84ae4:	00086734 	.word	0x00086734
   84ae8:	00084c71 	.word	0x00084c71
   84aec:	0008673c 	.word	0x0008673c
   84af0:	00084ccd 	.word	0x00084ccd
   84af4:	00086744 	.word	0x00086744

00084af8 <vLimitedIncrementTask>:
/*
 * Just loops around incrementing the shared variable until the limit has been
 * reached.  Once the limit has been reached it suspends itself.
 */
static portTASK_FUNCTION( vLimitedIncrementTask, pvParameters )
{
   84af8:	b580      	push	{r7, lr}
   84afa:	b084      	sub	sp, #16
   84afc:	af00      	add	r7, sp, #0
   84afe:	6078      	str	r0, [r7, #4]
uint32_t *pulCounter;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( uint32_t * ) pvParameters;
   84b00:	687b      	ldr	r3, [r7, #4]
   84b02:	60fb      	str	r3, [r7, #12]

	/* This will run before the control task, so the first thing it does is
	suspend - the control task will resume it when ready. */
	vTaskSuspend( NULL );
   84b04:	2000      	movs	r0, #0
   84b06:	4b08      	ldr	r3, [pc, #32]	; (84b28 <vLimitedIncrementTask+0x30>)
   84b08:	4798      	blx	r3

	for( ;; )
	{
		/* Just count up to a value then suspend. */
		( *pulCounter )++;
   84b0a:	68fb      	ldr	r3, [r7, #12]
   84b0c:	681b      	ldr	r3, [r3, #0]
   84b0e:	1c5a      	adds	r2, r3, #1
   84b10:	68fb      	ldr	r3, [r7, #12]
   84b12:	601a      	str	r2, [r3, #0]

		if( *pulCounter >= priMAX_COUNT )
   84b14:	68fb      	ldr	r3, [r7, #12]
   84b16:	681b      	ldr	r3, [r3, #0]
   84b18:	2bfe      	cmp	r3, #254	; 0xfe
   84b1a:	d903      	bls.n	84b24 <vLimitedIncrementTask+0x2c>
		{
			vTaskSuspend( NULL );
   84b1c:	2000      	movs	r0, #0
   84b1e:	4b02      	ldr	r3, [pc, #8]	; (84b28 <vLimitedIncrementTask+0x30>)
   84b20:	4798      	blx	r3
		}
	}
   84b22:	e7f2      	b.n	84b0a <vLimitedIncrementTask+0x12>
   84b24:	e7f1      	b.n	84b0a <vLimitedIncrementTask+0x12>
   84b26:	bf00      	nop
   84b28:	00082885 	.word	0x00082885

00084b2c <vContinuousIncrementTask>:
/*
 * Just keep counting the shared variable up.  The control task will suspend
 * this task when it wants.
 */
static portTASK_FUNCTION( vContinuousIncrementTask, pvParameters )
{
   84b2c:	b580      	push	{r7, lr}
   84b2e:	b084      	sub	sp, #16
   84b30:	af00      	add	r7, sp, #0
   84b32:	6078      	str	r0, [r7, #4]
volatile uint32_t *pulCounter;
UBaseType_t uxOurPriority;

	/* Take a pointer to the shared variable from the parameters passed into
	the task. */
	pulCounter = ( uint32_t * ) pvParameters;
   84b34:	687b      	ldr	r3, [r7, #4]
   84b36:	60fb      	str	r3, [r7, #12]

	/* Query our priority so we can raise it when exclusive access to the
	shared variable is required. */
	uxOurPriority = uxTaskPriorityGet( NULL );
   84b38:	2000      	movs	r0, #0
   84b3a:	4b14      	ldr	r3, [pc, #80]	; (84b8c <vContinuousIncrementTask+0x60>)
   84b3c:	4798      	blx	r3
   84b3e:	60b8      	str	r0, [r7, #8]

	for( ;; )
	{
		/* Raise the priority above the controller task to ensure a context
		switch does not occur while the variable is being accessed. */
		vTaskPrioritySet( NULL, uxOurPriority + 1 );
   84b40:	68bb      	ldr	r3, [r7, #8]
   84b42:	3301      	adds	r3, #1
   84b44:	2000      	movs	r0, #0
   84b46:	4619      	mov	r1, r3
   84b48:	4b11      	ldr	r3, [pc, #68]	; (84b90 <vContinuousIncrementTask+0x64>)
   84b4a:	4798      	blx	r3
		{
			configASSERT( ( uxTaskPriorityGet( NULL ) == ( uxOurPriority + 1 ) ) );
   84b4c:	2000      	movs	r0, #0
   84b4e:	4b0f      	ldr	r3, [pc, #60]	; (84b8c <vContinuousIncrementTask+0x60>)
   84b50:	4798      	blx	r3
   84b52:	4602      	mov	r2, r0
   84b54:	68bb      	ldr	r3, [r7, #8]
   84b56:	3301      	adds	r3, #1
   84b58:	429a      	cmp	r2, r3
   84b5a:	d002      	beq.n	84b62 <vContinuousIncrementTask+0x36>
   84b5c:	4b0d      	ldr	r3, [pc, #52]	; (84b94 <vContinuousIncrementTask+0x68>)
   84b5e:	4798      	blx	r3
   84b60:	e7fe      	b.n	84b60 <vContinuousIncrementTask+0x34>
			( *pulCounter )++;
   84b62:	68fb      	ldr	r3, [r7, #12]
   84b64:	681b      	ldr	r3, [r3, #0]
   84b66:	1c5a      	adds	r2, r3, #1
   84b68:	68fb      	ldr	r3, [r7, #12]
   84b6a:	601a      	str	r2, [r3, #0]
		}
		vTaskPrioritySet( NULL, uxOurPriority );
   84b6c:	2000      	movs	r0, #0
   84b6e:	68b9      	ldr	r1, [r7, #8]
   84b70:	4b07      	ldr	r3, [pc, #28]	; (84b90 <vContinuousIncrementTask+0x64>)
   84b72:	4798      	blx	r3

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif

		configASSERT( ( uxTaskPriorityGet( NULL ) == uxOurPriority ) );
   84b74:	2000      	movs	r0, #0
   84b76:	4b05      	ldr	r3, [pc, #20]	; (84b8c <vContinuousIncrementTask+0x60>)
   84b78:	4798      	blx	r3
   84b7a:	4602      	mov	r2, r0
   84b7c:	68bb      	ldr	r3, [r7, #8]
   84b7e:	429a      	cmp	r2, r3
   84b80:	d002      	beq.n	84b88 <vContinuousIncrementTask+0x5c>
   84b82:	4b04      	ldr	r3, [pc, #16]	; (84b94 <vContinuousIncrementTask+0x68>)
   84b84:	4798      	blx	r3
   84b86:	e7fe      	b.n	84b86 <vContinuousIncrementTask+0x5a>
	}
   84b88:	e7da      	b.n	84b40 <vContinuousIncrementTask+0x14>
   84b8a:	bf00      	nop
   84b8c:	000826f5 	.word	0x000826f5
   84b90:	00082731 	.word	0x00082731
   84b94:	0008139d 	.word	0x0008139d

00084b98 <vCounterControlTask>:

/*
 * Controller task as described above.
 */
static portTASK_FUNCTION( vCounterControlTask, pvParameters )
{
   84b98:	b580      	push	{r7, lr}
   84b9a:	b084      	sub	sp, #16
   84b9c:	af00      	add	r7, sp, #0
   84b9e:	6078      	str	r0, [r7, #4]
uint32_t ulLastCounter;
short sLoops;
short sError = pdFALSE;
   84ba0:	2300      	movs	r3, #0
   84ba2:	81bb      	strh	r3, [r7, #12]
	( void ) pvParameters;

	for( ;; )
	{
		/* Start with the counter at zero. */
		ulCounter = ( uint32_t ) 0;
   84ba4:	4b27      	ldr	r3, [pc, #156]	; (84c44 <vCounterControlTask+0xac>)
   84ba6:	2200      	movs	r2, #0
   84ba8:	601a      	str	r2, [r3, #0]

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
   84baa:	2300      	movs	r3, #0
   84bac:	81fb      	strh	r3, [r7, #14]
   84bae:	e01d      	b.n	84bec <vCounterControlTask+0x54>
		{
			/* Suspend the continuous count task so we can take a mirror of the
			shared variable without risk of corruption.  This is not really
			needed as the other task raises its priority above this task's
			priority. */
			vTaskSuspend( xContinuousIncrementHandle );
   84bb0:	4b25      	ldr	r3, [pc, #148]	; (84c48 <vCounterControlTask+0xb0>)
   84bb2:	681b      	ldr	r3, [r3, #0]
   84bb4:	4618      	mov	r0, r3
   84bb6:	4b25      	ldr	r3, [pc, #148]	; (84c4c <vCounterControlTask+0xb4>)
   84bb8:	4798      	blx	r3
				{
					configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eSuspended );
				}
				#endif /* INCLUDE_eTaskGetState */

				ulLastCounter = ulCounter;
   84bba:	4b22      	ldr	r3, [pc, #136]	; (84c44 <vCounterControlTask+0xac>)
   84bbc:	681b      	ldr	r3, [r3, #0]
   84bbe:	60bb      	str	r3, [r7, #8]
			}
			vTaskResume( xContinuousIncrementHandle );
   84bc0:	4b21      	ldr	r3, [pc, #132]	; (84c48 <vCounterControlTask+0xb0>)
   84bc2:	681b      	ldr	r3, [r3, #0]
   84bc4:	4618      	mov	r0, r3
   84bc6:	4b22      	ldr	r3, [pc, #136]	; (84c50 <vCounterControlTask+0xb8>)
   84bc8:	4798      	blx	r3
				configASSERT( eTaskGetState( xContinuousIncrementHandle ) == eReady );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Now delay to ensure the other task has processor time. */
			vTaskDelay( priSLEEP_TIME );
   84bca:	2080      	movs	r0, #128	; 0x80
   84bcc:	4b21      	ldr	r3, [pc, #132]	; (84c54 <vCounterControlTask+0xbc>)
   84bce:	4798      	blx	r3

			/* Check the shared variable again.  This time to ensure mutual
			exclusion the whole scheduler will be locked.  This is just for
			demo purposes! */
			vTaskSuspendAll();
   84bd0:	4b21      	ldr	r3, [pc, #132]	; (84c58 <vCounterControlTask+0xc0>)
   84bd2:	4798      	blx	r3
			{
				if( ulLastCounter == ulCounter )
   84bd4:	4b1b      	ldr	r3, [pc, #108]	; (84c44 <vCounterControlTask+0xac>)
   84bd6:	681b      	ldr	r3, [r3, #0]
   84bd8:	68ba      	ldr	r2, [r7, #8]
   84bda:	429a      	cmp	r2, r3
   84bdc:	d101      	bne.n	84be2 <vCounterControlTask+0x4a>
				{
					/* The shared variable has not changed.  There is a problem
					with the continuous count task so flag an error. */
					sError = pdTRUE;
   84bde:	2301      	movs	r3, #1
   84be0:	81bb      	strh	r3, [r7, #12]
				}
			}
			xTaskResumeAll();
   84be2:	4b1e      	ldr	r3, [pc, #120]	; (84c5c <vCounterControlTask+0xc4>)
   84be4:	4798      	blx	r3
		ulCounter = ( uint32_t ) 0;

		/* First section : */

		/* Check the continuous count task is running. */
		for( sLoops = 0; sLoops < priLOOPS; sLoops++ )
   84be6:	89fb      	ldrh	r3, [r7, #14]
   84be8:	3301      	adds	r3, #1
   84bea:	81fb      	strh	r3, [r7, #14]
   84bec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   84bf0:	2b04      	cmp	r3, #4
   84bf2:	dddd      	ble.n	84bb0 <vCounterControlTask+0x18>

		/* Second section: */

		/* Suspend the continuous counter task so it stops accessing the shared
		variable. */
		vTaskSuspend( xContinuousIncrementHandle );
   84bf4:	4b14      	ldr	r3, [pc, #80]	; (84c48 <vCounterControlTask+0xb0>)
   84bf6:	681b      	ldr	r3, [r3, #0]
   84bf8:	4618      	mov	r0, r3
   84bfa:	4b14      	ldr	r3, [pc, #80]	; (84c4c <vCounterControlTask+0xb4>)
   84bfc:	4798      	blx	r3

		/* Reset the variable. */
		ulCounter = ( uint32_t ) 0;
   84bfe:	4b11      	ldr	r3, [pc, #68]	; (84c44 <vCounterControlTask+0xac>)
   84c00:	2200      	movs	r2, #0
   84c02:	601a      	str	r2, [r3, #0]
		#endif /* INCLUDE_eTaskGetState */

		/* Resume the limited count task which has a higher priority than us.
		We should therefore not return from this call until the limited count
		task has suspended itself with a known value in the counter variable. */
		vTaskResume( xLimitedIncrementHandle );
   84c04:	4b16      	ldr	r3, [pc, #88]	; (84c60 <vCounterControlTask+0xc8>)
   84c06:	681b      	ldr	r3, [r3, #0]
   84c08:	4618      	mov	r0, r3
   84c0a:	4b11      	ldr	r3, [pc, #68]	; (84c50 <vCounterControlTask+0xb8>)
   84c0c:	4798      	blx	r3
			configASSERT( eTaskGetState( xLimitedIncrementHandle ) == eSuspended );
		}
		#endif /* INCLUDE_eTaskGetState */

		/* Does the counter variable have the expected value? */
		if( ulCounter != priMAX_COUNT )
   84c0e:	4b0d      	ldr	r3, [pc, #52]	; (84c44 <vCounterControlTask+0xac>)
   84c10:	681b      	ldr	r3, [r3, #0]
   84c12:	2bff      	cmp	r3, #255	; 0xff
   84c14:	d001      	beq.n	84c1a <vCounterControlTask+0x82>
		{
			sError = pdTRUE;
   84c16:	2301      	movs	r3, #1
   84c18:	81bb      	strh	r3, [r7, #12]
		}

		if( sError == pdFALSE )
   84c1a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   84c1e:	2b00      	cmp	r3, #0
   84c20:	d10a      	bne.n	84c38 <vCounterControlTask+0xa0>
		{
			/* If no errors have occurred then increment the check variable. */
			portENTER_CRITICAL();
   84c22:	4b10      	ldr	r3, [pc, #64]	; (84c64 <vCounterControlTask+0xcc>)
   84c24:	4798      	blx	r3
				usCheckVariable++;
   84c26:	4b10      	ldr	r3, [pc, #64]	; (84c68 <vCounterControlTask+0xd0>)
   84c28:	881b      	ldrh	r3, [r3, #0]
   84c2a:	b29b      	uxth	r3, r3
   84c2c:	3301      	adds	r3, #1
   84c2e:	b29a      	uxth	r2, r3
   84c30:	4b0d      	ldr	r3, [pc, #52]	; (84c68 <vCounterControlTask+0xd0>)
   84c32:	801a      	strh	r2, [r3, #0]
			portEXIT_CRITICAL();
   84c34:	4b0d      	ldr	r3, [pc, #52]	; (84c6c <vCounterControlTask+0xd4>)
   84c36:	4798      	blx	r3
		}

		/* Resume the continuous count task and do it all again. */
		vTaskResume( xContinuousIncrementHandle );
   84c38:	4b03      	ldr	r3, [pc, #12]	; (84c48 <vCounterControlTask+0xb0>)
   84c3a:	681b      	ldr	r3, [r3, #0]
   84c3c:	4618      	mov	r0, r3
   84c3e:	4b04      	ldr	r3, [pc, #16]	; (84c50 <vCounterControlTask+0xb8>)
   84c40:	4798      	blx	r3

		#if( configUSE_PREEMPTION == 0 )
			taskYIELD();
		#endif
	}
   84c42:	e7af      	b.n	84ba4 <vCounterControlTask+0xc>
   84c44:	2007a68c 	.word	0x2007a68c
   84c48:	2007a684 	.word	0x2007a684
   84c4c:	00082885 	.word	0x00082885
   84c50:	000829fd 	.word	0x000829fd
   84c54:	00082659 	.word	0x00082659
   84c58:	00082b31 	.word	0x00082b31
   84c5c:	00082b4d 	.word	0x00082b4d
   84c60:	2007a688 	.word	0x2007a688
   84c64:	00081321 	.word	0x00081321
   84c68:	2007a690 	.word	0x2007a690
   84c6c:	00081365 	.word	0x00081365

00084c70 <vQueueSendWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueSendWhenSuspendedTask, pvParameters )
{
   84c70:	b590      	push	{r4, r7, lr}
   84c72:	b083      	sub	sp, #12
   84c74:	af00      	add	r7, sp, #0
   84c76:	6078      	str	r0, [r7, #4]
	/* Just to stop warning messages. */
	( void ) pvParameters;

	for( ;; )
	{
		vTaskSuspendAll();
   84c78:	4b0d      	ldr	r3, [pc, #52]	; (84cb0 <vQueueSendWhenSuspendedTask+0x40>)
   84c7a:	4798      	blx	r3
		{
			/* We must not block while the scheduler is suspended! */
			if( xQueueSend( xSuspendedTestQueue, ( void * ) &ulValueToSend, priNO_BLOCK ) != pdTRUE )
   84c7c:	4b0d      	ldr	r3, [pc, #52]	; (84cb4 <vQueueSendWhenSuspendedTask+0x44>)
   84c7e:	681b      	ldr	r3, [r3, #0]
   84c80:	4618      	mov	r0, r3
   84c82:	490d      	ldr	r1, [pc, #52]	; (84cb8 <vQueueSendWhenSuspendedTask+0x48>)
   84c84:	2200      	movs	r2, #0
   84c86:	2300      	movs	r3, #0
   84c88:	4c0c      	ldr	r4, [pc, #48]	; (84cbc <vQueueSendWhenSuspendedTask+0x4c>)
   84c8a:	47a0      	blx	r4
   84c8c:	4603      	mov	r3, r0
   84c8e:	2b01      	cmp	r3, #1
   84c90:	d002      	beq.n	84c98 <vQueueSendWhenSuspendedTask+0x28>
			{
				xSuspendedQueueSendError = pdTRUE;
   84c92:	4b0b      	ldr	r3, [pc, #44]	; (84cc0 <vQueueSendWhenSuspendedTask+0x50>)
   84c94:	2201      	movs	r2, #1
   84c96:	601a      	str	r2, [r3, #0]
			}
		}
		xTaskResumeAll();
   84c98:	4b0a      	ldr	r3, [pc, #40]	; (84cc4 <vQueueSendWhenSuspendedTask+0x54>)
   84c9a:	4798      	blx	r3

		vTaskDelay( priSLEEP_TIME );
   84c9c:	2080      	movs	r0, #128	; 0x80
   84c9e:	4b0a      	ldr	r3, [pc, #40]	; (84cc8 <vQueueSendWhenSuspendedTask+0x58>)
   84ca0:	4798      	blx	r3

		++ulValueToSend;
   84ca2:	4b05      	ldr	r3, [pc, #20]	; (84cb8 <vQueueSendWhenSuspendedTask+0x48>)
   84ca4:	681b      	ldr	r3, [r3, #0]
   84ca6:	1c5a      	adds	r2, r3, #1
   84ca8:	4b03      	ldr	r3, [pc, #12]	; (84cb8 <vQueueSendWhenSuspendedTask+0x48>)
   84caa:	601a      	str	r2, [r3, #0]
	}
   84cac:	e7e4      	b.n	84c78 <vQueueSendWhenSuspendedTask+0x8>
   84cae:	bf00      	nop
   84cb0:	00082b31 	.word	0x00082b31
   84cb4:	2007a734 	.word	0x2007a734
   84cb8:	2007a6a0 	.word	0x2007a6a0
   84cbc:	00081b69 	.word	0x00081b69
   84cc0:	2007a694 	.word	0x2007a694
   84cc4:	00082b4d 	.word	0x00082b4d
   84cc8:	00082659 	.word	0x00082659

00084ccc <vQueueReceiveWhenSuspendedTask>:
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vQueueReceiveWhenSuspendedTask, pvParameters )
{
   84ccc:	b590      	push	{r4, r7, lr}
   84cce:	b085      	sub	sp, #20
   84cd0:	af00      	add	r7, sp, #0
   84cd2:	6078      	str	r0, [r7, #4]
			/* Suspending the scheduler here is fairly pointless and
			undesirable for a normal application.  It is done here purely
			to test the scheduler.  The inner xTaskResumeAll() should
			never return pdTRUE as the scheduler is still locked by the
			outer call. */
			vTaskSuspendAll();
   84cd4:	4b17      	ldr	r3, [pc, #92]	; (84d34 <vQueueReceiveWhenSuspendedTask+0x68>)
   84cd6:	4798      	blx	r3
			{
				vTaskSuspendAll();
   84cd8:	4b16      	ldr	r3, [pc, #88]	; (84d34 <vQueueReceiveWhenSuspendedTask+0x68>)
   84cda:	4798      	blx	r3
				{
					xGotValue = xQueueReceive( xSuspendedTestQueue, ( void * ) &ulReceivedValue, priNO_BLOCK );
   84cdc:	4b16      	ldr	r3, [pc, #88]	; (84d38 <vQueueReceiveWhenSuspendedTask+0x6c>)
   84cde:	681a      	ldr	r2, [r3, #0]
   84ce0:	f107 0308 	add.w	r3, r7, #8
   84ce4:	4610      	mov	r0, r2
   84ce6:	4619      	mov	r1, r3
   84ce8:	2200      	movs	r2, #0
   84cea:	2300      	movs	r3, #0
   84cec:	4c13      	ldr	r4, [pc, #76]	; (84d3c <vQueueReceiveWhenSuspendedTask+0x70>)
   84cee:	47a0      	blx	r4
   84cf0:	60f8      	str	r0, [r7, #12]
				}
				if( xTaskResumeAll() != pdFALSE )
   84cf2:	4b13      	ldr	r3, [pc, #76]	; (84d40 <vQueueReceiveWhenSuspendedTask+0x74>)
   84cf4:	4798      	blx	r3
   84cf6:	4603      	mov	r3, r0
   84cf8:	2b00      	cmp	r3, #0
   84cfa:	d002      	beq.n	84d02 <vQueueReceiveWhenSuspendedTask+0x36>
				{
					xSuspendedQueueReceiveError = pdTRUE;
   84cfc:	4b11      	ldr	r3, [pc, #68]	; (84d44 <vQueueReceiveWhenSuspendedTask+0x78>)
   84cfe:	2201      	movs	r2, #1
   84d00:	601a      	str	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
   84d02:	4b0f      	ldr	r3, [pc, #60]	; (84d40 <vQueueReceiveWhenSuspendedTask+0x74>)
   84d04:	4798      	blx	r3
			{
				taskYIELD();
			}
			#endif

		} while( xGotValue == pdFALSE );
   84d06:	68fb      	ldr	r3, [r7, #12]
   84d08:	2b00      	cmp	r3, #0
   84d0a:	d0e3      	beq.n	84cd4 <vQueueReceiveWhenSuspendedTask+0x8>

		if( ulReceivedValue != ulExpectedValue )
   84d0c:	68ba      	ldr	r2, [r7, #8]
   84d0e:	4b0e      	ldr	r3, [pc, #56]	; (84d48 <vQueueReceiveWhenSuspendedTask+0x7c>)
   84d10:	681b      	ldr	r3, [r3, #0]
   84d12:	429a      	cmp	r2, r3
   84d14:	d002      	beq.n	84d1c <vQueueReceiveWhenSuspendedTask+0x50>
		{
			xSuspendedQueueReceiveError = pdTRUE;
   84d16:	4b0b      	ldr	r3, [pc, #44]	; (84d44 <vQueueReceiveWhenSuspendedTask+0x78>)
   84d18:	2201      	movs	r2, #1
   84d1a:	601a      	str	r2, [r3, #0]
		}

		if( xSuspendedQueueReceiveError != pdTRUE )
   84d1c:	4b09      	ldr	r3, [pc, #36]	; (84d44 <vQueueReceiveWhenSuspendedTask+0x78>)
   84d1e:	681b      	ldr	r3, [r3, #0]
   84d20:	2b01      	cmp	r3, #1
   84d22:	d005      	beq.n	84d30 <vQueueReceiveWhenSuspendedTask+0x64>
		{
			/* Only increment the variable if an error has not occurred.  This
			allows xAreDynamicPriorityTasksStillRunning() to check for stalled
			tasks as well as explicit errors. */
			++ulExpectedValue;
   84d24:	4b08      	ldr	r3, [pc, #32]	; (84d48 <vQueueReceiveWhenSuspendedTask+0x7c>)
   84d26:	681b      	ldr	r3, [r3, #0]
   84d28:	1c5a      	adds	r2, r3, #1
   84d2a:	4b07      	ldr	r3, [pc, #28]	; (84d48 <vQueueReceiveWhenSuspendedTask+0x7c>)
   84d2c:	601a      	str	r2, [r3, #0]
		}
	}
   84d2e:	e7d1      	b.n	84cd4 <vQueueReceiveWhenSuspendedTask+0x8>
   84d30:	e7d0      	b.n	84cd4 <vQueueReceiveWhenSuspendedTask+0x8>
   84d32:	bf00      	nop
   84d34:	00082b31 	.word	0x00082b31
   84d38:	2007a734 	.word	0x2007a734
   84d3c:	00081e29 	.word	0x00081e29
   84d40:	00082b4d 	.word	0x00082b4d
   84d44:	2007a698 	.word	0x2007a698
   84d48:	2007a69c 	.word	0x2007a69c

00084d4c <xAreDynamicPriorityTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* Called to check that all the created tasks are still running without error. */
BaseType_t xAreDynamicPriorityTasksStillRunning( void )
{
   84d4c:	b480      	push	{r7}
   84d4e:	b083      	sub	sp, #12
   84d50:	af00      	add	r7, sp, #0
/* Keep a history of the check variables so we know if it has been incremented
since the last call. */
static uint16_t usLastTaskCheck = ( uint16_t ) 0;
static uint32_t ulLastExpectedValue = ( uint32_t ) 0U;
BaseType_t xReturn = pdTRUE;
   84d52:	2301      	movs	r3, #1
   84d54:	607b      	str	r3, [r7, #4]

	/* Check the tasks are still running by ensuring the check variable
	is still incrementing. */

	if( usCheckVariable == usLastTaskCheck )
   84d56:	4b16      	ldr	r3, [pc, #88]	; (84db0 <xAreDynamicPriorityTasksStillRunning+0x64>)
   84d58:	881b      	ldrh	r3, [r3, #0]
   84d5a:	b29a      	uxth	r2, r3
   84d5c:	4b15      	ldr	r3, [pc, #84]	; (84db4 <xAreDynamicPriorityTasksStillRunning+0x68>)
   84d5e:	881b      	ldrh	r3, [r3, #0]
   84d60:	429a      	cmp	r2, r3
   84d62:	d101      	bne.n	84d68 <xAreDynamicPriorityTasksStillRunning+0x1c>
	{
		/* The check has not incremented so an error exists. */
		xReturn = pdFALSE;
   84d64:	2300      	movs	r3, #0
   84d66:	607b      	str	r3, [r7, #4]
	}

	if( ulExpectedValue == ulLastExpectedValue )
   84d68:	4b13      	ldr	r3, [pc, #76]	; (84db8 <xAreDynamicPriorityTasksStillRunning+0x6c>)
   84d6a:	681a      	ldr	r2, [r3, #0]
   84d6c:	4b13      	ldr	r3, [pc, #76]	; (84dbc <xAreDynamicPriorityTasksStillRunning+0x70>)
   84d6e:	681b      	ldr	r3, [r3, #0]
   84d70:	429a      	cmp	r2, r3
   84d72:	d101      	bne.n	84d78 <xAreDynamicPriorityTasksStillRunning+0x2c>
	{
		/* The value being received by the queue receive task has not
		incremented so an error exists. */
		xReturn = pdFALSE;
   84d74:	2300      	movs	r3, #0
   84d76:	607b      	str	r3, [r7, #4]
	}

	if( xSuspendedQueueSendError == pdTRUE )
   84d78:	4b11      	ldr	r3, [pc, #68]	; (84dc0 <xAreDynamicPriorityTasksStillRunning+0x74>)
   84d7a:	681b      	ldr	r3, [r3, #0]
   84d7c:	2b01      	cmp	r3, #1
   84d7e:	d101      	bne.n	84d84 <xAreDynamicPriorityTasksStillRunning+0x38>
	{
		xReturn = pdFALSE;
   84d80:	2300      	movs	r3, #0
   84d82:	607b      	str	r3, [r7, #4]
	}

	if( xSuspendedQueueReceiveError == pdTRUE )
   84d84:	4b0f      	ldr	r3, [pc, #60]	; (84dc4 <xAreDynamicPriorityTasksStillRunning+0x78>)
   84d86:	681b      	ldr	r3, [r3, #0]
   84d88:	2b01      	cmp	r3, #1
   84d8a:	d101      	bne.n	84d90 <xAreDynamicPriorityTasksStillRunning+0x44>
	{
		xReturn = pdFALSE;
   84d8c:	2300      	movs	r3, #0
   84d8e:	607b      	str	r3, [r7, #4]
	}

	usLastTaskCheck = usCheckVariable;
   84d90:	4b07      	ldr	r3, [pc, #28]	; (84db0 <xAreDynamicPriorityTasksStillRunning+0x64>)
   84d92:	881b      	ldrh	r3, [r3, #0]
   84d94:	b29a      	uxth	r2, r3
   84d96:	4b07      	ldr	r3, [pc, #28]	; (84db4 <xAreDynamicPriorityTasksStillRunning+0x68>)
   84d98:	801a      	strh	r2, [r3, #0]
	ulLastExpectedValue = ulExpectedValue;
   84d9a:	4b07      	ldr	r3, [pc, #28]	; (84db8 <xAreDynamicPriorityTasksStillRunning+0x6c>)
   84d9c:	681a      	ldr	r2, [r3, #0]
   84d9e:	4b07      	ldr	r3, [pc, #28]	; (84dbc <xAreDynamicPriorityTasksStillRunning+0x70>)
   84da0:	601a      	str	r2, [r3, #0]

	return xReturn;
   84da2:	687b      	ldr	r3, [r7, #4]
}
   84da4:	4618      	mov	r0, r3
   84da6:	370c      	adds	r7, #12
   84da8:	46bd      	mov	sp, r7
   84daa:	f85d 7b04 	ldr.w	r7, [sp], #4
   84dae:	4770      	bx	lr
   84db0:	2007a690 	.word	0x2007a690
   84db4:	2007a6a4 	.word	0x2007a6a4
   84db8:	2007a69c 	.word	0x2007a69c
   84dbc:	2007a6a8 	.word	0x2007a6a8
   84dc0:	2007a694 	.word	0x2007a694
   84dc4:	2007a698 	.word	0x2007a698

00084dc8 <vStartLEDFlashTimers>:
static void prvLEDTimerCallback( TimerHandle_t xTimer );

/*-----------------------------------------------------------*/

void vStartLEDFlashTimers( UBaseType_t uxNumberOfLEDs )
{
   84dc8:	b590      	push	{r4, r7, lr}
   84dca:	b087      	sub	sp, #28
   84dcc:	af02      	add	r7, sp, #8
   84dce:	6078      	str	r0, [r7, #4]
UBaseType_t uxLEDTimer;
TimerHandle_t xTimer;

	/* Create and start the requested number of timers. */
	for( uxLEDTimer = 0; uxLEDTimer < uxNumberOfLEDs; ++uxLEDTimer )
   84dd0:	2300      	movs	r3, #0
   84dd2:	60fb      	str	r3, [r7, #12]
   84dd4:	e01f      	b.n	84e16 <vStartLEDFlashTimers+0x4e>
	{
		/* Create the timer. */
		xTimer = xTimerCreate( 	"Flasher",								/* A text name, purely to help debugging. */
   84dd6:	68fb      	ldr	r3, [r7, #12]
   84dd8:	3301      	adds	r3, #1
   84dda:	f240 124d 	movw	r2, #333	; 0x14d
   84dde:	fb02 f203 	mul.w	r2, r2, r3
   84de2:	68fb      	ldr	r3, [r7, #12]
   84de4:	490f      	ldr	r1, [pc, #60]	; (84e24 <vStartLEDFlashTimers+0x5c>)
   84de6:	9100      	str	r1, [sp, #0]
   84de8:	480f      	ldr	r0, [pc, #60]	; (84e28 <vStartLEDFlashTimers+0x60>)
   84dea:	4611      	mov	r1, r2
   84dec:	2201      	movs	r2, #1
   84dee:	4c0f      	ldr	r4, [pc, #60]	; (84e2c <vStartLEDFlashTimers+0x64>)
   84df0:	47a0      	blx	r4
   84df2:	60b8      	str	r0, [r7, #8]
		/* If the timer was created successfully, attempt to start it.  If the
		scheduler has not yet been started then the timer command queue must
		be long enough to hold each command sent to it until such time that the
		scheduler is started.  The timer command queue length is set by
		configTIMER_QUEUE_LENGTH in FreeRTOSConfig.h. */
		if( xTimer != NULL )
   84df4:	68bb      	ldr	r3, [r7, #8]
   84df6:	2b00      	cmp	r3, #0
   84df8:	d00a      	beq.n	84e10 <vStartLEDFlashTimers+0x48>
		{
			xTimerStart( xTimer, ledDONT_BLOCK );
   84dfa:	4b0d      	ldr	r3, [pc, #52]	; (84e30 <vStartLEDFlashTimers+0x68>)
   84dfc:	4798      	blx	r3
   84dfe:	4603      	mov	r3, r0
   84e00:	2200      	movs	r2, #0
   84e02:	9200      	str	r2, [sp, #0]
   84e04:	68b8      	ldr	r0, [r7, #8]
   84e06:	2101      	movs	r1, #1
   84e08:	461a      	mov	r2, r3
   84e0a:	2300      	movs	r3, #0
   84e0c:	4c09      	ldr	r4, [pc, #36]	; (84e34 <vStartLEDFlashTimers+0x6c>)
   84e0e:	47a0      	blx	r4
{
UBaseType_t uxLEDTimer;
TimerHandle_t xTimer;

	/* Create and start the requested number of timers. */
	for( uxLEDTimer = 0; uxLEDTimer < uxNumberOfLEDs; ++uxLEDTimer )
   84e10:	68fb      	ldr	r3, [r7, #12]
   84e12:	3301      	adds	r3, #1
   84e14:	60fb      	str	r3, [r7, #12]
   84e16:	68fa      	ldr	r2, [r7, #12]
   84e18:	687b      	ldr	r3, [r7, #4]
   84e1a:	429a      	cmp	r2, r3
   84e1c:	d3db      	bcc.n	84dd6 <vStartLEDFlashTimers+0xe>
		if( xTimer != NULL )
		{
			xTimerStart( xTimer, ledDONT_BLOCK );
		}
	}
}
   84e1e:	3714      	adds	r7, #20
   84e20:	46bd      	mov	sp, r7
   84e22:	bd90      	pop	{r4, r7, pc}
   84e24:	00084e39 	.word	0x00084e39
   84e28:	0008674c 	.word	0x0008674c
   84e2c:	000837e5 	.word	0x000837e5
   84e30:	00082c71 	.word	0x00082c71
   84e34:	00083861 	.word	0x00083861

00084e38 <prvLEDTimerCallback>:
/*-----------------------------------------------------------*/

static void prvLEDTimerCallback( TimerHandle_t xTimer )
{
   84e38:	b580      	push	{r7, lr}
   84e3a:	b084      	sub	sp, #16
   84e3c:	af00      	add	r7, sp, #0
   84e3e:	6078      	str	r0, [r7, #4]
BaseType_t xTimerID;

	/* The timer ID is used to identify the timer that has actually expired as
	each timer uses the same callback.  The ID is then also used as the number
	of the LED that is to be toggled. */
	xTimerID = ( BaseType_t ) pvTimerGetTimerID( xTimer );
   84e40:	6878      	ldr	r0, [r7, #4]
   84e42:	4b05      	ldr	r3, [pc, #20]	; (84e58 <prvLEDTimerCallback+0x20>)
   84e44:	4798      	blx	r3
   84e46:	4603      	mov	r3, r0
   84e48:	60fb      	str	r3, [r7, #12]
	vParTestToggleLED( xTimerID );
   84e4a:	68fb      	ldr	r3, [r7, #12]
   84e4c:	4618      	mov	r0, r3
   84e4e:	4b03      	ldr	r3, [pc, #12]	; (84e5c <prvLEDTimerCallback+0x24>)
   84e50:	4798      	blx	r3
}
   84e52:	3710      	adds	r7, #16
   84e54:	46bd      	mov	sp, r7
   84e56:	bd80      	pop	{r7, pc}
   84e58:	00083da5 	.word	0x00083da5
   84e5c:	00086269 	.word	0x00086269

00084e60 <vStartGenericQueueTasks>:
static SemaphoreHandle_t xISRMutex = NULL;

/*-----------------------------------------------------------*/

void vStartGenericQueueTasks( UBaseType_t uxPriority )
{
   84e60:	b590      	push	{r4, r7, lr}
   84e62:	b089      	sub	sp, #36	; 0x24
   84e64:	af04      	add	r7, sp, #16
   84e66:	6078      	str	r0, [r7, #4]
QueueHandle_t xQueue;
SemaphoreHandle_t xMutex;

	xISRMutex = xSemaphoreCreateMutex();
   84e68:	2001      	movs	r0, #1
   84e6a:	4b28      	ldr	r3, [pc, #160]	; (84f0c <vStartGenericQueueTasks+0xac>)
   84e6c:	4798      	blx	r3
   84e6e:	4602      	mov	r2, r0
   84e70:	4b27      	ldr	r3, [pc, #156]	; (84f10 <vStartGenericQueueTasks+0xb0>)
   84e72:	601a      	str	r2, [r3, #0]
	configASSERT( xISRMutex );
   84e74:	4b26      	ldr	r3, [pc, #152]	; (84f10 <vStartGenericQueueTasks+0xb0>)
   84e76:	681b      	ldr	r3, [r3, #0]
   84e78:	2b00      	cmp	r3, #0
   84e7a:	d102      	bne.n	84e82 <vStartGenericQueueTasks+0x22>
   84e7c:	4b25      	ldr	r3, [pc, #148]	; (84f14 <vStartGenericQueueTasks+0xb4>)
   84e7e:	4798      	blx	r3
   84e80:	e7fe      	b.n	84e80 <vStartGenericQueueTasks+0x20>

	/* Create the queue that we are going to use for the
	prvSendFrontAndBackTest demo. */
	xQueue = xQueueCreate( genqQUEUE_LENGTH, sizeof( uint32_t ) );
   84e82:	2005      	movs	r0, #5
   84e84:	2104      	movs	r1, #4
   84e86:	2200      	movs	r2, #0
   84e88:	4b23      	ldr	r3, [pc, #140]	; (84f18 <vStartGenericQueueTasks+0xb8>)
   84e8a:	4798      	blx	r3
   84e8c:	60f8      	str	r0, [r7, #12]
	vQueueAddToRegistry( xQueue, "Gen_Queue_Test" );

	/* Create the demo task and pass it the queue just created.  We are
	passing the queue handle by value so it does not matter that it is
	declared on the stack here. */
	xTaskCreate( prvSendFrontAndBackTest, "GenQ", configMINIMAL_STACK_SIZE, ( void * ) xQueue, uxPriority, NULL );
   84e8e:	687b      	ldr	r3, [r7, #4]
   84e90:	9300      	str	r3, [sp, #0]
   84e92:	2300      	movs	r3, #0
   84e94:	9301      	str	r3, [sp, #4]
   84e96:	2300      	movs	r3, #0
   84e98:	9302      	str	r3, [sp, #8]
   84e9a:	2300      	movs	r3, #0
   84e9c:	9303      	str	r3, [sp, #12]
   84e9e:	481f      	ldr	r0, [pc, #124]	; (84f1c <vStartGenericQueueTasks+0xbc>)
   84ea0:	491f      	ldr	r1, [pc, #124]	; (84f20 <vStartGenericQueueTasks+0xc0>)
   84ea2:	2282      	movs	r2, #130	; 0x82
   84ea4:	68fb      	ldr	r3, [r7, #12]
   84ea6:	4c1f      	ldr	r4, [pc, #124]	; (84f24 <vStartGenericQueueTasks+0xc4>)
   84ea8:	47a0      	blx	r4

	/* Create the mutex used by the prvMutexTest task. */
	xMutex = xSemaphoreCreateMutex();
   84eaa:	2001      	movs	r0, #1
   84eac:	4b17      	ldr	r3, [pc, #92]	; (84f0c <vStartGenericQueueTasks+0xac>)
   84eae:	4798      	blx	r3
   84eb0:	60b8      	str	r0, [r7, #8]
	vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Gen_Queue_Mutex" );

	/* Create the mutex demo tasks and pass it the mutex just created.  We are
	passing the mutex handle by value so it does not matter that it is declared
	on the stack here. */
	xTaskCreate( prvLowPriorityMutexTask, "MuLow", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_LOW_PRIORITY, NULL );
   84eb2:	2300      	movs	r3, #0
   84eb4:	9300      	str	r3, [sp, #0]
   84eb6:	2300      	movs	r3, #0
   84eb8:	9301      	str	r3, [sp, #4]
   84eba:	2300      	movs	r3, #0
   84ebc:	9302      	str	r3, [sp, #8]
   84ebe:	2300      	movs	r3, #0
   84ec0:	9303      	str	r3, [sp, #12]
   84ec2:	4819      	ldr	r0, [pc, #100]	; (84f28 <vStartGenericQueueTasks+0xc8>)
   84ec4:	4919      	ldr	r1, [pc, #100]	; (84f2c <vStartGenericQueueTasks+0xcc>)
   84ec6:	2282      	movs	r2, #130	; 0x82
   84ec8:	68bb      	ldr	r3, [r7, #8]
   84eca:	4c16      	ldr	r4, [pc, #88]	; (84f24 <vStartGenericQueueTasks+0xc4>)
   84ecc:	47a0      	blx	r4
	xTaskCreate( prvMediumPriorityMutexTask, "MuMed", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, &xMediumPriorityMutexTask );
   84ece:	2302      	movs	r3, #2
   84ed0:	9300      	str	r3, [sp, #0]
   84ed2:	4b17      	ldr	r3, [pc, #92]	; (84f30 <vStartGenericQueueTasks+0xd0>)
   84ed4:	9301      	str	r3, [sp, #4]
   84ed6:	2300      	movs	r3, #0
   84ed8:	9302      	str	r3, [sp, #8]
   84eda:	2300      	movs	r3, #0
   84edc:	9303      	str	r3, [sp, #12]
   84ede:	4815      	ldr	r0, [pc, #84]	; (84f34 <vStartGenericQueueTasks+0xd4>)
   84ee0:	4915      	ldr	r1, [pc, #84]	; (84f38 <vStartGenericQueueTasks+0xd8>)
   84ee2:	2282      	movs	r2, #130	; 0x82
   84ee4:	2300      	movs	r3, #0
   84ee6:	4c0f      	ldr	r4, [pc, #60]	; (84f24 <vStartGenericQueueTasks+0xc4>)
   84ee8:	47a0      	blx	r4
	xTaskCreate( prvHighPriorityMutexTask, "MuHigh", configMINIMAL_STACK_SIZE, ( void * ) xMutex, genqMUTEX_HIGH_PRIORITY, &xHighPriorityMutexTask );
   84eea:	2303      	movs	r3, #3
   84eec:	9300      	str	r3, [sp, #0]
   84eee:	4b13      	ldr	r3, [pc, #76]	; (84f3c <vStartGenericQueueTasks+0xdc>)
   84ef0:	9301      	str	r3, [sp, #4]
   84ef2:	2300      	movs	r3, #0
   84ef4:	9302      	str	r3, [sp, #8]
   84ef6:	2300      	movs	r3, #0
   84ef8:	9303      	str	r3, [sp, #12]
   84efa:	4811      	ldr	r0, [pc, #68]	; (84f40 <vStartGenericQueueTasks+0xe0>)
   84efc:	4911      	ldr	r1, [pc, #68]	; (84f44 <vStartGenericQueueTasks+0xe4>)
   84efe:	2282      	movs	r2, #130	; 0x82
   84f00:	68bb      	ldr	r3, [r7, #8]
   84f02:	4c08      	ldr	r4, [pc, #32]	; (84f24 <vStartGenericQueueTasks+0xc4>)
   84f04:	47a0      	blx	r4
	#ifdef _WINDOWS_
	{
		xTaskCreate( vInterruptMutexTask, "IntMu", configMINIMAL_STACK_SIZE, NULL, genqMUTEX_MEDIUM_PRIORITY, NULL );
	}
	#endif /* __WINDOWS__ */
}
   84f06:	3714      	adds	r7, #20
   84f08:	46bd      	mov	sp, r7
   84f0a:	bd90      	pop	{r4, r7, pc}
   84f0c:	000819a5 	.word	0x000819a5
   84f10:	2007a6c4 	.word	0x2007a6c4
   84f14:	0008139d 	.word	0x0008139d
   84f18:	00081919 	.word	0x00081919
   84f1c:	00084f49 	.word	0x00084f49
   84f20:	00086754 	.word	0x00086754
   84f24:	000823d5 	.word	0x000823d5
   84f28:	000854dd 	.word	0x000854dd
   84f2c:	0008675c 	.word	0x0008675c
   84f30:	2007a6c0 	.word	0x2007a6c0
   84f34:	00085539 	.word	0x00085539
   84f38:	00086764 	.word	0x00086764
   84f3c:	2007a6bc 	.word	0x2007a6bc
   84f40:	0008555d 	.word	0x0008555d
   84f44:	0008676c 	.word	0x0008676c

00084f48 <prvSendFrontAndBackTest>:
/*-----------------------------------------------------------*/

static void prvSendFrontAndBackTest( void *pvParameters )
{
   84f48:	b590      	push	{r4, r7, lr}
   84f4a:	b087      	sub	sp, #28
   84f4c:	af00      	add	r7, sp, #0
   84f4e:	6078      	str	r0, [r7, #4]

		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	xQueue = ( QueueHandle_t ) pvParameters;
   84f50:	687b      	ldr	r3, [r7, #4]
   84f52:	617b      	str	r3, [r7, #20]
	{
		/* The queue is empty, so sending an item to the back of the queue
		should have the same efect as sending it to the front of the queue.

		First send to the front and check everything is as expected. */
		xQueueSendToFront( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
   84f54:	6978      	ldr	r0, [r7, #20]
   84f56:	498c      	ldr	r1, [pc, #560]	; (85188 <prvSendFrontAndBackTest+0x240>)
   84f58:	2200      	movs	r2, #0
   84f5a:	2301      	movs	r3, #1
   84f5c:	4c8b      	ldr	r4, [pc, #556]	; (8518c <prvSendFrontAndBackTest+0x244>)
   84f5e:	47a0      	blx	r4

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
   84f60:	6978      	ldr	r0, [r7, #20]
   84f62:	4b8b      	ldr	r3, [pc, #556]	; (85190 <prvSendFrontAndBackTest+0x248>)
   84f64:	4798      	blx	r3
   84f66:	4603      	mov	r3, r0
   84f68:	2b01      	cmp	r3, #1
   84f6a:	d002      	beq.n	84f72 <prvSendFrontAndBackTest+0x2a>
		{
			xErrorDetected = pdTRUE;
   84f6c:	4b89      	ldr	r3, [pc, #548]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   84f6e:	2201      	movs	r2, #1
   84f70:	601a      	str	r2, [r3, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
   84f72:	f107 0310 	add.w	r3, r7, #16
   84f76:	6978      	ldr	r0, [r7, #20]
   84f78:	4619      	mov	r1, r3
   84f7a:	2200      	movs	r2, #0
   84f7c:	2300      	movs	r3, #0
   84f7e:	4c86      	ldr	r4, [pc, #536]	; (85198 <prvSendFrontAndBackTest+0x250>)
   84f80:	47a0      	blx	r4
   84f82:	4603      	mov	r3, r0
   84f84:	2b01      	cmp	r3, #1
   84f86:	d002      	beq.n	84f8e <prvSendFrontAndBackTest+0x46>
		{
			xErrorDetected = pdTRUE;
   84f88:	4b82      	ldr	r3, [pc, #520]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   84f8a:	2201      	movs	r2, #1
   84f8c:	601a      	str	r2, [r3, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
   84f8e:	4b7e      	ldr	r3, [pc, #504]	; (85188 <prvSendFrontAndBackTest+0x240>)
   84f90:	681a      	ldr	r2, [r3, #0]
   84f92:	693b      	ldr	r3, [r7, #16]
   84f94:	429a      	cmp	r2, r3
   84f96:	d002      	beq.n	84f9e <prvSendFrontAndBackTest+0x56>
		{
			xErrorDetected = pdTRUE;
   84f98:	4b7e      	ldr	r3, [pc, #504]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   84f9a:	2201      	movs	r2, #1
   84f9c:	601a      	str	r2, [r3, #0]
		}

		/* Then do the same, sending the data to the back, checking everything
		is as expected. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
   84f9e:	6978      	ldr	r0, [r7, #20]
   84fa0:	4b7b      	ldr	r3, [pc, #492]	; (85190 <prvSendFrontAndBackTest+0x248>)
   84fa2:	4798      	blx	r3
   84fa4:	4603      	mov	r3, r0
   84fa6:	2b00      	cmp	r3, #0
   84fa8:	d002      	beq.n	84fb0 <prvSendFrontAndBackTest+0x68>
		{
			xErrorDetected = pdTRUE;
   84faa:	4b7a      	ldr	r3, [pc, #488]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   84fac:	2201      	movs	r2, #1
   84fae:	601a      	str	r2, [r3, #0]
		}

		xQueueSendToBack( xQueue, ( void * ) &ulLoopCounter, genqNO_BLOCK );
   84fb0:	6978      	ldr	r0, [r7, #20]
   84fb2:	4975      	ldr	r1, [pc, #468]	; (85188 <prvSendFrontAndBackTest+0x240>)
   84fb4:	2200      	movs	r2, #0
   84fb6:	2300      	movs	r3, #0
   84fb8:	4c74      	ldr	r4, [pc, #464]	; (8518c <prvSendFrontAndBackTest+0x244>)
   84fba:	47a0      	blx	r4

		if( uxQueueMessagesWaiting( xQueue ) != 1 )
   84fbc:	6978      	ldr	r0, [r7, #20]
   84fbe:	4b74      	ldr	r3, [pc, #464]	; (85190 <prvSendFrontAndBackTest+0x248>)
   84fc0:	4798      	blx	r3
   84fc2:	4603      	mov	r3, r0
   84fc4:	2b01      	cmp	r3, #1
   84fc6:	d002      	beq.n	84fce <prvSendFrontAndBackTest+0x86>
		{
			xErrorDetected = pdTRUE;
   84fc8:	4b72      	ldr	r3, [pc, #456]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   84fca:	2201      	movs	r2, #1
   84fcc:	601a      	str	r2, [r3, #0]
		}

		if( xQueueReceive( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
   84fce:	f107 0310 	add.w	r3, r7, #16
   84fd2:	6978      	ldr	r0, [r7, #20]
   84fd4:	4619      	mov	r1, r3
   84fd6:	2200      	movs	r2, #0
   84fd8:	2300      	movs	r3, #0
   84fda:	4c6f      	ldr	r4, [pc, #444]	; (85198 <prvSendFrontAndBackTest+0x250>)
   84fdc:	47a0      	blx	r4
   84fde:	4603      	mov	r3, r0
   84fe0:	2b01      	cmp	r3, #1
   84fe2:	d002      	beq.n	84fea <prvSendFrontAndBackTest+0xa2>
		{
			xErrorDetected = pdTRUE;
   84fe4:	4b6b      	ldr	r3, [pc, #428]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   84fe6:	2201      	movs	r2, #1
   84fe8:	601a      	str	r2, [r3, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
   84fea:	6978      	ldr	r0, [r7, #20]
   84fec:	4b68      	ldr	r3, [pc, #416]	; (85190 <prvSendFrontAndBackTest+0x248>)
   84fee:	4798      	blx	r3
   84ff0:	4603      	mov	r3, r0
   84ff2:	2b00      	cmp	r3, #0
   84ff4:	d002      	beq.n	84ffc <prvSendFrontAndBackTest+0xb4>
		{
			xErrorDetected = pdTRUE;
   84ff6:	4b67      	ldr	r3, [pc, #412]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   84ff8:	2201      	movs	r2, #1
   84ffa:	601a      	str	r2, [r3, #0]
		}

		/* The data we sent to the queue should equal the data we just received
		from the queue. */
		if( ulLoopCounter != ulData )
   84ffc:	4b62      	ldr	r3, [pc, #392]	; (85188 <prvSendFrontAndBackTest+0x240>)
   84ffe:	681a      	ldr	r2, [r3, #0]
   85000:	693b      	ldr	r3, [r7, #16]
   85002:	429a      	cmp	r2, r3
   85004:	d002      	beq.n	8500c <prvSendFrontAndBackTest+0xc4>
		{
			xErrorDetected = pdTRUE;
   85006:	4b63      	ldr	r3, [pc, #396]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   85008:	2201      	movs	r2, #1
   8500a:	601a      	str	r2, [r3, #0]
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
   8500c:	2302      	movs	r3, #2
   8500e:	613b      	str	r3, [r7, #16]
   85010:	e00a      	b.n	85028 <prvSendFrontAndBackTest+0xe0>
		{
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
   85012:	f107 0310 	add.w	r3, r7, #16
   85016:	6978      	ldr	r0, [r7, #20]
   85018:	4619      	mov	r1, r3
   8501a:	2200      	movs	r2, #0
   8501c:	2300      	movs	r3, #0
   8501e:	4c5b      	ldr	r4, [pc, #364]	; (8518c <prvSendFrontAndBackTest+0x244>)
   85020:	47a0      	blx	r4
		#endif



		/* Place 2, 3, 4 into the queue, adding items to the back of the queue. */
		for( ulData = 2; ulData < 5; ulData++ )
   85022:	693b      	ldr	r3, [r7, #16]
   85024:	3301      	adds	r3, #1
   85026:	613b      	str	r3, [r7, #16]
   85028:	693b      	ldr	r3, [r7, #16]
   8502a:	2b04      	cmp	r3, #4
   8502c:	d9f1      	bls.n	85012 <prvSendFrontAndBackTest+0xca>
			xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK );
		}

		/* Now the order in the queue should be 2, 3, 4, with 2 being the first
		thing to be read out.  Now add 1 then 0 to the front of the queue. */
		if( uxQueueMessagesWaiting( xQueue ) != 3 )
   8502e:	6978      	ldr	r0, [r7, #20]
   85030:	4b57      	ldr	r3, [pc, #348]	; (85190 <prvSendFrontAndBackTest+0x248>)
   85032:	4798      	blx	r3
   85034:	4603      	mov	r3, r0
   85036:	2b03      	cmp	r3, #3
   85038:	d002      	beq.n	85040 <prvSendFrontAndBackTest+0xf8>
		{
			xErrorDetected = pdTRUE;
   8503a:	4b56      	ldr	r3, [pc, #344]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   8503c:	2201      	movs	r2, #1
   8503e:	601a      	str	r2, [r3, #0]
		}
		ulData = 1;
   85040:	2301      	movs	r3, #1
   85042:	613b      	str	r3, [r7, #16]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
   85044:	f107 0310 	add.w	r3, r7, #16
   85048:	6978      	ldr	r0, [r7, #20]
   8504a:	4619      	mov	r1, r3
   8504c:	2200      	movs	r2, #0
   8504e:	2301      	movs	r3, #1
   85050:	4c4e      	ldr	r4, [pc, #312]	; (8518c <prvSendFrontAndBackTest+0x244>)
   85052:	47a0      	blx	r4
		ulData = 0;
   85054:	2300      	movs	r3, #0
   85056:	613b      	str	r3, [r7, #16]
		xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK );
   85058:	f107 0310 	add.w	r3, r7, #16
   8505c:	6978      	ldr	r0, [r7, #20]
   8505e:	4619      	mov	r1, r3
   85060:	2200      	movs	r2, #0
   85062:	2301      	movs	r3, #1
   85064:	4c49      	ldr	r4, [pc, #292]	; (8518c <prvSendFrontAndBackTest+0x244>)
   85066:	47a0      	blx	r4

		/* Now the queue should be full, and when we read the data out we
		should receive 0, 1, 2, 3, 4. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
   85068:	6978      	ldr	r0, [r7, #20]
   8506a:	4b49      	ldr	r3, [pc, #292]	; (85190 <prvSendFrontAndBackTest+0x248>)
   8506c:	4798      	blx	r3
   8506e:	4603      	mov	r3, r0
   85070:	2b05      	cmp	r3, #5
   85072:	d002      	beq.n	8507a <prvSendFrontAndBackTest+0x132>
		{
			xErrorDetected = pdTRUE;
   85074:	4b47      	ldr	r3, [pc, #284]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   85076:	2201      	movs	r2, #1
   85078:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
   8507a:	f107 0310 	add.w	r3, r7, #16
   8507e:	6978      	ldr	r0, [r7, #20]
   85080:	4619      	mov	r1, r3
   85082:	2200      	movs	r2, #0
   85084:	2301      	movs	r3, #1
   85086:	4c41      	ldr	r4, [pc, #260]	; (8518c <prvSendFrontAndBackTest+0x244>)
   85088:	47a0      	blx	r4
   8508a:	4603      	mov	r3, r0
   8508c:	2b00      	cmp	r3, #0
   8508e:	d002      	beq.n	85096 <prvSendFrontAndBackTest+0x14e>
		{
			xErrorDetected = pdTRUE;
   85090:	4b40      	ldr	r3, [pc, #256]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   85092:	2201      	movs	r2, #1
   85094:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
   85096:	f107 0310 	add.w	r3, r7, #16
   8509a:	6978      	ldr	r0, [r7, #20]
   8509c:	4619      	mov	r1, r3
   8509e:	2200      	movs	r2, #0
   850a0:	2300      	movs	r3, #0
   850a2:	4c3a      	ldr	r4, [pc, #232]	; (8518c <prvSendFrontAndBackTest+0x244>)
   850a4:	47a0      	blx	r4
   850a6:	4603      	mov	r3, r0
   850a8:	2b00      	cmp	r3, #0
   850aa:	d002      	beq.n	850b2 <prvSendFrontAndBackTest+0x16a>
		{
			xErrorDetected = pdTRUE;
   850ac:	4b39      	ldr	r3, [pc, #228]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   850ae:	2201      	movs	r2, #1
   850b0:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
   850b2:	2300      	movs	r3, #0
   850b4:	613b      	str	r3, [r7, #16]
   850b6:	e02f      	b.n	85118 <prvSendFrontAndBackTest+0x1d0>
		{
			/* Try peeking the data first. */
			if( xQueuePeek( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
   850b8:	f107 030c 	add.w	r3, r7, #12
   850bc:	6978      	ldr	r0, [r7, #20]
   850be:	4619      	mov	r1, r3
   850c0:	2200      	movs	r2, #0
   850c2:	2301      	movs	r3, #1
   850c4:	4c34      	ldr	r4, [pc, #208]	; (85198 <prvSendFrontAndBackTest+0x250>)
   850c6:	47a0      	blx	r4
   850c8:	4603      	mov	r3, r0
   850ca:	2b01      	cmp	r3, #1
   850cc:	d002      	beq.n	850d4 <prvSendFrontAndBackTest+0x18c>
			{
				xErrorDetected = pdTRUE;
   850ce:	4b31      	ldr	r3, [pc, #196]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   850d0:	2201      	movs	r2, #1
   850d2:	601a      	str	r2, [r3, #0]
			}

			if( ulData != ulData2 )
   850d4:	693a      	ldr	r2, [r7, #16]
   850d6:	68fb      	ldr	r3, [r7, #12]
   850d8:	429a      	cmp	r2, r3
   850da:	d002      	beq.n	850e2 <prvSendFrontAndBackTest+0x19a>
			{
				xErrorDetected = pdTRUE;
   850dc:	4b2d      	ldr	r3, [pc, #180]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   850de:	2201      	movs	r2, #1
   850e0:	601a      	str	r2, [r3, #0]
			}


			/* Now try receiving the data for real.  The value should be the
			same.  Clobber the value first so we know we really received it. */
			ulData2 = ~ulData2;
   850e2:	68fb      	ldr	r3, [r7, #12]
   850e4:	43db      	mvns	r3, r3
   850e6:	60fb      	str	r3, [r7, #12]
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
   850e8:	f107 030c 	add.w	r3, r7, #12
   850ec:	6978      	ldr	r0, [r7, #20]
   850ee:	4619      	mov	r1, r3
   850f0:	2200      	movs	r2, #0
   850f2:	2300      	movs	r3, #0
   850f4:	4c28      	ldr	r4, [pc, #160]	; (85198 <prvSendFrontAndBackTest+0x250>)
   850f6:	47a0      	blx	r4
   850f8:	4603      	mov	r3, r0
   850fa:	2b01      	cmp	r3, #1
   850fc:	d002      	beq.n	85104 <prvSendFrontAndBackTest+0x1bc>
			{
				xErrorDetected = pdTRUE;
   850fe:	4b25      	ldr	r3, [pc, #148]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   85100:	2201      	movs	r2, #1
   85102:	601a      	str	r2, [r3, #0]
			}

			if( ulData != ulData2 )
   85104:	693a      	ldr	r2, [r7, #16]
   85106:	68fb      	ldr	r3, [r7, #12]
   85108:	429a      	cmp	r2, r3
   8510a:	d002      	beq.n	85112 <prvSendFrontAndBackTest+0x1ca>
			{
				xErrorDetected = pdTRUE;
   8510c:	4b21      	ldr	r3, [pc, #132]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   8510e:	2201      	movs	r2, #1
   85110:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 0; ulData < genqQUEUE_LENGTH; ulData++ )
   85112:	693b      	ldr	r3, [r7, #16]
   85114:	3301      	adds	r3, #1
   85116:	613b      	str	r3, [r7, #16]
   85118:	693b      	ldr	r3, [r7, #16]
   8511a:	2b04      	cmp	r3, #4
   8511c:	d9cc      	bls.n	850b8 <prvSendFrontAndBackTest+0x170>
				xErrorDetected = pdTRUE;
			}
		}

		/* The queue should now be empty again. */
		if( uxQueueMessagesWaiting( xQueue ) != 0 )
   8511e:	6978      	ldr	r0, [r7, #20]
   85120:	4b1b      	ldr	r3, [pc, #108]	; (85190 <prvSendFrontAndBackTest+0x248>)
   85122:	4798      	blx	r3
   85124:	4603      	mov	r3, r0
   85126:	2b00      	cmp	r3, #0
   85128:	d002      	beq.n	85130 <prvSendFrontAndBackTest+0x1e8>
		{
			xErrorDetected = pdTRUE;
   8512a:	4b1a      	ldr	r3, [pc, #104]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   8512c:	2201      	movs	r2, #1
   8512e:	601a      	str	r2, [r3, #0]
			taskYIELD();
		#endif


		/* Our queue is empty once more, add 10, 11 to the back. */
		ulData = 10;
   85130:	230a      	movs	r3, #10
   85132:	613b      	str	r3, [r7, #16]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
   85134:	f107 0310 	add.w	r3, r7, #16
   85138:	6978      	ldr	r0, [r7, #20]
   8513a:	4619      	mov	r1, r3
   8513c:	2200      	movs	r2, #0
   8513e:	2300      	movs	r3, #0
   85140:	4c12      	ldr	r4, [pc, #72]	; (8518c <prvSendFrontAndBackTest+0x244>)
   85142:	47a0      	blx	r4
   85144:	4603      	mov	r3, r0
   85146:	2b01      	cmp	r3, #1
   85148:	d002      	beq.n	85150 <prvSendFrontAndBackTest+0x208>
		{
			xErrorDetected = pdTRUE;
   8514a:	4b12      	ldr	r3, [pc, #72]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   8514c:	2201      	movs	r2, #1
   8514e:	601a      	str	r2, [r3, #0]
		}
		ulData = 11;
   85150:	230b      	movs	r3, #11
   85152:	613b      	str	r3, [r7, #16]
		if( xQueueSend( xQueue, &ulData, genqNO_BLOCK ) != pdPASS )
   85154:	f107 0310 	add.w	r3, r7, #16
   85158:	6978      	ldr	r0, [r7, #20]
   8515a:	4619      	mov	r1, r3
   8515c:	2200      	movs	r2, #0
   8515e:	2300      	movs	r3, #0
   85160:	4c0a      	ldr	r4, [pc, #40]	; (8518c <prvSendFrontAndBackTest+0x244>)
   85162:	47a0      	blx	r4
   85164:	4603      	mov	r3, r0
   85166:	2b01      	cmp	r3, #1
   85168:	d002      	beq.n	85170 <prvSendFrontAndBackTest+0x228>
		{
			xErrorDetected = pdTRUE;
   8516a:	4b0a      	ldr	r3, [pc, #40]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   8516c:	2201      	movs	r2, #1
   8516e:	601a      	str	r2, [r3, #0]
		}

		if( uxQueueMessagesWaiting( xQueue ) != 2 )
   85170:	6978      	ldr	r0, [r7, #20]
   85172:	4b07      	ldr	r3, [pc, #28]	; (85190 <prvSendFrontAndBackTest+0x248>)
   85174:	4798      	blx	r3
   85176:	4603      	mov	r3, r0
   85178:	2b02      	cmp	r3, #2
   8517a:	d002      	beq.n	85182 <prvSendFrontAndBackTest+0x23a>
		{
			xErrorDetected = pdTRUE;
   8517c:	4b05      	ldr	r3, [pc, #20]	; (85194 <prvSendFrontAndBackTest+0x24c>)
   8517e:	2201      	movs	r2, #1
   85180:	601a      	str	r2, [r3, #0]
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
   85182:	2309      	movs	r3, #9
   85184:	613b      	str	r3, [r7, #16]
   85186:	e01a      	b.n	851be <prvSendFrontAndBackTest+0x276>
   85188:	2007a6b0 	.word	0x2007a6b0
   8518c:	00081b69 	.word	0x00081b69
   85190:	000820ed 	.word	0x000820ed
   85194:	2007a6ac 	.word	0x2007a6ac
   85198:	00081e29 	.word	0x00081e29
		{
			if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != pdPASS )
   8519c:	f107 0310 	add.w	r3, r7, #16
   851a0:	6978      	ldr	r0, [r7, #20]
   851a2:	4619      	mov	r1, r3
   851a4:	2200      	movs	r2, #0
   851a6:	2301      	movs	r3, #1
   851a8:	4c2f      	ldr	r4, [pc, #188]	; (85268 <prvSendFrontAndBackTest+0x320>)
   851aa:	47a0      	blx	r4
   851ac:	4603      	mov	r3, r0
   851ae:	2b01      	cmp	r3, #1
   851b0:	d002      	beq.n	851b8 <prvSendFrontAndBackTest+0x270>
			{
				xErrorDetected = pdTRUE;
   851b2:	4b2e      	ldr	r3, [pc, #184]	; (8526c <prvSendFrontAndBackTest+0x324>)
   851b4:	2201      	movs	r2, #1
   851b6:	601a      	str	r2, [r3, #0]
			xErrorDetected = pdTRUE;
		}

		/* Now we should have 10, 11 in the queue.  Add 7, 8, 9 to the
		front. */
		for( ulData = 9; ulData >= 7; ulData-- )
   851b8:	693b      	ldr	r3, [r7, #16]
   851ba:	3b01      	subs	r3, #1
   851bc:	613b      	str	r3, [r7, #16]
   851be:	693b      	ldr	r3, [r7, #16]
   851c0:	2b06      	cmp	r3, #6
   851c2:	d8eb      	bhi.n	8519c <prvSendFrontAndBackTest+0x254>
			}
		}

		/* Now check that the queue is full, and that receiving data provides
		the expected sequence of 7, 8, 9, 10, 11. */
		if( uxQueueMessagesWaiting( xQueue ) != 5 )
   851c4:	6978      	ldr	r0, [r7, #20]
   851c6:	4b2a      	ldr	r3, [pc, #168]	; (85270 <prvSendFrontAndBackTest+0x328>)
   851c8:	4798      	blx	r3
   851ca:	4603      	mov	r3, r0
   851cc:	2b05      	cmp	r3, #5
   851ce:	d002      	beq.n	851d6 <prvSendFrontAndBackTest+0x28e>
		{
			xErrorDetected = pdTRUE;
   851d0:	4b26      	ldr	r3, [pc, #152]	; (8526c <prvSendFrontAndBackTest+0x324>)
   851d2:	2201      	movs	r2, #1
   851d4:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToFront( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
   851d6:	f107 0310 	add.w	r3, r7, #16
   851da:	6978      	ldr	r0, [r7, #20]
   851dc:	4619      	mov	r1, r3
   851de:	2200      	movs	r2, #0
   851e0:	2301      	movs	r3, #1
   851e2:	4c21      	ldr	r4, [pc, #132]	; (85268 <prvSendFrontAndBackTest+0x320>)
   851e4:	47a0      	blx	r4
   851e6:	4603      	mov	r3, r0
   851e8:	2b00      	cmp	r3, #0
   851ea:	d002      	beq.n	851f2 <prvSendFrontAndBackTest+0x2aa>
		{
			xErrorDetected = pdTRUE;
   851ec:	4b1f      	ldr	r3, [pc, #124]	; (8526c <prvSendFrontAndBackTest+0x324>)
   851ee:	2201      	movs	r2, #1
   851f0:	601a      	str	r2, [r3, #0]
		}

		if( xQueueSendToBack( xQueue, ( void * ) &ulData, genqNO_BLOCK ) != errQUEUE_FULL )
   851f2:	f107 0310 	add.w	r3, r7, #16
   851f6:	6978      	ldr	r0, [r7, #20]
   851f8:	4619      	mov	r1, r3
   851fa:	2200      	movs	r2, #0
   851fc:	2300      	movs	r3, #0
   851fe:	4c1a      	ldr	r4, [pc, #104]	; (85268 <prvSendFrontAndBackTest+0x320>)
   85200:	47a0      	blx	r4
   85202:	4603      	mov	r3, r0
   85204:	2b00      	cmp	r3, #0
   85206:	d002      	beq.n	8520e <prvSendFrontAndBackTest+0x2c6>
		{
			xErrorDetected = pdTRUE;
   85208:	4b18      	ldr	r3, [pc, #96]	; (8526c <prvSendFrontAndBackTest+0x324>)
   8520a:	2201      	movs	r2, #1
   8520c:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
   8520e:	2307      	movs	r3, #7
   85210:	613b      	str	r3, [r7, #16]
   85212:	e017      	b.n	85244 <prvSendFrontAndBackTest+0x2fc>
		{
			if( xQueueReceive( xQueue, &ulData2, genqNO_BLOCK ) != pdPASS )
   85214:	f107 030c 	add.w	r3, r7, #12
   85218:	6978      	ldr	r0, [r7, #20]
   8521a:	4619      	mov	r1, r3
   8521c:	2200      	movs	r2, #0
   8521e:	2300      	movs	r3, #0
   85220:	4c14      	ldr	r4, [pc, #80]	; (85274 <prvSendFrontAndBackTest+0x32c>)
   85222:	47a0      	blx	r4
   85224:	4603      	mov	r3, r0
   85226:	2b01      	cmp	r3, #1
   85228:	d002      	beq.n	85230 <prvSendFrontAndBackTest+0x2e8>
			{
				xErrorDetected = pdTRUE;
   8522a:	4b10      	ldr	r3, [pc, #64]	; (8526c <prvSendFrontAndBackTest+0x324>)
   8522c:	2201      	movs	r2, #1
   8522e:	601a      	str	r2, [r3, #0]
			}

			if( ulData != ulData2 )
   85230:	693a      	ldr	r2, [r7, #16]
   85232:	68fb      	ldr	r3, [r7, #12]
   85234:	429a      	cmp	r2, r3
   85236:	d002      	beq.n	8523e <prvSendFrontAndBackTest+0x2f6>
			{
				xErrorDetected = pdTRUE;
   85238:	4b0c      	ldr	r3, [pc, #48]	; (8526c <prvSendFrontAndBackTest+0x324>)
   8523a:	2201      	movs	r2, #1
   8523c:	601a      	str	r2, [r3, #0]
		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif

		/* Check the data we read out is in the expected order. */
		for( ulData = 7; ulData < ( 7 + genqQUEUE_LENGTH ); ulData++ )
   8523e:	693b      	ldr	r3, [r7, #16]
   85240:	3301      	adds	r3, #1
   85242:	613b      	str	r3, [r7, #16]
   85244:	693b      	ldr	r3, [r7, #16]
   85246:	2b0b      	cmp	r3, #11
   85248:	d9e4      	bls.n	85214 <prvSendFrontAndBackTest+0x2cc>
			{
				xErrorDetected = pdTRUE;
			}
		}

		if( uxQueueMessagesWaiting( xQueue ) != 0 )
   8524a:	6978      	ldr	r0, [r7, #20]
   8524c:	4b08      	ldr	r3, [pc, #32]	; (85270 <prvSendFrontAndBackTest+0x328>)
   8524e:	4798      	blx	r3
   85250:	4603      	mov	r3, r0
   85252:	2b00      	cmp	r3, #0
   85254:	d002      	beq.n	8525c <prvSendFrontAndBackTest+0x314>
		{
			xErrorDetected = pdTRUE;
   85256:	4b05      	ldr	r3, [pc, #20]	; (8526c <prvSendFrontAndBackTest+0x324>)
   85258:	2201      	movs	r2, #1
   8525a:	601a      	str	r2, [r3, #0]
		}

		ulLoopCounter++;
   8525c:	4b06      	ldr	r3, [pc, #24]	; (85278 <prvSendFrontAndBackTest+0x330>)
   8525e:	681b      	ldr	r3, [r3, #0]
   85260:	1c5a      	adds	r2, r3, #1
   85262:	4b05      	ldr	r3, [pc, #20]	; (85278 <prvSendFrontAndBackTest+0x330>)
   85264:	601a      	str	r2, [r3, #0]
	}
   85266:	e675      	b.n	84f54 <prvSendFrontAndBackTest+0xc>
   85268:	00081b69 	.word	0x00081b69
   8526c:	2007a6ac 	.word	0x2007a6ac
   85270:	000820ed 	.word	0x000820ed
   85274:	00081e29 	.word	0x00081e29
   85278:	2007a6b0 	.word	0x2007a6b0

0008527c <prvTakeTwoMutexesReturnInDifferentOrder>:
}
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInDifferentOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
   8527c:	b590      	push	{r4, r7, lr}
   8527e:	b083      	sub	sp, #12
   85280:	af00      	add	r7, sp, #0
   85282:	6078      	str	r0, [r7, #4]
   85284:	6039      	str	r1, [r7, #0]
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
   85286:	6878      	ldr	r0, [r7, #4]
   85288:	2100      	movs	r1, #0
   8528a:	2200      	movs	r2, #0
   8528c:	2300      	movs	r3, #0
   8528e:	4c43      	ldr	r4, [pc, #268]	; (8539c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
   85290:	47a0      	blx	r4
   85292:	4603      	mov	r3, r0
   85294:	2b01      	cmp	r3, #1
   85296:	d002      	beq.n	8529e <prvTakeTwoMutexesReturnInDifferentOrder+0x22>
	{
		xErrorDetected = pdTRUE;
   85298:	4b41      	ldr	r3, [pc, #260]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   8529a:	2201      	movs	r2, #1
   8529c:	601a      	str	r2, [r3, #0]
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
   8529e:	4b41      	ldr	r3, [pc, #260]	; (853a4 <prvTakeTwoMutexesReturnInDifferentOrder+0x128>)
   852a0:	2200      	movs	r2, #0
   852a2:	601a      	str	r2, [r3, #0]

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
   852a4:	2000      	movs	r0, #0
   852a6:	4b40      	ldr	r3, [pc, #256]	; (853a8 <prvTakeTwoMutexesReturnInDifferentOrder+0x12c>)
   852a8:	4798      	blx	r3
   852aa:	4603      	mov	r3, r0
   852ac:	2b00      	cmp	r3, #0
   852ae:	d002      	beq.n	852b6 <prvTakeTwoMutexesReturnInDifferentOrder+0x3a>
	{
		xErrorDetected = pdTRUE;
   852b0:	4b3b      	ldr	r3, [pc, #236]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   852b2:	2201      	movs	r2, #1
   852b4:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
   852b6:	4b3d      	ldr	r3, [pc, #244]	; (853ac <prvTakeTwoMutexesReturnInDifferentOrder+0x130>)
   852b8:	681b      	ldr	r3, [r3, #0]
   852ba:	4618      	mov	r0, r3
   852bc:	4b3c      	ldr	r3, [pc, #240]	; (853b0 <prvTakeTwoMutexesReturnInDifferentOrder+0x134>)
   852be:	4798      	blx	r3
	}
	#endif /* INCLUDE_eTaskGetState */

	/* The priority of the high priority task should now have been inherited
	as by now it will have attempted to get the mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
   852c0:	2000      	movs	r0, #0
   852c2:	4b39      	ldr	r3, [pc, #228]	; (853a8 <prvTakeTwoMutexesReturnInDifferentOrder+0x12c>)
   852c4:	4798      	blx	r3
   852c6:	4603      	mov	r3, r0
   852c8:	2b03      	cmp	r3, #3
   852ca:	d002      	beq.n	852d2 <prvTakeTwoMutexesReturnInDifferentOrder+0x56>
	{
		xErrorDetected = pdTRUE;
   852cc:	4b34      	ldr	r3, [pc, #208]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   852ce:	2201      	movs	r2, #1
   852d0:	601a      	str	r2, [r3, #0]
	}

	/* Attempt to set the priority of this task to the test priority -
	between the	idle priority and the medium/high test priorities, but the
	actual priority should remain at the high priority. */
	vTaskPrioritySet( NULL, genqMUTEX_TEST_PRIORITY );
   852d2:	2000      	movs	r0, #0
   852d4:	2101      	movs	r1, #1
   852d6:	4b37      	ldr	r3, [pc, #220]	; (853b4 <prvTakeTwoMutexesReturnInDifferentOrder+0x138>)
   852d8:	4798      	blx	r3
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
   852da:	2000      	movs	r0, #0
   852dc:	4b32      	ldr	r3, [pc, #200]	; (853a8 <prvTakeTwoMutexesReturnInDifferentOrder+0x12c>)
   852de:	4798      	blx	r3
   852e0:	4603      	mov	r3, r0
   852e2:	2b03      	cmp	r3, #3
   852e4:	d002      	beq.n	852ec <prvTakeTwoMutexesReturnInDifferentOrder+0x70>
	{
		xErrorDetected = pdTRUE;
   852e6:	4b2e      	ldr	r3, [pc, #184]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   852e8:	2201      	movs	r2, #1
   852ea:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
   852ec:	4b32      	ldr	r3, [pc, #200]	; (853b8 <prvTakeTwoMutexesReturnInDifferentOrder+0x13c>)
   852ee:	681b      	ldr	r3, [r3, #0]
   852f0:	4618      	mov	r0, r3
   852f2:	4b2f      	ldr	r3, [pc, #188]	; (853b0 <prvTakeTwoMutexesReturnInDifferentOrder+0x134>)
   852f4:	4798      	blx	r3

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
   852f6:	4b2b      	ldr	r3, [pc, #172]	; (853a4 <prvTakeTwoMutexesReturnInDifferentOrder+0x128>)
   852f8:	681b      	ldr	r3, [r3, #0]
   852fa:	2b00      	cmp	r3, #0
   852fc:	d002      	beq.n	85304 <prvTakeTwoMutexesReturnInDifferentOrder+0x88>
	{
		xErrorDetected = pdTRUE;
   852fe:	4b28      	ldr	r3, [pc, #160]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   85300:	2201      	movs	r2, #1
   85302:	601a      	str	r2, [r3, #0]
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, genqNO_BLOCK ) != pdPASS )
   85304:	6838      	ldr	r0, [r7, #0]
   85306:	2100      	movs	r1, #0
   85308:	2200      	movs	r2, #0
   8530a:	2300      	movs	r3, #0
   8530c:	4c23      	ldr	r4, [pc, #140]	; (8539c <prvTakeTwoMutexesReturnInDifferentOrder+0x120>)
   8530e:	47a0      	blx	r4
   85310:	4603      	mov	r3, r0
   85312:	2b01      	cmp	r3, #1
   85314:	d002      	beq.n	8531c <prvTakeTwoMutexesReturnInDifferentOrder+0xa0>
	{
		xErrorDetected = pdTRUE;
   85316:	4b22      	ldr	r3, [pc, #136]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   85318:	2201      	movs	r2, #1
   8531a:	601a      	str	r2, [r3, #0]
	yet be disinherited because the local mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
   8531c:	6878      	ldr	r0, [r7, #4]
   8531e:	2100      	movs	r1, #0
   85320:	2200      	movs	r2, #0
   85322:	2300      	movs	r3, #0
   85324:	4c25      	ldr	r4, [pc, #148]	; (853bc <prvTakeTwoMutexesReturnInDifferentOrder+0x140>)
   85326:	47a0      	blx	r4
   85328:	4603      	mov	r3, r0
   8532a:	2b01      	cmp	r3, #1
   8532c:	d002      	beq.n	85334 <prvTakeTwoMutexesReturnInDifferentOrder+0xb8>
	{
		xErrorDetected = pdTRUE;
   8532e:	4b1c      	ldr	r3, [pc, #112]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   85330:	2201      	movs	r2, #1
   85332:	601a      	str	r2, [r3, #0]
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
   85334:	4b1b      	ldr	r3, [pc, #108]	; (853a4 <prvTakeTwoMutexesReturnInDifferentOrder+0x128>)
   85336:	681b      	ldr	r3, [r3, #0]
   85338:	2b00      	cmp	r3, #0
   8533a:	d002      	beq.n	85342 <prvTakeTwoMutexesReturnInDifferentOrder+0xc6>
	{
		xErrorDetected = pdTRUE;
   8533c:	4b18      	ldr	r3, [pc, #96]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   8533e:	2201      	movs	r2, #1
   85340:	601a      	str	r2, [r3, #0]
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
   85342:	2000      	movs	r0, #0
   85344:	4b18      	ldr	r3, [pc, #96]	; (853a8 <prvTakeTwoMutexesReturnInDifferentOrder+0x12c>)
   85346:	4798      	blx	r3
   85348:	4603      	mov	r3, r0
   8534a:	2b03      	cmp	r3, #3
   8534c:	d002      	beq.n	85354 <prvTakeTwoMutexesReturnInDifferentOrder+0xd8>
	{
		xErrorDetected = pdTRUE;
   8534e:	4b14      	ldr	r3, [pc, #80]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   85350:	2201      	movs	r2, #1
   85352:	601a      	str	r2, [r3, #0]
	This time the priority of this task should be disinherited back to the
	priority to which it was set while the mutex was held.  This means
	the medium priority task should execute and increment the guarded
	variable.   When this task next	runs both the high and medium priority
	tasks will have been suspended again. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
   85354:	6838      	ldr	r0, [r7, #0]
   85356:	2100      	movs	r1, #0
   85358:	2200      	movs	r2, #0
   8535a:	2300      	movs	r3, #0
   8535c:	4c17      	ldr	r4, [pc, #92]	; (853bc <prvTakeTwoMutexesReturnInDifferentOrder+0x140>)
   8535e:	47a0      	blx	r4
   85360:	4603      	mov	r3, r0
   85362:	2b01      	cmp	r3, #1
   85364:	d002      	beq.n	8536c <prvTakeTwoMutexesReturnInDifferentOrder+0xf0>
	{
		xErrorDetected = pdTRUE;
   85366:	4b0e      	ldr	r3, [pc, #56]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   85368:	2201      	movs	r2, #1
   8536a:	601a      	str	r2, [r3, #0]
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
   8536c:	4b0d      	ldr	r3, [pc, #52]	; (853a4 <prvTakeTwoMutexesReturnInDifferentOrder+0x128>)
   8536e:	681b      	ldr	r3, [r3, #0]
   85370:	2b01      	cmp	r3, #1
   85372:	d002      	beq.n	8537a <prvTakeTwoMutexesReturnInDifferentOrder+0xfe>
	{
		xErrorDetected = pdTRUE;
   85374:	4b0a      	ldr	r3, [pc, #40]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   85376:	2201      	movs	r2, #1
   85378:	601a      	str	r2, [r3, #0]
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_TEST_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_TEST_PRIORITY )
   8537a:	2000      	movs	r0, #0
   8537c:	4b0a      	ldr	r3, [pc, #40]	; (853a8 <prvTakeTwoMutexesReturnInDifferentOrder+0x12c>)
   8537e:	4798      	blx	r3
   85380:	4603      	mov	r3, r0
   85382:	2b01      	cmp	r3, #1
   85384:	d002      	beq.n	8538c <prvTakeTwoMutexesReturnInDifferentOrder+0x110>
	{
		xErrorDetected = pdTRUE;
   85386:	4b06      	ldr	r3, [pc, #24]	; (853a0 <prvTakeTwoMutexesReturnInDifferentOrder+0x124>)
   85388:	2201      	movs	r2, #1
   8538a:	601a      	str	r2, [r3, #0]
	}

	/* Set the priority of this task back to its original value, ready for
	the next loop around this test. */
	vTaskPrioritySet( NULL, genqMUTEX_LOW_PRIORITY );
   8538c:	2000      	movs	r0, #0
   8538e:	2100      	movs	r1, #0
   85390:	4b08      	ldr	r3, [pc, #32]	; (853b4 <prvTakeTwoMutexesReturnInDifferentOrder+0x138>)
   85392:	4798      	blx	r3
}
   85394:	370c      	adds	r7, #12
   85396:	46bd      	mov	sp, r7
   85398:	bd90      	pop	{r4, r7, pc}
   8539a:	bf00      	nop
   8539c:	00081e29 	.word	0x00081e29
   853a0:	2007a6ac 	.word	0x2007a6ac
   853a4:	2007a6b8 	.word	0x2007a6b8
   853a8:	000826f5 	.word	0x000826f5
   853ac:	2007a6bc 	.word	0x2007a6bc
   853b0:	000829fd 	.word	0x000829fd
   853b4:	00082731 	.word	0x00082731
   853b8:	2007a6c0 	.word	0x2007a6c0
   853bc:	00081b69 	.word	0x00081b69

000853c0 <prvTakeTwoMutexesReturnInSameOrder>:
/*-----------------------------------------------------------*/

static void prvTakeTwoMutexesReturnInSameOrder( SemaphoreHandle_t xMutex, SemaphoreHandle_t xLocalMutex )
{
   853c0:	b590      	push	{r4, r7, lr}
   853c2:	b083      	sub	sp, #12
   853c4:	af00      	add	r7, sp, #0
   853c6:	6078      	str	r0, [r7, #4]
   853c8:	6039      	str	r1, [r7, #0]
	/* Take the mutex.  It should be available now. */
	if( xSemaphoreTake( xMutex, genqNO_BLOCK ) != pdPASS )
   853ca:	6878      	ldr	r0, [r7, #4]
   853cc:	2100      	movs	r1, #0
   853ce:	2200      	movs	r2, #0
   853d0:	2300      	movs	r3, #0
   853d2:	4c3a      	ldr	r4, [pc, #232]	; (854bc <prvTakeTwoMutexesReturnInSameOrder+0xfc>)
   853d4:	47a0      	blx	r4
   853d6:	4603      	mov	r3, r0
   853d8:	2b01      	cmp	r3, #1
   853da:	d002      	beq.n	853e2 <prvTakeTwoMutexesReturnInSameOrder+0x22>
	{
		xErrorDetected = pdTRUE;
   853dc:	4b38      	ldr	r3, [pc, #224]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   853de:	2201      	movs	r2, #1
   853e0:	601a      	str	r2, [r3, #0]
	}

	/* Set the guarded variable to a known start value. */
	ulGuardedVariable = 0;
   853e2:	4b38      	ldr	r3, [pc, #224]	; (854c4 <prvTakeTwoMutexesReturnInSameOrder+0x104>)
   853e4:	2200      	movs	r2, #0
   853e6:	601a      	str	r2, [r3, #0]

	/* This task's priority should be as per that assigned when the task was
	created. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
   853e8:	2000      	movs	r0, #0
   853ea:	4b37      	ldr	r3, [pc, #220]	; (854c8 <prvTakeTwoMutexesReturnInSameOrder+0x108>)
   853ec:	4798      	blx	r3
   853ee:	4603      	mov	r3, r0
   853f0:	2b00      	cmp	r3, #0
   853f2:	d002      	beq.n	853fa <prvTakeTwoMutexesReturnInSameOrder+0x3a>
	{
		xErrorDetected = pdTRUE;
   853f4:	4b32      	ldr	r3, [pc, #200]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   853f6:	2201      	movs	r2, #1
   853f8:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the high priority task.  This will attempt to take the
	mutex, and block when it finds it cannot obtain it. */
	vTaskResume( xHighPriorityMutexTask );
   853fa:	4b34      	ldr	r3, [pc, #208]	; (854cc <prvTakeTwoMutexesReturnInSameOrder+0x10c>)
   853fc:	681b      	ldr	r3, [r3, #0]
   853fe:	4618      	mov	r0, r3
   85400:	4b33      	ldr	r3, [pc, #204]	; (854d0 <prvTakeTwoMutexesReturnInSameOrder+0x110>)
   85402:	4798      	blx	r3
	}
	#endif /* INCLUDE_eTaskGetState */

	/* The priority of the high priority task should now have been inherited
	as by now it will have attempted to get the mutex. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
   85404:	2000      	movs	r0, #0
   85406:	4b30      	ldr	r3, [pc, #192]	; (854c8 <prvTakeTwoMutexesReturnInSameOrder+0x108>)
   85408:	4798      	blx	r3
   8540a:	4603      	mov	r3, r0
   8540c:	2b03      	cmp	r3, #3
   8540e:	d002      	beq.n	85416 <prvTakeTwoMutexesReturnInSameOrder+0x56>
	{
		xErrorDetected = pdTRUE;
   85410:	4b2b      	ldr	r3, [pc, #172]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   85412:	2201      	movs	r2, #1
   85414:	601a      	str	r2, [r3, #0]
	}

	/* Now unsuspend the medium priority task.  This should not run as the
	inherited priority of this task is above that of the medium priority
	task. */
	vTaskResume( xMediumPriorityMutexTask );
   85416:	4b2f      	ldr	r3, [pc, #188]	; (854d4 <prvTakeTwoMutexesReturnInSameOrder+0x114>)
   85418:	681b      	ldr	r3, [r3, #0]
   8541a:	4618      	mov	r0, r3
   8541c:	4b2c      	ldr	r3, [pc, #176]	; (854d0 <prvTakeTwoMutexesReturnInSameOrder+0x110>)
   8541e:	4798      	blx	r3

	/* If the medium priority task did run then it will have incremented the
	guarded variable. */
	if( ulGuardedVariable != 0 )
   85420:	4b28      	ldr	r3, [pc, #160]	; (854c4 <prvTakeTwoMutexesReturnInSameOrder+0x104>)
   85422:	681b      	ldr	r3, [r3, #0]
   85424:	2b00      	cmp	r3, #0
   85426:	d002      	beq.n	8542e <prvTakeTwoMutexesReturnInSameOrder+0x6e>
	{
		xErrorDetected = pdTRUE;
   85428:	4b25      	ldr	r3, [pc, #148]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   8542a:	2201      	movs	r2, #1
   8542c:	601a      	str	r2, [r3, #0]
	}

	/* Take the local mutex too, so two mutexes are now held. */
	if( xSemaphoreTake( xLocalMutex, genqNO_BLOCK ) != pdPASS )
   8542e:	6838      	ldr	r0, [r7, #0]
   85430:	2100      	movs	r1, #0
   85432:	2200      	movs	r2, #0
   85434:	2300      	movs	r3, #0
   85436:	4c21      	ldr	r4, [pc, #132]	; (854bc <prvTakeTwoMutexesReturnInSameOrder+0xfc>)
   85438:	47a0      	blx	r4
   8543a:	4603      	mov	r3, r0
   8543c:	2b01      	cmp	r3, #1
   8543e:	d002      	beq.n	85446 <prvTakeTwoMutexesReturnInSameOrder+0x86>
	{
		xErrorDetected = pdTRUE;
   85440:	4b1f      	ldr	r3, [pc, #124]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   85442:	2201      	movs	r2, #1
   85444:	601a      	str	r2, [r3, #0]
	not	yet be disinherited because the shared mutex is still held.  This is a
	simplification to allow FreeRTOS to be integrated with middleware that
	attempts to hold multiple mutexes without bloating the code with complex
	algorithms.  It is possible that the high priority mutex task will
	execute as it shares a priority with this task. */
	if( xSemaphoreGive( xLocalMutex ) != pdPASS )
   85446:	6838      	ldr	r0, [r7, #0]
   85448:	2100      	movs	r1, #0
   8544a:	2200      	movs	r2, #0
   8544c:	2300      	movs	r3, #0
   8544e:	4c22      	ldr	r4, [pc, #136]	; (854d8 <prvTakeTwoMutexesReturnInSameOrder+0x118>)
   85450:	47a0      	blx	r4
   85452:	4603      	mov	r3, r0
   85454:	2b01      	cmp	r3, #1
   85456:	d002      	beq.n	8545e <prvTakeTwoMutexesReturnInSameOrder+0x9e>
	{
		xErrorDetected = pdTRUE;
   85458:	4b19      	ldr	r3, [pc, #100]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   8545a:	2201      	movs	r2, #1
   8545c:	601a      	str	r2, [r3, #0]
	#endif

	/* The guarded variable is only incremented by the medium priority task,
	which still should not have executed as this task should remain at the
	higher priority, ensure this is the case. */
	if( ulGuardedVariable != 0 )
   8545e:	4b19      	ldr	r3, [pc, #100]	; (854c4 <prvTakeTwoMutexesReturnInSameOrder+0x104>)
   85460:	681b      	ldr	r3, [r3, #0]
   85462:	2b00      	cmp	r3, #0
   85464:	d002      	beq.n	8546c <prvTakeTwoMutexesReturnInSameOrder+0xac>
	{
		xErrorDetected = pdTRUE;
   85466:	4b16      	ldr	r3, [pc, #88]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   85468:	2201      	movs	r2, #1
   8546a:	601a      	str	r2, [r3, #0]
	}

	if( uxTaskPriorityGet( NULL ) != genqMUTEX_HIGH_PRIORITY )
   8546c:	2000      	movs	r0, #0
   8546e:	4b16      	ldr	r3, [pc, #88]	; (854c8 <prvTakeTwoMutexesReturnInSameOrder+0x108>)
   85470:	4798      	blx	r3
   85472:	4603      	mov	r3, r0
   85474:	2b03      	cmp	r3, #3
   85476:	d002      	beq.n	8547e <prvTakeTwoMutexesReturnInSameOrder+0xbe>
	{
		xErrorDetected = pdTRUE;
   85478:	4b11      	ldr	r3, [pc, #68]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   8547a:	2201      	movs	r2, #1
   8547c:	601a      	str	r2, [r3, #0]
	/* Now also give back the shared mutex, taking the held count back to 0.
	This time the priority of this task should be disinherited back to the
	priority at which it was created.  This means the medium priority task
	should execute and increment the guarded variable.  When this task next runs
	both the high and medium priority tasks will have been suspended again. */
	if( xSemaphoreGive( xMutex ) != pdPASS )
   8547e:	6878      	ldr	r0, [r7, #4]
   85480:	2100      	movs	r1, #0
   85482:	2200      	movs	r2, #0
   85484:	2300      	movs	r3, #0
   85486:	4c14      	ldr	r4, [pc, #80]	; (854d8 <prvTakeTwoMutexesReturnInSameOrder+0x118>)
   85488:	47a0      	blx	r4
   8548a:	4603      	mov	r3, r0
   8548c:	2b01      	cmp	r3, #1
   8548e:	d002      	beq.n	85496 <prvTakeTwoMutexesReturnInSameOrder+0xd6>
	{
		xErrorDetected = pdTRUE;
   85490:	4b0b      	ldr	r3, [pc, #44]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   85492:	2201      	movs	r2, #1
   85494:	601a      	str	r2, [r3, #0]
	#if configUSE_PREEMPTION == 0
		taskYIELD();
	#endif

	/* Check the guarded variable did indeed increment... */
	if( ulGuardedVariable != 1 )
   85496:	4b0b      	ldr	r3, [pc, #44]	; (854c4 <prvTakeTwoMutexesReturnInSameOrder+0x104>)
   85498:	681b      	ldr	r3, [r3, #0]
   8549a:	2b01      	cmp	r3, #1
   8549c:	d002      	beq.n	854a4 <prvTakeTwoMutexesReturnInSameOrder+0xe4>
	{
		xErrorDetected = pdTRUE;
   8549e:	4b08      	ldr	r3, [pc, #32]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   854a0:	2201      	movs	r2, #1
   854a2:	601a      	str	r2, [r3, #0]
	}

	/* ... and that the priority of this task has been disinherited to
	genqMUTEX_LOW_PRIORITY. */
	if( uxTaskPriorityGet( NULL ) != genqMUTEX_LOW_PRIORITY )
   854a4:	2000      	movs	r0, #0
   854a6:	4b08      	ldr	r3, [pc, #32]	; (854c8 <prvTakeTwoMutexesReturnInSameOrder+0x108>)
   854a8:	4798      	blx	r3
   854aa:	4603      	mov	r3, r0
   854ac:	2b00      	cmp	r3, #0
   854ae:	d002      	beq.n	854b6 <prvTakeTwoMutexesReturnInSameOrder+0xf6>
	{
		xErrorDetected = pdTRUE;
   854b0:	4b03      	ldr	r3, [pc, #12]	; (854c0 <prvTakeTwoMutexesReturnInSameOrder+0x100>)
   854b2:	2201      	movs	r2, #1
   854b4:	601a      	str	r2, [r3, #0]
	}
}
   854b6:	370c      	adds	r7, #12
   854b8:	46bd      	mov	sp, r7
   854ba:	bd90      	pop	{r4, r7, pc}
   854bc:	00081e29 	.word	0x00081e29
   854c0:	2007a6ac 	.word	0x2007a6ac
   854c4:	2007a6b8 	.word	0x2007a6b8
   854c8:	000826f5 	.word	0x000826f5
   854cc:	2007a6bc 	.word	0x2007a6bc
   854d0:	000829fd 	.word	0x000829fd
   854d4:	2007a6c0 	.word	0x2007a6c0
   854d8:	00081b69 	.word	0x00081b69

000854dc <prvLowPriorityMutexTask>:
/*-----------------------------------------------------------*/

static void prvLowPriorityMutexTask( void *pvParameters )
{
   854dc:	b580      	push	{r7, lr}
   854de:	b084      	sub	sp, #16
   854e0:	af00      	add	r7, sp, #0
   854e2:	6078      	str	r0, [r7, #4]
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters, xLocalMutex;
   854e4:	687b      	ldr	r3, [r7, #4]
   854e6:	60fb      	str	r3, [r7, #12]
		/* Queue a message for printing to say the task has started. */
		vPrintDisplayMessage( &pcTaskStartMsg );
	#endif

	/* The local mutex is used to check the 'mutexs held' count. */
	xLocalMutex = xSemaphoreCreateMutex();
   854e8:	2001      	movs	r0, #1
   854ea:	4b0e      	ldr	r3, [pc, #56]	; (85524 <prvLowPriorityMutexTask+0x48>)
   854ec:	4798      	blx	r3
   854ee:	60b8      	str	r0, [r7, #8]
	configASSERT( xLocalMutex );
   854f0:	68bb      	ldr	r3, [r7, #8]
   854f2:	2b00      	cmp	r3, #0
   854f4:	d102      	bne.n	854fc <prvLowPriorityMutexTask+0x20>
   854f6:	4b0c      	ldr	r3, [pc, #48]	; (85528 <prvLowPriorityMutexTask+0x4c>)
   854f8:	4798      	blx	r3
   854fa:	e7fe      	b.n	854fa <prvLowPriorityMutexTask+0x1e>
	for( ;; )
	{
		/* The first tests exercise the priority inheritance when two mutexes
		are taken then returned in a different order to which they were
		taken. */
		prvTakeTwoMutexesReturnInDifferentOrder( xMutex, xLocalMutex );
   854fc:	68f8      	ldr	r0, [r7, #12]
   854fe:	68b9      	ldr	r1, [r7, #8]
   85500:	4b0a      	ldr	r3, [pc, #40]	; (8552c <prvLowPriorityMutexTask+0x50>)
   85502:	4798      	blx	r3

		/* Just to show this task is still running. */
		ulLoopCounter2++;
   85504:	4b0a      	ldr	r3, [pc, #40]	; (85530 <prvLowPriorityMutexTask+0x54>)
   85506:	681b      	ldr	r3, [r3, #0]
   85508:	1c5a      	adds	r2, r3, #1
   8550a:	4b09      	ldr	r3, [pc, #36]	; (85530 <prvLowPriorityMutexTask+0x54>)
   8550c:	601a      	str	r2, [r3, #0]
			taskYIELD();
		#endif

		/* The second tests exercise the priority inheritance when two mutexes
		are taken then returned in the same order in which they were taken. */
		prvTakeTwoMutexesReturnInSameOrder( xMutex, xLocalMutex );
   8550e:	68f8      	ldr	r0, [r7, #12]
   85510:	68b9      	ldr	r1, [r7, #8]
   85512:	4b08      	ldr	r3, [pc, #32]	; (85534 <prvLowPriorityMutexTask+0x58>)
   85514:	4798      	blx	r3

		/* Just to show this task is still running. */
		ulLoopCounter2++;
   85516:	4b06      	ldr	r3, [pc, #24]	; (85530 <prvLowPriorityMutexTask+0x54>)
   85518:	681b      	ldr	r3, [r3, #0]
   8551a:	1c5a      	adds	r2, r3, #1
   8551c:	4b04      	ldr	r3, [pc, #16]	; (85530 <prvLowPriorityMutexTask+0x54>)
   8551e:	601a      	str	r2, [r3, #0]

		#if configUSE_PREEMPTION == 0
			taskYIELD();
		#endif
	}
   85520:	e7ec      	b.n	854fc <prvLowPriorityMutexTask+0x20>
   85522:	bf00      	nop
   85524:	000819a5 	.word	0x000819a5
   85528:	0008139d 	.word	0x0008139d
   8552c:	0008527d 	.word	0x0008527d
   85530:	2007a6b4 	.word	0x2007a6b4
   85534:	000853c1 	.word	0x000853c1

00085538 <prvMediumPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvMediumPriorityMutexTask( void *pvParameters )
{
   85538:	b580      	push	{r7, lr}
   8553a:	b082      	sub	sp, #8
   8553c:	af00      	add	r7, sp, #0
   8553e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* The medium priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
   85540:	2000      	movs	r0, #0
   85542:	4b04      	ldr	r3, [pc, #16]	; (85554 <prvMediumPriorityMutexTask+0x1c>)
   85544:	4798      	blx	r3

		/* When this task unsuspends all it does is increment the guarded
		variable, this is so the low priority task knows that it has
		executed. */
		ulGuardedVariable++;
   85546:	4b04      	ldr	r3, [pc, #16]	; (85558 <prvMediumPriorityMutexTask+0x20>)
   85548:	681b      	ldr	r3, [r3, #0]
   8554a:	1c5a      	adds	r2, r3, #1
   8554c:	4b02      	ldr	r3, [pc, #8]	; (85558 <prvMediumPriorityMutexTask+0x20>)
   8554e:	601a      	str	r2, [r3, #0]
	}
   85550:	e7f6      	b.n	85540 <prvMediumPriorityMutexTask+0x8>
   85552:	bf00      	nop
   85554:	00082885 	.word	0x00082885
   85558:	2007a6b8 	.word	0x2007a6b8

0008555c <prvHighPriorityMutexTask>:
}
/*-----------------------------------------------------------*/

static void prvHighPriorityMutexTask( void *pvParameters )
{
   8555c:	b590      	push	{r4, r7, lr}
   8555e:	b085      	sub	sp, #20
   85560:	af00      	add	r7, sp, #0
   85562:	6078      	str	r0, [r7, #4]
SemaphoreHandle_t xMutex = ( SemaphoreHandle_t ) pvParameters;
   85564:	687b      	ldr	r3, [r7, #4]
   85566:	60fb      	str	r3, [r7, #12]

	for( ;; )
	{
		/* The high priority task starts by suspending itself.  The low
		priority task will unsuspend this task when required. */
		vTaskSuspend( NULL );
   85568:	2000      	movs	r0, #0
   8556a:	4b0e      	ldr	r3, [pc, #56]	; (855a4 <prvHighPriorityMutexTask+0x48>)
   8556c:	4798      	blx	r3

		/* When this task unsuspends all it does is attempt to obtain
		the mutex.  It should find the mutex is not available so a
		block time is specified. */
		if( xSemaphoreTake( xMutex, portMAX_DELAY ) != pdPASS )
   8556e:	68f8      	ldr	r0, [r7, #12]
   85570:	2100      	movs	r1, #0
   85572:	f04f 32ff 	mov.w	r2, #4294967295
   85576:	2300      	movs	r3, #0
   85578:	4c0b      	ldr	r4, [pc, #44]	; (855a8 <prvHighPriorityMutexTask+0x4c>)
   8557a:	47a0      	blx	r4
   8557c:	4603      	mov	r3, r0
   8557e:	2b01      	cmp	r3, #1
   85580:	d002      	beq.n	85588 <prvHighPriorityMutexTask+0x2c>
		{
			xErrorDetected = pdTRUE;
   85582:	4b0a      	ldr	r3, [pc, #40]	; (855ac <prvHighPriorityMutexTask+0x50>)
   85584:	2201      	movs	r2, #1
   85586:	601a      	str	r2, [r3, #0]
		}

		/* When the mutex is eventually obtained it is just given back before
		returning to suspend ready for the next cycle. */
		if( xSemaphoreGive( xMutex ) != pdPASS )
   85588:	68f8      	ldr	r0, [r7, #12]
   8558a:	2100      	movs	r1, #0
   8558c:	2200      	movs	r2, #0
   8558e:	2300      	movs	r3, #0
   85590:	4c07      	ldr	r4, [pc, #28]	; (855b0 <prvHighPriorityMutexTask+0x54>)
   85592:	47a0      	blx	r4
   85594:	4603      	mov	r3, r0
   85596:	2b01      	cmp	r3, #1
   85598:	d003      	beq.n	855a2 <prvHighPriorityMutexTask+0x46>
		{
			xErrorDetected = pdTRUE;
   8559a:	4b04      	ldr	r3, [pc, #16]	; (855ac <prvHighPriorityMutexTask+0x50>)
   8559c:	2201      	movs	r2, #1
   8559e:	601a      	str	r2, [r3, #0]
		}
	}
   855a0:	e7e2      	b.n	85568 <prvHighPriorityMutexTask+0xc>
   855a2:	e7e1      	b.n	85568 <prvHighPriorityMutexTask+0xc>
   855a4:	00082885 	.word	0x00082885
   855a8:	00081e29 	.word	0x00081e29
   855ac:	2007a6ac 	.word	0x2007a6ac
   855b0:	00081b69 	.word	0x00081b69

000855b4 <xAreGenericQueueTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreGenericQueueTasksStillRunning( void )
{
   855b4:	b480      	push	{r7}
   855b6:	af00      	add	r7, sp, #0
static uint32_t ulLastLoopCounter = 0, ulLastLoopCounter2 = 0;

	/* If the demo task is still running then we expect the loop counters to
	have incremented since this function was last called. */
	if( ulLastLoopCounter == ulLoopCounter )
   855b8:	4b12      	ldr	r3, [pc, #72]	; (85604 <xAreGenericQueueTasksStillRunning+0x50>)
   855ba:	681a      	ldr	r2, [r3, #0]
   855bc:	4b12      	ldr	r3, [pc, #72]	; (85608 <xAreGenericQueueTasksStillRunning+0x54>)
   855be:	681b      	ldr	r3, [r3, #0]
   855c0:	429a      	cmp	r2, r3
   855c2:	d102      	bne.n	855ca <xAreGenericQueueTasksStillRunning+0x16>
	{
		xErrorDetected = pdTRUE;
   855c4:	4b11      	ldr	r3, [pc, #68]	; (8560c <xAreGenericQueueTasksStillRunning+0x58>)
   855c6:	2201      	movs	r2, #1
   855c8:	601a      	str	r2, [r3, #0]
	}

	if( ulLastLoopCounter2 == ulLoopCounter2 )
   855ca:	4b11      	ldr	r3, [pc, #68]	; (85610 <xAreGenericQueueTasksStillRunning+0x5c>)
   855cc:	681a      	ldr	r2, [r3, #0]
   855ce:	4b11      	ldr	r3, [pc, #68]	; (85614 <xAreGenericQueueTasksStillRunning+0x60>)
   855d0:	681b      	ldr	r3, [r3, #0]
   855d2:	429a      	cmp	r2, r3
   855d4:	d102      	bne.n	855dc <xAreGenericQueueTasksStillRunning+0x28>
	{
		xErrorDetected = pdTRUE;
   855d6:	4b0d      	ldr	r3, [pc, #52]	; (8560c <xAreGenericQueueTasksStillRunning+0x58>)
   855d8:	2201      	movs	r2, #1
   855da:	601a      	str	r2, [r3, #0]
	}

	ulLastLoopCounter = ulLoopCounter;
   855dc:	4b0a      	ldr	r3, [pc, #40]	; (85608 <xAreGenericQueueTasksStillRunning+0x54>)
   855de:	681a      	ldr	r2, [r3, #0]
   855e0:	4b08      	ldr	r3, [pc, #32]	; (85604 <xAreGenericQueueTasksStillRunning+0x50>)
   855e2:	601a      	str	r2, [r3, #0]
	ulLastLoopCounter2 = ulLoopCounter2;
   855e4:	4b0b      	ldr	r3, [pc, #44]	; (85614 <xAreGenericQueueTasksStillRunning+0x60>)
   855e6:	681a      	ldr	r2, [r3, #0]
   855e8:	4b09      	ldr	r3, [pc, #36]	; (85610 <xAreGenericQueueTasksStillRunning+0x5c>)
   855ea:	601a      	str	r2, [r3, #0]

	/* Errors detected in the task itself will have latched xErrorDetected
	to true. */

	return ( BaseType_t ) !xErrorDetected;
   855ec:	4b07      	ldr	r3, [pc, #28]	; (8560c <xAreGenericQueueTasksStillRunning+0x58>)
   855ee:	681b      	ldr	r3, [r3, #0]
   855f0:	2b00      	cmp	r3, #0
   855f2:	bf14      	ite	ne
   855f4:	2300      	movne	r3, #0
   855f6:	2301      	moveq	r3, #1
   855f8:	b2db      	uxtb	r3, r3
}
   855fa:	4618      	mov	r0, r3
   855fc:	46bd      	mov	sp, r7
   855fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   85602:	4770      	bx	lr
   85604:	2007a6c8 	.word	0x2007a6c8
   85608:	2007a6b0 	.word	0x2007a6b0
   8560c:	2007a6ac 	.word	0x2007a6ac
   85610:	2007a6cc 	.word	0x2007a6cc
   85614:	2007a6b4 	.word	0x2007a6b4

00085618 <vStartIntegerMathTasks>:
static volatile BaseType_t xTaskCheck[ intgNUMBER_OF_TASKS ] = { ( BaseType_t ) pdFALSE };

/*-----------------------------------------------------------*/

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
   85618:	b590      	push	{r4, r7, lr}
   8561a:	b089      	sub	sp, #36	; 0x24
   8561c:	af04      	add	r7, sp, #16
   8561e:	6078      	str	r0, [r7, #4]
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
   85620:	2300      	movs	r3, #0
   85622:	81fb      	strh	r3, [r7, #14]
   85624:	e014      	b.n	85650 <vStartIntegerMathTasks+0x38>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
   85626:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   8562a:	009a      	lsls	r2, r3, #2
   8562c:	4b0c      	ldr	r3, [pc, #48]	; (85660 <vStartIntegerMathTasks+0x48>)
   8562e:	4413      	add	r3, r2
   85630:	687a      	ldr	r2, [r7, #4]
   85632:	9200      	str	r2, [sp, #0]
   85634:	2200      	movs	r2, #0
   85636:	9201      	str	r2, [sp, #4]
   85638:	2200      	movs	r2, #0
   8563a:	9202      	str	r2, [sp, #8]
   8563c:	2200      	movs	r2, #0
   8563e:	9203      	str	r2, [sp, #12]
   85640:	4808      	ldr	r0, [pc, #32]	; (85664 <vStartIntegerMathTasks+0x4c>)
   85642:	4909      	ldr	r1, [pc, #36]	; (85668 <vStartIntegerMathTasks+0x50>)
   85644:	2282      	movs	r2, #130	; 0x82
   85646:	4c09      	ldr	r4, [pc, #36]	; (8566c <vStartIntegerMathTasks+0x54>)
   85648:	47a0      	blx	r4

void vStartIntegerMathTasks( UBaseType_t uxPriority )
{
short sTask;

	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
   8564a:	89fb      	ldrh	r3, [r7, #14]
   8564c:	3301      	adds	r3, #1
   8564e:	81fb      	strh	r3, [r7, #14]
   85650:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   85654:	2b00      	cmp	r3, #0
   85656:	dde6      	ble.n	85626 <vStartIntegerMathTasks+0xe>
	{
		xTaskCreate( vCompeteingIntMathTask, "IntMath", intgSTACK_SIZE, ( void * ) &( xTaskCheck[ sTask ] ), uxPriority, ( TaskHandle_t * ) NULL );
	}
}
   85658:	3714      	adds	r7, #20
   8565a:	46bd      	mov	sp, r7
   8565c:	bd90      	pop	{r4, r7, pc}
   8565e:	bf00      	nop
   85660:	2007a6d0 	.word	0x2007a6d0
   85664:	00085671 	.word	0x00085671
   85668:	00086774 	.word	0x00086774
   8566c:	000823d5 	.word	0x000823d5

00085670 <vCompeteingIntMathTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vCompeteingIntMathTask, pvParameters )
{
   85670:	b580      	push	{r7, lr}
   85672:	b086      	sub	sp, #24
   85674:	af00      	add	r7, sp, #0
   85676:	6078      	str	r0, [r7, #4]
/* These variables are all effectively set to constants so they are volatile to
ensure the compiler does not just get rid of them. */
volatile long lValue;
short sError = pdFALSE;
   85678:	2300      	movs	r3, #0
   8567a:	82fb      	strh	r3, [r7, #22]
volatile BaseType_t *pxTaskHasExecuted;

	/* Set a pointer to the variable we are going to set to true each
	iteration.  This is also a good test of the parameter passing mechanism
	within each port. */
	pxTaskHasExecuted = ( volatile BaseType_t * ) pvParameters;
   8567c:	687b      	ldr	r3, [r7, #4]
   8567e:	613b      	str	r3, [r7, #16]
	/* Keep performing a calculation and checking the result against a constant. */
	for( ;; )
	{
		/* Perform the calculation.  This will store partial value in
		registers, resulting in a good test of the context switch mechanism. */
		lValue = intgCONST1;
   85680:	237b      	movs	r3, #123	; 0x7b
   85682:	60fb      	str	r3, [r7, #12]
		lValue += intgCONST2;
   85684:	68fb      	ldr	r3, [r7, #12]
   85686:	f503 3365 	add.w	r3, r3, #234496	; 0x39400
   8568a:	3347      	adds	r3, #71	; 0x47
   8568c:	60fb      	str	r3, [r7, #12]
			taskYIELD();
		}
		#endif

		/* Finish off the calculation. */
		lValue *= intgCONST3;
   8568e:	68fb      	ldr	r3, [r7, #12]
   85690:	461a      	mov	r2, r3
   85692:	009b      	lsls	r3, r3, #2
   85694:	1ad3      	subs	r3, r2, r3
   85696:	60fb      	str	r3, [r7, #12]
		lValue /= intgCONST4;
   85698:	68fb      	ldr	r3, [r7, #12]
   8569a:	4a0d      	ldr	r2, [pc, #52]	; (856d0 <vCompeteingIntMathTask+0x60>)
   8569c:	fb82 1203 	smull	r1, r2, r2, r3
   856a0:	441a      	add	r2, r3
   856a2:	1092      	asrs	r2, r2, #2
   856a4:	17db      	asrs	r3, r3, #31
   856a6:	1ad3      	subs	r3, r2, r3
   856a8:	60fb      	str	r3, [r7, #12]

		/* If the calculation is found to be incorrect we stop setting the 
		TaskHasExecuted variable so the check task can see an error has 
		occurred. */
		if( lValue != intgEXPECTED_ANSWER ) /*lint !e774 volatile used to prevent this being optimised out. */
   856aa:	68fa      	ldr	r2, [r7, #12]
   856ac:	4b09      	ldr	r3, [pc, #36]	; (856d4 <vCompeteingIntMathTask+0x64>)
   856ae:	429a      	cmp	r2, r3
   856b0:	d001      	beq.n	856b6 <vCompeteingIntMathTask+0x46>
		{
			sError = pdTRUE;
   856b2:	2301      	movs	r3, #1
   856b4:	82fb      	strh	r3, [r7, #22]
		}

		if( sError == pdFALSE )
   856b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   856ba:	2b00      	cmp	r3, #0
   856bc:	d107      	bne.n	856ce <vCompeteingIntMathTask+0x5e>
		{
			/* We have not encountered any errors, so set the flag that show
			we are still executing.  This will be periodically cleared by
			the check task. */
			portENTER_CRITICAL();
   856be:	4b06      	ldr	r3, [pc, #24]	; (856d8 <vCompeteingIntMathTask+0x68>)
   856c0:	4798      	blx	r3
				*pxTaskHasExecuted = pdTRUE;
   856c2:	693b      	ldr	r3, [r7, #16]
   856c4:	2201      	movs	r2, #1
   856c6:	601a      	str	r2, [r3, #0]
			portEXIT_CRITICAL();
   856c8:	4b04      	ldr	r3, [pc, #16]	; (856dc <vCompeteingIntMathTask+0x6c>)
   856ca:	4798      	blx	r3
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
   856cc:	e7d8      	b.n	85680 <vCompeteingIntMathTask+0x10>
   856ce:	e7d7      	b.n	85680 <vCompeteingIntMathTask+0x10>
   856d0:	92492493 	.word	0x92492493
   856d4:	fffe771b 	.word	0xfffe771b
   856d8:	00081321 	.word	0x00081321
   856dc:	00081365 	.word	0x00081365

000856e0 <xAreIntegerMathsTaskStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreIntegerMathsTaskStillRunning( void )
{
   856e0:	b480      	push	{r7}
   856e2:	b083      	sub	sp, #12
   856e4:	af00      	add	r7, sp, #0
BaseType_t xReturn = pdTRUE;
   856e6:	2301      	movs	r3, #1
   856e8:	607b      	str	r3, [r7, #4]
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
   856ea:	2300      	movs	r3, #0
   856ec:	807b      	strh	r3, [r7, #2]
   856ee:	e011      	b.n	85714 <xAreIntegerMathsTaskStillRunning+0x34>
	{
		if( xTaskCheck[ sTask ] == pdFALSE )
   856f0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   856f4:	4b0d      	ldr	r3, [pc, #52]	; (8572c <xAreIntegerMathsTaskStillRunning+0x4c>)
   856f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   856fa:	2b00      	cmp	r3, #0
   856fc:	d101      	bne.n	85702 <xAreIntegerMathsTaskStillRunning+0x22>
		{
			/* The check has not incremented so an error exists. */
			xReturn = pdFALSE;
   856fe:	2300      	movs	r3, #0
   85700:	607b      	str	r3, [r7, #4]
		}

		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
   85702:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   85706:	4b09      	ldr	r3, [pc, #36]	; (8572c <xAreIntegerMathsTaskStillRunning+0x4c>)
   85708:	2100      	movs	r1, #0
   8570a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
BaseType_t xReturn = pdTRUE;
short sTask;

	/* Check the maths tasks are still running by ensuring their check variables 
	are still being set to true. */
	for( sTask = 0; sTask < intgNUMBER_OF_TASKS; sTask++ )
   8570e:	887b      	ldrh	r3, [r7, #2]
   85710:	3301      	adds	r3, #1
   85712:	807b      	strh	r3, [r7, #2]
   85714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
   85718:	2b00      	cmp	r3, #0
   8571a:	dde9      	ble.n	856f0 <xAreIntegerMathsTaskStillRunning+0x10>
		/* Reset the check variable so we can tell if it has been set by
		the next time around. */
		xTaskCheck[ sTask ] = pdFALSE;
	}

	return xReturn;
   8571c:	687b      	ldr	r3, [r7, #4]
}
   8571e:	4618      	mov	r0, r3
   85720:	370c      	adds	r7, #12
   85722:	46bd      	mov	sp, r7
   85724:	f85d 7b04 	ldr.w	r7, [sp], #4
   85728:	4770      	bx	lr
   8572a:	bf00      	nop
   8572c:	2007a6d0 	.word	0x2007a6d0

00085730 <vStartPolledQueueTasks>:
static volatile BaseType_t xPollingConsumerCount = pollqINITIAL_VALUE, xPollingProducerCount = pollqINITIAL_VALUE;

/*-----------------------------------------------------------*/

void vStartPolledQueueTasks( UBaseType_t uxPriority )
{
   85730:	b590      	push	{r4, r7, lr}
   85732:	b087      	sub	sp, #28
   85734:	af04      	add	r7, sp, #16
   85736:	6078      	str	r0, [r7, #4]
static QueueHandle_t xPolledQueue;

	/* Create the queue used by the producer and consumer. */
	xPolledQueue = xQueueCreate( pollqQUEUE_SIZE, ( UBaseType_t ) sizeof( uint16_t ) );
   85738:	200a      	movs	r0, #10
   8573a:	2102      	movs	r1, #2
   8573c:	2200      	movs	r2, #0
   8573e:	4b12      	ldr	r3, [pc, #72]	; (85788 <vStartPolledQueueTasks+0x58>)
   85740:	4798      	blx	r3
   85742:	4602      	mov	r2, r0
   85744:	4b11      	ldr	r3, [pc, #68]	; (8578c <vStartPolledQueueTasks+0x5c>)
   85746:	601a      	str	r2, [r3, #0]
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( xPolledQueue, "Poll_Test_Queue" );

	/* Spawn the producer and consumer. */
	xTaskCreate( vPolledQueueConsumer, "QConsNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
   85748:	687b      	ldr	r3, [r7, #4]
   8574a:	9300      	str	r3, [sp, #0]
   8574c:	2300      	movs	r3, #0
   8574e:	9301      	str	r3, [sp, #4]
   85750:	2300      	movs	r3, #0
   85752:	9302      	str	r3, [sp, #8]
   85754:	2300      	movs	r3, #0
   85756:	9303      	str	r3, [sp, #12]
   85758:	480d      	ldr	r0, [pc, #52]	; (85790 <vStartPolledQueueTasks+0x60>)
   8575a:	490e      	ldr	r1, [pc, #56]	; (85794 <vStartPolledQueueTasks+0x64>)
   8575c:	2282      	movs	r2, #130	; 0x82
   8575e:	4b0b      	ldr	r3, [pc, #44]	; (8578c <vStartPolledQueueTasks+0x5c>)
   85760:	4c0d      	ldr	r4, [pc, #52]	; (85798 <vStartPolledQueueTasks+0x68>)
   85762:	47a0      	blx	r4
	xTaskCreate( vPolledQueueProducer, "QProdNB", pollqSTACK_SIZE, ( void * ) &xPolledQueue, uxPriority, ( TaskHandle_t * ) NULL );
   85764:	687b      	ldr	r3, [r7, #4]
   85766:	9300      	str	r3, [sp, #0]
   85768:	2300      	movs	r3, #0
   8576a:	9301      	str	r3, [sp, #4]
   8576c:	2300      	movs	r3, #0
   8576e:	9302      	str	r3, [sp, #8]
   85770:	2300      	movs	r3, #0
   85772:	9303      	str	r3, [sp, #12]
   85774:	4809      	ldr	r0, [pc, #36]	; (8579c <vStartPolledQueueTasks+0x6c>)
   85776:	490a      	ldr	r1, [pc, #40]	; (857a0 <vStartPolledQueueTasks+0x70>)
   85778:	2282      	movs	r2, #130	; 0x82
   8577a:	4b04      	ldr	r3, [pc, #16]	; (8578c <vStartPolledQueueTasks+0x5c>)
   8577c:	4c06      	ldr	r4, [pc, #24]	; (85798 <vStartPolledQueueTasks+0x68>)
   8577e:	47a0      	blx	r4
}
   85780:	370c      	adds	r7, #12
   85782:	46bd      	mov	sp, r7
   85784:	bd90      	pop	{r4, r7, pc}
   85786:	bf00      	nop
   85788:	00081919 	.word	0x00081919
   8578c:	2007a6dc 	.word	0x2007a6dc
   85790:	00085825 	.word	0x00085825
   85794:	0008677c 	.word	0x0008677c
   85798:	000823d5 	.word	0x000823d5
   8579c:	000857a5 	.word	0x000857a5
   857a0:	00086784 	.word	0x00086784

000857a4 <vPolledQueueProducer>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueProducer, pvParameters )
{
   857a4:	b590      	push	{r4, r7, lr}
   857a6:	b087      	sub	sp, #28
   857a8:	af00      	add	r7, sp, #0
   857aa:	6078      	str	r0, [r7, #4]
uint16_t usValue = ( uint16_t ) 0;
   857ac:	2300      	movs	r3, #0
   857ae:	81fb      	strh	r3, [r7, #14]
BaseType_t xError = pdFALSE, xLoop;
   857b0:	2300      	movs	r3, #0
   857b2:	617b      	str	r3, [r7, #20]

	for( ;; )
	{		
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
   857b4:	2300      	movs	r3, #0
   857b6:	613b      	str	r3, [r7, #16]
   857b8:	e022      	b.n	85800 <vPolledQueueProducer+0x5c>
		{
			/* Send an incrementing number on the queue without blocking. */
			if( xQueueSend( *( ( QueueHandle_t * ) pvParameters ), ( void * ) &usValue, pollqNO_DELAY ) != pdPASS )
   857ba:	687b      	ldr	r3, [r7, #4]
   857bc:	681a      	ldr	r2, [r3, #0]
   857be:	f107 030e 	add.w	r3, r7, #14
   857c2:	4610      	mov	r0, r2
   857c4:	4619      	mov	r1, r3
   857c6:	2200      	movs	r2, #0
   857c8:	2300      	movs	r3, #0
   857ca:	4c11      	ldr	r4, [pc, #68]	; (85810 <vPolledQueueProducer+0x6c>)
   857cc:	47a0      	blx	r4
   857ce:	4603      	mov	r3, r0
   857d0:	2b01      	cmp	r3, #1
   857d2:	d002      	beq.n	857da <vPolledQueueProducer+0x36>
			{
				/* We should never find the queue full so if we get here there
				has been an error. */
				xError = pdTRUE;
   857d4:	2301      	movs	r3, #1
   857d6:	617b      	str	r3, [r7, #20]
   857d8:	e00f      	b.n	857fa <vPolledQueueProducer+0x56>
			}
			else
			{
				if( xError == pdFALSE )
   857da:	697b      	ldr	r3, [r7, #20]
   857dc:	2b00      	cmp	r3, #0
   857de:	d108      	bne.n	857f2 <vPolledQueueProducer+0x4e>
				{
					/* If an error has ever been recorded we stop incrementing the
					check variable. */
					portENTER_CRITICAL();
   857e0:	4b0c      	ldr	r3, [pc, #48]	; (85814 <vPolledQueueProducer+0x70>)
   857e2:	4798      	blx	r3
						xPollingProducerCount++;
   857e4:	4b0c      	ldr	r3, [pc, #48]	; (85818 <vPolledQueueProducer+0x74>)
   857e6:	681b      	ldr	r3, [r3, #0]
   857e8:	1c5a      	adds	r2, r3, #1
   857ea:	4b0b      	ldr	r3, [pc, #44]	; (85818 <vPolledQueueProducer+0x74>)
   857ec:	601a      	str	r2, [r3, #0]
					portEXIT_CRITICAL();
   857ee:	4b0b      	ldr	r3, [pc, #44]	; (8581c <vPolledQueueProducer+0x78>)
   857f0:	4798      	blx	r3
				}

				/* Update the value we are going to post next time around. */
				usValue++;
   857f2:	89fb      	ldrh	r3, [r7, #14]
   857f4:	3301      	adds	r3, #1
   857f6:	b29b      	uxth	r3, r3
   857f8:	81fb      	strh	r3, [r7, #14]
uint16_t usValue = ( uint16_t ) 0;
BaseType_t xError = pdFALSE, xLoop;

	for( ;; )
	{		
		for( xLoop = 0; xLoop < pollqVALUES_TO_PRODUCE; xLoop++ )
   857fa:	693b      	ldr	r3, [r7, #16]
   857fc:	3301      	adds	r3, #1
   857fe:	613b      	str	r3, [r7, #16]
   85800:	693b      	ldr	r3, [r7, #16]
   85802:	2b02      	cmp	r3, #2
   85804:	ddd9      	ble.n	857ba <vPolledQueueProducer+0x16>
			}
		}

		/* Wait before we start posting again to ensure the consumer runs and
		empties the queue. */
		vTaskDelay( pollqPRODUCER_DELAY );
   85806:	20c8      	movs	r0, #200	; 0xc8
   85808:	4b05      	ldr	r3, [pc, #20]	; (85820 <vPolledQueueProducer+0x7c>)
   8580a:	4798      	blx	r3
	}
   8580c:	e7d2      	b.n	857b4 <vPolledQueueProducer+0x10>
   8580e:	bf00      	nop
   85810:	00081b69 	.word	0x00081b69
   85814:	00081321 	.word	0x00081321
   85818:	2007a6d8 	.word	0x2007a6d8
   8581c:	00081365 	.word	0x00081365
   85820:	00082659 	.word	0x00082659

00085824 <vPolledQueueConsumer>:
}  /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( vPolledQueueConsumer, pvParameters )
{
   85824:	b590      	push	{r4, r7, lr}
   85826:	b087      	sub	sp, #28
   85828:	af00      	add	r7, sp, #0
   8582a:	6078      	str	r0, [r7, #4]
uint16_t usData, usExpectedValue = ( uint16_t ) 0;
   8582c:	2300      	movs	r3, #0
   8582e:	82fb      	strh	r3, [r7, #22]
BaseType_t xError = pdFALSE;
   85830:	2300      	movs	r3, #0
   85832:	613b      	str	r3, [r7, #16]

	for( ;; )
	{		
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
   85834:	e024      	b.n	85880 <vPolledQueueConsumer+0x5c>
		{
			if( xQueueReceive( *( ( QueueHandle_t * ) pvParameters ), &usData, pollqNO_DELAY ) == pdPASS )
   85836:	687b      	ldr	r3, [r7, #4]
   85838:	681a      	ldr	r2, [r3, #0]
   8583a:	f107 030e 	add.w	r3, r7, #14
   8583e:	4610      	mov	r0, r2
   85840:	4619      	mov	r1, r3
   85842:	2200      	movs	r2, #0
   85844:	2300      	movs	r3, #0
   85846:	4c15      	ldr	r4, [pc, #84]	; (8589c <vPolledQueueConsumer+0x78>)
   85848:	47a0      	blx	r4
   8584a:	4603      	mov	r3, r0
   8584c:	2b01      	cmp	r3, #1
   8584e:	d117      	bne.n	85880 <vPolledQueueConsumer+0x5c>
			{
				if( usData != usExpectedValue )
   85850:	89fb      	ldrh	r3, [r7, #14]
   85852:	8afa      	ldrh	r2, [r7, #22]
   85854:	429a      	cmp	r2, r3
   85856:	d004      	beq.n	85862 <vPolledQueueConsumer+0x3e>
				{
					/* This is not what we expected to receive so an error has
					occurred. */
					xError = pdTRUE;
   85858:	2301      	movs	r3, #1
   8585a:	613b      	str	r3, [r7, #16]

					/* Catch-up to the value we received so our next expected
					value should again be correct. */
					usExpectedValue = usData;
   8585c:	89fb      	ldrh	r3, [r7, #14]
   8585e:	82fb      	strh	r3, [r7, #22]
   85860:	e00b      	b.n	8587a <vPolledQueueConsumer+0x56>
				}
				else
				{
					if( xError == pdFALSE )
   85862:	693b      	ldr	r3, [r7, #16]
   85864:	2b00      	cmp	r3, #0
   85866:	d108      	bne.n	8587a <vPolledQueueConsumer+0x56>
					{
						/* Only increment the check variable if no errors have
						occurred. */
						portENTER_CRITICAL();
   85868:	4b0d      	ldr	r3, [pc, #52]	; (858a0 <vPolledQueueConsumer+0x7c>)
   8586a:	4798      	blx	r3
							xPollingConsumerCount++;
   8586c:	4b0d      	ldr	r3, [pc, #52]	; (858a4 <vPolledQueueConsumer+0x80>)
   8586e:	681b      	ldr	r3, [r3, #0]
   85870:	1c5a      	adds	r2, r3, #1
   85872:	4b0c      	ldr	r3, [pc, #48]	; (858a4 <vPolledQueueConsumer+0x80>)
   85874:	601a      	str	r2, [r3, #0]
						portEXIT_CRITICAL();
   85876:	4b0c      	ldr	r3, [pc, #48]	; (858a8 <vPolledQueueConsumer+0x84>)
   85878:	4798      	blx	r3
					}
				}

				/* Next time round we would expect the number to be one higher. */
				usExpectedValue++;
   8587a:	8afb      	ldrh	r3, [r7, #22]
   8587c:	3301      	adds	r3, #1
   8587e:	82fb      	strh	r3, [r7, #22]
BaseType_t xError = pdFALSE;

	for( ;; )
	{		
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
   85880:	687b      	ldr	r3, [r7, #4]
   85882:	681b      	ldr	r3, [r3, #0]
   85884:	4618      	mov	r0, r3
   85886:	4b09      	ldr	r3, [pc, #36]	; (858ac <vPolledQueueConsumer+0x88>)
   85888:	4798      	blx	r3
   8588a:	4603      	mov	r3, r0
   8588c:	2b00      	cmp	r3, #0
   8588e:	d1d2      	bne.n	85836 <vPolledQueueConsumer+0x12>
			}
		}

		/* Now the queue is empty we block, allowing the producer to place more
		items in the queue. */
		vTaskDelay( pollqCONSUMER_DELAY );
   85890:	20b4      	movs	r0, #180	; 0xb4
   85892:	4b07      	ldr	r3, [pc, #28]	; (858b0 <vPolledQueueConsumer+0x8c>)
   85894:	4798      	blx	r3
	}
   85896:	bf00      	nop
BaseType_t xError = pdFALSE;

	for( ;; )
	{		
		/* Loop until the queue is empty. */
		while( uxQueueMessagesWaiting( *( ( QueueHandle_t * ) pvParameters ) ) )
   85898:	e7f2      	b.n	85880 <vPolledQueueConsumer+0x5c>
   8589a:	bf00      	nop
   8589c:	00081e29 	.word	0x00081e29
   858a0:	00081321 	.word	0x00081321
   858a4:	2007a6d4 	.word	0x2007a6d4
   858a8:	00081365 	.word	0x00081365
   858ac:	000820ed 	.word	0x000820ed
   858b0:	00082659 	.word	0x00082659

000858b4 <xArePollingQueuesStillRunning>:
} /*lint !e818 Function prototype must conform to API. */
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running with no errors. */
BaseType_t xArePollingQueuesStillRunning( void )
{
   858b4:	b480      	push	{r7}
   858b6:	b083      	sub	sp, #12
   858b8:	af00      	add	r7, sp, #0

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
   858ba:	4b0d      	ldr	r3, [pc, #52]	; (858f0 <xArePollingQueuesStillRunning+0x3c>)
   858bc:	681b      	ldr	r3, [r3, #0]
   858be:	2b00      	cmp	r3, #0
   858c0:	d003      	beq.n	858ca <xArePollingQueuesStillRunning+0x16>
		( xPollingProducerCount == pollqINITIAL_VALUE )
   858c2:	4b0c      	ldr	r3, [pc, #48]	; (858f4 <xArePollingQueuesStillRunning+0x40>)
   858c4:	681b      	ldr	r3, [r3, #0]

	/* Check both the consumer and producer poll count to check they have both
	been changed since out last trip round.  We do not need a critical section
	around the check variables as this is called from a higher priority than
	the other tasks that access the same variables. */
	if( ( xPollingConsumerCount == pollqINITIAL_VALUE ) ||
   858c6:	2b00      	cmp	r3, #0
   858c8:	d102      	bne.n	858d0 <xArePollingQueuesStillRunning+0x1c>
		( xPollingProducerCount == pollqINITIAL_VALUE )
	  )
	{
		xReturn = pdFALSE;
   858ca:	2300      	movs	r3, #0
   858cc:	607b      	str	r3, [r7, #4]
   858ce:	e001      	b.n	858d4 <xArePollingQueuesStillRunning+0x20>
	}
	else
	{
		xReturn = pdTRUE;
   858d0:	2301      	movs	r3, #1
   858d2:	607b      	str	r3, [r7, #4]
	}

	/* Set the check variables back down so we know if they have been
	incremented the next time around. */
	xPollingConsumerCount = pollqINITIAL_VALUE;
   858d4:	4b06      	ldr	r3, [pc, #24]	; (858f0 <xArePollingQueuesStillRunning+0x3c>)
   858d6:	2200      	movs	r2, #0
   858d8:	601a      	str	r2, [r3, #0]
	xPollingProducerCount = pollqINITIAL_VALUE;
   858da:	4b06      	ldr	r3, [pc, #24]	; (858f4 <xArePollingQueuesStillRunning+0x40>)
   858dc:	2200      	movs	r2, #0
   858de:	601a      	str	r2, [r3, #0]

	return xReturn;
   858e0:	687b      	ldr	r3, [r7, #4]
}
   858e2:	4618      	mov	r0, r3
   858e4:	370c      	adds	r7, #12
   858e6:	46bd      	mov	sp, r7
   858e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   858ec:	4770      	bx	lr
   858ee:	bf00      	nop
   858f0:	2007a6d4 	.word	0x2007a6d4
   858f4:	2007a6d8 	.word	0x2007a6d8

000858f8 <vStartRecursiveMutexTasks>:
static TaskHandle_t xControllingTaskHandle, xBlockingTaskHandle;

/*-----------------------------------------------------------*/

void vStartRecursiveMutexTasks( void )
{
   858f8:	b590      	push	{r4, r7, lr}
   858fa:	b085      	sub	sp, #20
   858fc:	af04      	add	r7, sp, #16
	/* Just creates the mutex and the three tasks. */

	xMutex = xSemaphoreCreateRecursiveMutex();
   858fe:	2004      	movs	r0, #4
   85900:	4b1a      	ldr	r3, [pc, #104]	; (8596c <vStartRecursiveMutexTasks+0x74>)
   85902:	4798      	blx	r3
   85904:	4602      	mov	r2, r0
   85906:	4b1a      	ldr	r3, [pc, #104]	; (85970 <vStartRecursiveMutexTasks+0x78>)
   85908:	601a      	str	r2, [r3, #0]
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) xMutex, "Recursive_Mutex" );


	if( xMutex != NULL )
   8590a:	4b19      	ldr	r3, [pc, #100]	; (85970 <vStartRecursiveMutexTasks+0x78>)
   8590c:	681b      	ldr	r3, [r3, #0]
   8590e:	2b00      	cmp	r3, #0
   85910:	d029      	beq.n	85966 <vStartRecursiveMutexTasks+0x6e>
	{
		xTaskCreate( prvRecursiveMutexControllingTask, "Rec1", configMINIMAL_STACK_SIZE, NULL, recmuCONTROLLING_TASK_PRIORITY, &xControllingTaskHandle );
   85912:	2302      	movs	r3, #2
   85914:	9300      	str	r3, [sp, #0]
   85916:	4b17      	ldr	r3, [pc, #92]	; (85974 <vStartRecursiveMutexTasks+0x7c>)
   85918:	9301      	str	r3, [sp, #4]
   8591a:	2300      	movs	r3, #0
   8591c:	9302      	str	r3, [sp, #8]
   8591e:	2300      	movs	r3, #0
   85920:	9303      	str	r3, [sp, #12]
   85922:	4815      	ldr	r0, [pc, #84]	; (85978 <vStartRecursiveMutexTasks+0x80>)
   85924:	4915      	ldr	r1, [pc, #84]	; (8597c <vStartRecursiveMutexTasks+0x84>)
   85926:	2282      	movs	r2, #130	; 0x82
   85928:	2300      	movs	r3, #0
   8592a:	4c15      	ldr	r4, [pc, #84]	; (85980 <vStartRecursiveMutexTasks+0x88>)
   8592c:	47a0      	blx	r4
        xTaskCreate( prvRecursiveMutexBlockingTask, "Rec2", configMINIMAL_STACK_SIZE, NULL, recmuBLOCKING_TASK_PRIORITY, &xBlockingTaskHandle );
   8592e:	2301      	movs	r3, #1
   85930:	9300      	str	r3, [sp, #0]
   85932:	4b14      	ldr	r3, [pc, #80]	; (85984 <vStartRecursiveMutexTasks+0x8c>)
   85934:	9301      	str	r3, [sp, #4]
   85936:	2300      	movs	r3, #0
   85938:	9302      	str	r3, [sp, #8]
   8593a:	2300      	movs	r3, #0
   8593c:	9303      	str	r3, [sp, #12]
   8593e:	4812      	ldr	r0, [pc, #72]	; (85988 <vStartRecursiveMutexTasks+0x90>)
   85940:	4912      	ldr	r1, [pc, #72]	; (8598c <vStartRecursiveMutexTasks+0x94>)
   85942:	2282      	movs	r2, #130	; 0x82
   85944:	2300      	movs	r3, #0
   85946:	4c0e      	ldr	r4, [pc, #56]	; (85980 <vStartRecursiveMutexTasks+0x88>)
   85948:	47a0      	blx	r4
        xTaskCreate( prvRecursiveMutexPollingTask, "Rec3", configMINIMAL_STACK_SIZE, NULL, recmuPOLLING_TASK_PRIORITY, NULL );
   8594a:	2300      	movs	r3, #0
   8594c:	9300      	str	r3, [sp, #0]
   8594e:	2300      	movs	r3, #0
   85950:	9301      	str	r3, [sp, #4]
   85952:	2300      	movs	r3, #0
   85954:	9302      	str	r3, [sp, #8]
   85956:	2300      	movs	r3, #0
   85958:	9303      	str	r3, [sp, #12]
   8595a:	480d      	ldr	r0, [pc, #52]	; (85990 <vStartRecursiveMutexTasks+0x98>)
   8595c:	490d      	ldr	r1, [pc, #52]	; (85994 <vStartRecursiveMutexTasks+0x9c>)
   8595e:	2282      	movs	r2, #130	; 0x82
   85960:	2300      	movs	r3, #0
   85962:	4c07      	ldr	r4, [pc, #28]	; (85980 <vStartRecursiveMutexTasks+0x88>)
   85964:	47a0      	blx	r4
	}
}
   85966:	3704      	adds	r7, #4
   85968:	46bd      	mov	sp, r7
   8596a:	bd90      	pop	{r4, r7, pc}
   8596c:	000819a5 	.word	0x000819a5
   85970:	2007a6e0 	.word	0x2007a6e0
   85974:	2007a6fc 	.word	0x2007a6fc
   85978:	00085999 	.word	0x00085999
   8597c:	0008678c 	.word	0x0008678c
   85980:	000823d5 	.word	0x000823d5
   85984:	2007a700 	.word	0x2007a700
   85988:	00085a69 	.word	0x00085a69
   8598c:	00086794 	.word	0x00086794
   85990:	00085b09 	.word	0x00085b09
   85994:	0008679c 	.word	0x0008679c

00085998 <prvRecursiveMutexControllingTask>:
/*-----------------------------------------------------------*/

static void prvRecursiveMutexControllingTask( void *pvParameters )
{
   85998:	b580      	push	{r7, lr}
   8599a:	b084      	sub	sp, #16
   8599c:	af00      	add	r7, sp, #0
   8599e:	6078      	str	r0, [r7, #4]
	{
		/* Should not be able to 'give' the mutex, as we have not yet 'taken'
		it.   The first time through, the mutex will not have been used yet,
		subsequent times through, at this point the mutex will be held by the
		polling task. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
   859a0:	4b29      	ldr	r3, [pc, #164]	; (85a48 <prvRecursiveMutexControllingTask+0xb0>)
   859a2:	681b      	ldr	r3, [r3, #0]
   859a4:	4618      	mov	r0, r3
   859a6:	4b29      	ldr	r3, [pc, #164]	; (85a4c <prvRecursiveMutexControllingTask+0xb4>)
   859a8:	4798      	blx	r3
   859aa:	4603      	mov	r3, r0
   859ac:	2b01      	cmp	r3, #1
   859ae:	d102      	bne.n	859b6 <prvRecursiveMutexControllingTask+0x1e>
		{
			xErrorOccurred = pdTRUE;
   859b0:	4b27      	ldr	r3, [pc, #156]	; (85a50 <prvRecursiveMutexControllingTask+0xb8>)
   859b2:	2201      	movs	r2, #1
   859b4:	601a      	str	r2, [r3, #0]
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
   859b6:	2300      	movs	r3, #0
   859b8:	60fb      	str	r3, [r7, #12]
   859ba:	e011      	b.n	859e0 <prvRecursiveMutexControllingTask+0x48>
			at this point and this Take will cause the polling task to inherit
			the priority of this task.  In this case the block time must be
			long enough to ensure the polling task will execute again before the
			block time expires.  If the block time does expire then the error
			flag will be set here. */
			if( xSemaphoreTakeRecursive( xMutex, recmuEIGHT_TICK_DELAY ) != pdPASS )
   859bc:	4b22      	ldr	r3, [pc, #136]	; (85a48 <prvRecursiveMutexControllingTask+0xb0>)
   859be:	681b      	ldr	r3, [r3, #0]
   859c0:	4618      	mov	r0, r3
   859c2:	2108      	movs	r1, #8
   859c4:	4b23      	ldr	r3, [pc, #140]	; (85a54 <prvRecursiveMutexControllingTask+0xbc>)
   859c6:	4798      	blx	r3
   859c8:	4603      	mov	r3, r0
   859ca:	2b01      	cmp	r3, #1
   859cc:	d002      	beq.n	859d4 <prvRecursiveMutexControllingTask+0x3c>
			{
				xErrorOccurred = pdTRUE;
   859ce:	4b20      	ldr	r3, [pc, #128]	; (85a50 <prvRecursiveMutexControllingTask+0xb8>)
   859d0:	2201      	movs	r2, #1
   859d2:	601a      	str	r2, [r3, #0]

			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute to ensure they either block
			(where a block time is specified) or return an error (where no
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
   859d4:	2014      	movs	r0, #20
   859d6:	4b20      	ldr	r3, [pc, #128]	; (85a58 <prvRecursiveMutexControllingTask+0xc0>)
   859d8:	4798      	blx	r3
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
		{
			xErrorOccurred = pdTRUE;
		}

		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
   859da:	68fb      	ldr	r3, [r7, #12]
   859dc:	3301      	adds	r3, #1
   859de:	60fb      	str	r3, [r7, #12]
   859e0:	68fb      	ldr	r3, [r7, #12]
   859e2:	2b09      	cmp	r3, #9
   859e4:	d9ea      	bls.n	859bc <prvRecursiveMutexControllingTask+0x24>
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
   859e6:	2300      	movs	r3, #0
   859e8:	60fb      	str	r3, [r7, #12]
   859ea:	e010      	b.n	85a0e <prvRecursiveMutexControllingTask+0x76>
		{
			/* Ensure the other task attempting to access the mutex (and the
			other demo tasks) are able to execute. */
			vTaskDelay( recmuSHORT_DELAY );
   859ec:	2014      	movs	r0, #20
   859ee:	4b1a      	ldr	r3, [pc, #104]	; (85a58 <prvRecursiveMutexControllingTask+0xc0>)
   859f0:	4798      	blx	r3
			/* We should now be able to give the mutex as many times as we
			took it.  When the mutex is available again the Blocking task
			should be unblocked but not run because it has a lower priority
			than this task.  The polling task should also not run at this point
			as it too has a lower priority than this task. */
			if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
   859f2:	4b15      	ldr	r3, [pc, #84]	; (85a48 <prvRecursiveMutexControllingTask+0xb0>)
   859f4:	681b      	ldr	r3, [r3, #0]
   859f6:	4618      	mov	r0, r3
   859f8:	4b14      	ldr	r3, [pc, #80]	; (85a4c <prvRecursiveMutexControllingTask+0xb4>)
   859fa:	4798      	blx	r3
   859fc:	4603      	mov	r3, r0
   859fe:	2b01      	cmp	r3, #1
   85a00:	d002      	beq.n	85a08 <prvRecursiveMutexControllingTask+0x70>
			{
				xErrorOccurred = pdTRUE;
   85a02:	4b13      	ldr	r3, [pc, #76]	; (85a50 <prvRecursiveMutexControllingTask+0xb8>)
   85a04:	2201      	movs	r2, #1
   85a06:	601a      	str	r2, [r3, #0]
			block time is specified) as the mutex is held by this task. */
			vTaskDelay( recmuSHORT_DELAY );
		}

		/* For each time we took the mutex, give it back. */
		for( ux = 0; ux < recmuMAX_COUNT; ux++ )
   85a08:	68fb      	ldr	r3, [r7, #12]
   85a0a:	3301      	adds	r3, #1
   85a0c:	60fb      	str	r3, [r7, #12]
   85a0e:	68fb      	ldr	r3, [r7, #12]
   85a10:	2b09      	cmp	r3, #9
   85a12:	d9eb      	bls.n	859ec <prvRecursiveMutexControllingTask+0x54>
			}
		}

		/* Having given it back the same number of times as it was taken, we
		should no longer be the mutex owner, so the next give should fail. */
		if( xSemaphoreGiveRecursive( xMutex ) == pdPASS )
   85a14:	4b0c      	ldr	r3, [pc, #48]	; (85a48 <prvRecursiveMutexControllingTask+0xb0>)
   85a16:	681b      	ldr	r3, [r3, #0]
   85a18:	4618      	mov	r0, r3
   85a1a:	4b0c      	ldr	r3, [pc, #48]	; (85a4c <prvRecursiveMutexControllingTask+0xb4>)
   85a1c:	4798      	blx	r3
   85a1e:	4603      	mov	r3, r0
   85a20:	2b01      	cmp	r3, #1
   85a22:	d102      	bne.n	85a2a <prvRecursiveMutexControllingTask+0x92>
		{
			xErrorOccurred = pdTRUE;
   85a24:	4b0a      	ldr	r3, [pc, #40]	; (85a50 <prvRecursiveMutexControllingTask+0xb8>)
   85a26:	2201      	movs	r2, #1
   85a28:	601a      	str	r2, [r3, #0]
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxControllingCycles++;
   85a2a:	4b0c      	ldr	r3, [pc, #48]	; (85a5c <prvRecursiveMutexControllingTask+0xc4>)
   85a2c:	681b      	ldr	r3, [r3, #0]
   85a2e:	1c5a      	adds	r2, r3, #1
   85a30:	4b0a      	ldr	r3, [pc, #40]	; (85a5c <prvRecursiveMutexControllingTask+0xc4>)
   85a32:	601a      	str	r2, [r3, #0]

		/* Suspend ourselves so the blocking task can execute. */
		xControllingIsSuspended = pdTRUE;
   85a34:	4b0a      	ldr	r3, [pc, #40]	; (85a60 <prvRecursiveMutexControllingTask+0xc8>)
   85a36:	2201      	movs	r2, #1
   85a38:	601a      	str	r2, [r3, #0]
		vTaskSuspend( NULL );
   85a3a:	2000      	movs	r0, #0
   85a3c:	4b09      	ldr	r3, [pc, #36]	; (85a64 <prvRecursiveMutexControllingTask+0xcc>)
   85a3e:	4798      	blx	r3
		xControllingIsSuspended = pdFALSE;
   85a40:	4b07      	ldr	r3, [pc, #28]	; (85a60 <prvRecursiveMutexControllingTask+0xc8>)
   85a42:	2200      	movs	r2, #0
   85a44:	601a      	str	r2, [r3, #0]
	}
   85a46:	e7ab      	b.n	859a0 <prvRecursiveMutexControllingTask+0x8>
   85a48:	2007a6e0 	.word	0x2007a6e0
   85a4c:	00081a3d 	.word	0x00081a3d
   85a50:	2007a6e4 	.word	0x2007a6e4
   85a54:	00081aa1 	.word	0x00081aa1
   85a58:	00082659 	.word	0x00082659
   85a5c:	2007a6f0 	.word	0x2007a6f0
   85a60:	2007a6e8 	.word	0x2007a6e8
   85a64:	00082885 	.word	0x00082885

00085a68 <prvRecursiveMutexBlockingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexBlockingTask( void *pvParameters )
{
   85a68:	b580      	push	{r7, lr}
   85a6a:	b082      	sub	sp, #8
   85a6c:	af00      	add	r7, sp, #0
   85a6e:	6078      	str	r0, [r7, #4]
		this call should block until the controlling task has given up the
		mutex, and not actually execute	past this call until the controlling
		task is suspended.  portMAX_DELAY - 1 is used instead of portMAX_DELAY
		to ensure the task's state is reported as Blocked and not Suspended in
		a later call to configASSERT() (within the polling task). */
		if( xSemaphoreTakeRecursive( xMutex, ( portMAX_DELAY - 1 ) ) == pdPASS )
   85a70:	4b1c      	ldr	r3, [pc, #112]	; (85ae4 <prvRecursiveMutexBlockingTask+0x7c>)
   85a72:	681b      	ldr	r3, [r3, #0]
   85a74:	4618      	mov	r0, r3
   85a76:	f06f 0101 	mvn.w	r1, #1
   85a7a:	4b1b      	ldr	r3, [pc, #108]	; (85ae8 <prvRecursiveMutexBlockingTask+0x80>)
   85a7c:	4798      	blx	r3
   85a7e:	4603      	mov	r3, r0
   85a80:	2b01      	cmp	r3, #1
   85a82:	d11c      	bne.n	85abe <prvRecursiveMutexBlockingTask+0x56>
		{
			if( xControllingIsSuspended != pdTRUE )
   85a84:	4b19      	ldr	r3, [pc, #100]	; (85aec <prvRecursiveMutexBlockingTask+0x84>)
   85a86:	681b      	ldr	r3, [r3, #0]
   85a88:	2b01      	cmp	r3, #1
   85a8a:	d003      	beq.n	85a94 <prvRecursiveMutexBlockingTask+0x2c>
			{
				/* Did not expect to execute until the controlling task was
				suspended. */
				xErrorOccurred = pdTRUE;
   85a8c:	4b18      	ldr	r3, [pc, #96]	; (85af0 <prvRecursiveMutexBlockingTask+0x88>)
   85a8e:	2201      	movs	r2, #1
   85a90:	601a      	str	r2, [r3, #0]
   85a92:	e017      	b.n	85ac4 <prvRecursiveMutexBlockingTask+0x5c>
			}
			else
			{
				/* Give the mutex back before suspending ourselves to allow
				the polling task to obtain the mutex. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
   85a94:	4b13      	ldr	r3, [pc, #76]	; (85ae4 <prvRecursiveMutexBlockingTask+0x7c>)
   85a96:	681b      	ldr	r3, [r3, #0]
   85a98:	4618      	mov	r0, r3
   85a9a:	4b16      	ldr	r3, [pc, #88]	; (85af4 <prvRecursiveMutexBlockingTask+0x8c>)
   85a9c:	4798      	blx	r3
   85a9e:	4603      	mov	r3, r0
   85aa0:	2b01      	cmp	r3, #1
   85aa2:	d002      	beq.n	85aaa <prvRecursiveMutexBlockingTask+0x42>
				{
					xErrorOccurred = pdTRUE;
   85aa4:	4b12      	ldr	r3, [pc, #72]	; (85af0 <prvRecursiveMutexBlockingTask+0x88>)
   85aa6:	2201      	movs	r2, #1
   85aa8:	601a      	str	r2, [r3, #0]
				}

				xBlockingIsSuspended = pdTRUE;
   85aaa:	4b13      	ldr	r3, [pc, #76]	; (85af8 <prvRecursiveMutexBlockingTask+0x90>)
   85aac:	2201      	movs	r2, #1
   85aae:	601a      	str	r2, [r3, #0]
				vTaskSuspend( NULL );
   85ab0:	2000      	movs	r0, #0
   85ab2:	4b12      	ldr	r3, [pc, #72]	; (85afc <prvRecursiveMutexBlockingTask+0x94>)
   85ab4:	4798      	blx	r3
				xBlockingIsSuspended = pdFALSE;
   85ab6:	4b10      	ldr	r3, [pc, #64]	; (85af8 <prvRecursiveMutexBlockingTask+0x90>)
   85ab8:	2200      	movs	r2, #0
   85aba:	601a      	str	r2, [r3, #0]
   85abc:	e002      	b.n	85ac4 <prvRecursiveMutexBlockingTask+0x5c>
		}
		else
		{
			/* We should not leave the xSemaphoreTakeRecursive() function
			until the mutex was obtained. */
			xErrorOccurred = pdTRUE;
   85abe:	4b0c      	ldr	r3, [pc, #48]	; (85af0 <prvRecursiveMutexBlockingTask+0x88>)
   85ac0:	2201      	movs	r2, #1
   85ac2:	601a      	str	r2, [r3, #0]
		}

		/* The controlling and blocking tasks should be in lock step. */
		if( uxControllingCycles != ( uxBlockingCycles + 1 ) )
   85ac4:	4b0e      	ldr	r3, [pc, #56]	; (85b00 <prvRecursiveMutexBlockingTask+0x98>)
   85ac6:	681b      	ldr	r3, [r3, #0]
   85ac8:	1c5a      	adds	r2, r3, #1
   85aca:	4b0e      	ldr	r3, [pc, #56]	; (85b04 <prvRecursiveMutexBlockingTask+0x9c>)
   85acc:	681b      	ldr	r3, [r3, #0]
   85ace:	429a      	cmp	r2, r3
   85ad0:	d002      	beq.n	85ad8 <prvRecursiveMutexBlockingTask+0x70>
		{
			xErrorOccurred = pdTRUE;
   85ad2:	4b07      	ldr	r3, [pc, #28]	; (85af0 <prvRecursiveMutexBlockingTask+0x88>)
   85ad4:	2201      	movs	r2, #1
   85ad6:	601a      	str	r2, [r3, #0]
		}

		/* Keep count of the number of cycles this task has performed so a
		stall can be detected. */
		uxBlockingCycles++;
   85ad8:	4b09      	ldr	r3, [pc, #36]	; (85b00 <prvRecursiveMutexBlockingTask+0x98>)
   85ada:	681b      	ldr	r3, [r3, #0]
   85adc:	1c5a      	adds	r2, r3, #1
   85ade:	4b08      	ldr	r3, [pc, #32]	; (85b00 <prvRecursiveMutexBlockingTask+0x98>)
   85ae0:	601a      	str	r2, [r3, #0]
	}
   85ae2:	e7c5      	b.n	85a70 <prvRecursiveMutexBlockingTask+0x8>
   85ae4:	2007a6e0 	.word	0x2007a6e0
   85ae8:	00081aa1 	.word	0x00081aa1
   85aec:	2007a6e8 	.word	0x2007a6e8
   85af0:	2007a6e4 	.word	0x2007a6e4
   85af4:	00081a3d 	.word	0x00081a3d
   85af8:	2007a6ec 	.word	0x2007a6ec
   85afc:	00082885 	.word	0x00082885
   85b00:	2007a6f4 	.word	0x2007a6f4
   85b04:	2007a6f0 	.word	0x2007a6f0

00085b08 <prvRecursiveMutexPollingTask>:
}
/*-----------------------------------------------------------*/

static void prvRecursiveMutexPollingTask( void *pvParameters )
{
   85b08:	b580      	push	{r7, lr}
   85b0a:	b082      	sub	sp, #8
   85b0c:	af00      	add	r7, sp, #0
   85b0e:	6078      	str	r0, [r7, #4]
	for( ;; )
	{
		/* Keep attempting to obtain the mutex.  We should only obtain it when
		the blocking task has suspended itself, which in turn should only
		happen when the controlling task is also suspended. */
		if( xSemaphoreTakeRecursive( xMutex, recmuNO_DELAY ) == pdPASS )
   85b10:	4b26      	ldr	r3, [pc, #152]	; (85bac <prvRecursiveMutexPollingTask+0xa4>)
   85b12:	681b      	ldr	r3, [r3, #0]
   85b14:	4618      	mov	r0, r3
   85b16:	2100      	movs	r1, #0
   85b18:	4b25      	ldr	r3, [pc, #148]	; (85bb0 <prvRecursiveMutexPollingTask+0xa8>)
   85b1a:	4798      	blx	r3
   85b1c:	4603      	mov	r3, r0
   85b1e:	2b01      	cmp	r3, #1
   85b20:	d142      	bne.n	85ba8 <prvRecursiveMutexPollingTask+0xa0>
				configASSERT( eTaskGetState( xBlockingTaskHandle ) == eSuspended );
			}
			#endif /* INCLUDE_eTaskGetState */

			/* Is the blocking task suspended? */
			if( ( xBlockingIsSuspended != pdTRUE ) || ( xControllingIsSuspended != pdTRUE ) )
   85b22:	4b24      	ldr	r3, [pc, #144]	; (85bb4 <prvRecursiveMutexPollingTask+0xac>)
   85b24:	681b      	ldr	r3, [r3, #0]
   85b26:	2b01      	cmp	r3, #1
   85b28:	d103      	bne.n	85b32 <prvRecursiveMutexPollingTask+0x2a>
   85b2a:	4b23      	ldr	r3, [pc, #140]	; (85bb8 <prvRecursiveMutexPollingTask+0xb0>)
   85b2c:	681b      	ldr	r3, [r3, #0]
   85b2e:	2b01      	cmp	r3, #1
   85b30:	d003      	beq.n	85b3a <prvRecursiveMutexPollingTask+0x32>
			{
				xErrorOccurred = pdTRUE;
   85b32:	4b22      	ldr	r3, [pc, #136]	; (85bbc <prvRecursiveMutexPollingTask+0xb4>)
   85b34:	2201      	movs	r2, #1
   85b36:	601a      	str	r2, [r3, #0]
   85b38:	e036      	b.n	85ba8 <prvRecursiveMutexPollingTask+0xa0>
			}
			else
			{
				/* Keep count of the number of cycles this task has performed
				so a stall can be detected. */
				uxPollingCycles++;
   85b3a:	4b21      	ldr	r3, [pc, #132]	; (85bc0 <prvRecursiveMutexPollingTask+0xb8>)
   85b3c:	681b      	ldr	r3, [r3, #0]
   85b3e:	1c5a      	adds	r2, r3, #1
   85b40:	4b1f      	ldr	r3, [pc, #124]	; (85bc0 <prvRecursiveMutexPollingTask+0xb8>)
   85b42:	601a      	str	r2, [r3, #0]
				will then inherit the higher priority.  The Blocking task will
				block indefinitely when it attempts to obtain the mutex, the
				Controlling task will only block for a fixed period and an
				error will be latched if the polling task has not returned the
				mutex by the time this fixed period has expired. */
				vTaskResume( xBlockingTaskHandle );
   85b44:	4b1f      	ldr	r3, [pc, #124]	; (85bc4 <prvRecursiveMutexPollingTask+0xbc>)
   85b46:	681b      	ldr	r3, [r3, #0]
   85b48:	4618      	mov	r0, r3
   85b4a:	4b1f      	ldr	r3, [pc, #124]	; (85bc8 <prvRecursiveMutexPollingTask+0xc0>)
   85b4c:	4798      	blx	r3
                vTaskResume( xControllingTaskHandle );
   85b4e:	4b1f      	ldr	r3, [pc, #124]	; (85bcc <prvRecursiveMutexPollingTask+0xc4>)
   85b50:	681b      	ldr	r3, [r3, #0]
   85b52:	4618      	mov	r0, r3
   85b54:	4b1c      	ldr	r3, [pc, #112]	; (85bc8 <prvRecursiveMutexPollingTask+0xc0>)
   85b56:	4798      	blx	r3

				/* The other two tasks should now have executed and no longer
				be suspended. */
				if( ( xBlockingIsSuspended == pdTRUE ) || ( xControllingIsSuspended == pdTRUE ) )
   85b58:	4b16      	ldr	r3, [pc, #88]	; (85bb4 <prvRecursiveMutexPollingTask+0xac>)
   85b5a:	681b      	ldr	r3, [r3, #0]
   85b5c:	2b01      	cmp	r3, #1
   85b5e:	d003      	beq.n	85b68 <prvRecursiveMutexPollingTask+0x60>
   85b60:	4b15      	ldr	r3, [pc, #84]	; (85bb8 <prvRecursiveMutexPollingTask+0xb0>)
   85b62:	681b      	ldr	r3, [r3, #0]
   85b64:	2b01      	cmp	r3, #1
   85b66:	d102      	bne.n	85b6e <prvRecursiveMutexPollingTask+0x66>
				{
					xErrorOccurred = pdTRUE;
   85b68:	4b14      	ldr	r3, [pc, #80]	; (85bbc <prvRecursiveMutexPollingTask+0xb4>)
   85b6a:	2201      	movs	r2, #1
   85b6c:	601a      	str	r2, [r3, #0]
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority inherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuCONTROLLING_TASK_PRIORITY );
   85b6e:	2000      	movs	r0, #0
   85b70:	4b17      	ldr	r3, [pc, #92]	; (85bd0 <prvRecursiveMutexPollingTask+0xc8>)
   85b72:	4798      	blx	r3
   85b74:	4603      	mov	r3, r0
   85b76:	2b02      	cmp	r3, #2
   85b78:	d002      	beq.n	85b80 <prvRecursiveMutexPollingTask+0x78>
   85b7a:	4b16      	ldr	r3, [pc, #88]	; (85bd4 <prvRecursiveMutexPollingTask+0xcc>)
   85b7c:	4798      	blx	r3
   85b7e:	e7fe      	b.n	85b7e <prvRecursiveMutexPollingTask+0x76>
					configASSERT( eTaskGetState( xBlockingTaskHandle ) == eBlocked );
				}
				#endif /* INCLUDE_eTaskGetState */

				/* Release the mutex, disinheriting the higher priority again. */
				if( xSemaphoreGiveRecursive( xMutex ) != pdPASS )
   85b80:	4b0a      	ldr	r3, [pc, #40]	; (85bac <prvRecursiveMutexPollingTask+0xa4>)
   85b82:	681b      	ldr	r3, [r3, #0]
   85b84:	4618      	mov	r0, r3
   85b86:	4b14      	ldr	r3, [pc, #80]	; (85bd8 <prvRecursiveMutexPollingTask+0xd0>)
   85b88:	4798      	blx	r3
   85b8a:	4603      	mov	r3, r0
   85b8c:	2b01      	cmp	r3, #1
   85b8e:	d002      	beq.n	85b96 <prvRecursiveMutexPollingTask+0x8e>
				{
					xErrorOccurred = pdTRUE;
   85b90:	4b0a      	ldr	r3, [pc, #40]	; (85bbc <prvRecursiveMutexPollingTask+0xb4>)
   85b92:	2201      	movs	r2, #1
   85b94:	601a      	str	r2, [r3, #0]
				}

				#if( INCLUDE_uxTaskPriorityGet == 1 )
				{
					/* Check priority disinherited. */
					configASSERT( uxTaskPriorityGet( NULL ) == recmuPOLLING_TASK_PRIORITY );
   85b96:	2000      	movs	r0, #0
   85b98:	4b0d      	ldr	r3, [pc, #52]	; (85bd0 <prvRecursiveMutexPollingTask+0xc8>)
   85b9a:	4798      	blx	r3
   85b9c:	4603      	mov	r3, r0
   85b9e:	2b00      	cmp	r3, #0
   85ba0:	d002      	beq.n	85ba8 <prvRecursiveMutexPollingTask+0xa0>
   85ba2:	4b0c      	ldr	r3, [pc, #48]	; (85bd4 <prvRecursiveMutexPollingTask+0xcc>)
   85ba4:	4798      	blx	r3
   85ba6:	e7fe      	b.n	85ba6 <prvRecursiveMutexPollingTask+0x9e>
		#if configUSE_PREEMPTION == 0
		{
			taskYIELD();
		}
		#endif
	}
   85ba8:	e7b2      	b.n	85b10 <prvRecursiveMutexPollingTask+0x8>
   85baa:	bf00      	nop
   85bac:	2007a6e0 	.word	0x2007a6e0
   85bb0:	00081aa1 	.word	0x00081aa1
   85bb4:	2007a6ec 	.word	0x2007a6ec
   85bb8:	2007a6e8 	.word	0x2007a6e8
   85bbc:	2007a6e4 	.word	0x2007a6e4
   85bc0:	2007a6f8 	.word	0x2007a6f8
   85bc4:	2007a700 	.word	0x2007a700
   85bc8:	000829fd 	.word	0x000829fd
   85bcc:	2007a6fc 	.word	0x2007a6fc
   85bd0:	000826f5 	.word	0x000826f5
   85bd4:	0008139d 	.word	0x0008139d
   85bd8:	00081a3d 	.word	0x00081a3d

00085bdc <xAreRecursiveMutexTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreRecursiveMutexTasksStillRunning( void )
{
   85bdc:	b480      	push	{r7}
   85bde:	b083      	sub	sp, #12
   85be0:	af00      	add	r7, sp, #0
BaseType_t xReturn;
static UBaseType_t uxLastControllingCycles = 0, uxLastBlockingCycles = 0, uxLastPollingCycles = 0;

	/* Is the controlling task still cycling? */
	if( uxLastControllingCycles == uxControllingCycles )
   85be2:	4b1d      	ldr	r3, [pc, #116]	; (85c58 <xAreRecursiveMutexTasksStillRunning+0x7c>)
   85be4:	681a      	ldr	r2, [r3, #0]
   85be6:	4b1d      	ldr	r3, [pc, #116]	; (85c5c <xAreRecursiveMutexTasksStillRunning+0x80>)
   85be8:	681b      	ldr	r3, [r3, #0]
   85bea:	429a      	cmp	r2, r3
   85bec:	d103      	bne.n	85bf6 <xAreRecursiveMutexTasksStillRunning+0x1a>
	{
		xErrorOccurred = pdTRUE;
   85bee:	4b1c      	ldr	r3, [pc, #112]	; (85c60 <xAreRecursiveMutexTasksStillRunning+0x84>)
   85bf0:	2201      	movs	r2, #1
   85bf2:	601a      	str	r2, [r3, #0]
   85bf4:	e003      	b.n	85bfe <xAreRecursiveMutexTasksStillRunning+0x22>
	}
	else
	{
		uxLastControllingCycles = uxControllingCycles;
   85bf6:	4b19      	ldr	r3, [pc, #100]	; (85c5c <xAreRecursiveMutexTasksStillRunning+0x80>)
   85bf8:	681a      	ldr	r2, [r3, #0]
   85bfa:	4b17      	ldr	r3, [pc, #92]	; (85c58 <xAreRecursiveMutexTasksStillRunning+0x7c>)
   85bfc:	601a      	str	r2, [r3, #0]
	}

	/* Is the blocking task still cycling? */
	if( uxLastBlockingCycles == uxBlockingCycles )
   85bfe:	4b19      	ldr	r3, [pc, #100]	; (85c64 <xAreRecursiveMutexTasksStillRunning+0x88>)
   85c00:	681a      	ldr	r2, [r3, #0]
   85c02:	4b19      	ldr	r3, [pc, #100]	; (85c68 <xAreRecursiveMutexTasksStillRunning+0x8c>)
   85c04:	681b      	ldr	r3, [r3, #0]
   85c06:	429a      	cmp	r2, r3
   85c08:	d103      	bne.n	85c12 <xAreRecursiveMutexTasksStillRunning+0x36>
	{
		xErrorOccurred = pdTRUE;
   85c0a:	4b15      	ldr	r3, [pc, #84]	; (85c60 <xAreRecursiveMutexTasksStillRunning+0x84>)
   85c0c:	2201      	movs	r2, #1
   85c0e:	601a      	str	r2, [r3, #0]
   85c10:	e003      	b.n	85c1a <xAreRecursiveMutexTasksStillRunning+0x3e>
	}
	else
	{
		uxLastBlockingCycles = uxBlockingCycles;
   85c12:	4b15      	ldr	r3, [pc, #84]	; (85c68 <xAreRecursiveMutexTasksStillRunning+0x8c>)
   85c14:	681a      	ldr	r2, [r3, #0]
   85c16:	4b13      	ldr	r3, [pc, #76]	; (85c64 <xAreRecursiveMutexTasksStillRunning+0x88>)
   85c18:	601a      	str	r2, [r3, #0]
	}

	/* Is the polling task still cycling? */
	if( uxLastPollingCycles == uxPollingCycles )
   85c1a:	4b14      	ldr	r3, [pc, #80]	; (85c6c <xAreRecursiveMutexTasksStillRunning+0x90>)
   85c1c:	681a      	ldr	r2, [r3, #0]
   85c1e:	4b14      	ldr	r3, [pc, #80]	; (85c70 <xAreRecursiveMutexTasksStillRunning+0x94>)
   85c20:	681b      	ldr	r3, [r3, #0]
   85c22:	429a      	cmp	r2, r3
   85c24:	d103      	bne.n	85c2e <xAreRecursiveMutexTasksStillRunning+0x52>
	{
		xErrorOccurred = pdTRUE;
   85c26:	4b0e      	ldr	r3, [pc, #56]	; (85c60 <xAreRecursiveMutexTasksStillRunning+0x84>)
   85c28:	2201      	movs	r2, #1
   85c2a:	601a      	str	r2, [r3, #0]
   85c2c:	e003      	b.n	85c36 <xAreRecursiveMutexTasksStillRunning+0x5a>
	}
	else
	{
		uxLastPollingCycles = uxPollingCycles;
   85c2e:	4b10      	ldr	r3, [pc, #64]	; (85c70 <xAreRecursiveMutexTasksStillRunning+0x94>)
   85c30:	681a      	ldr	r2, [r3, #0]
   85c32:	4b0e      	ldr	r3, [pc, #56]	; (85c6c <xAreRecursiveMutexTasksStillRunning+0x90>)
   85c34:	601a      	str	r2, [r3, #0]
	}

	if( xErrorOccurred == pdTRUE )
   85c36:	4b0a      	ldr	r3, [pc, #40]	; (85c60 <xAreRecursiveMutexTasksStillRunning+0x84>)
   85c38:	681b      	ldr	r3, [r3, #0]
   85c3a:	2b01      	cmp	r3, #1
   85c3c:	d102      	bne.n	85c44 <xAreRecursiveMutexTasksStillRunning+0x68>
	{
		xReturn = pdFAIL;
   85c3e:	2300      	movs	r3, #0
   85c40:	607b      	str	r3, [r7, #4]
   85c42:	e001      	b.n	85c48 <xAreRecursiveMutexTasksStillRunning+0x6c>
	}
	else
	{
		xReturn = pdTRUE;
   85c44:	2301      	movs	r3, #1
   85c46:	607b      	str	r3, [r7, #4]
	}

	return xReturn;
   85c48:	687b      	ldr	r3, [r7, #4]
}
   85c4a:	4618      	mov	r0, r3
   85c4c:	370c      	adds	r7, #12
   85c4e:	46bd      	mov	sp, r7
   85c50:	f85d 7b04 	ldr.w	r7, [sp], #4
   85c54:	4770      	bx	lr
   85c56:	bf00      	nop
   85c58:	2007a704 	.word	0x2007a704
   85c5c:	2007a6f0 	.word	0x2007a6f0
   85c60:	2007a6e4 	.word	0x2007a6e4
   85c64:	2007a708 	.word	0x2007a708
   85c68:	2007a6f4 	.word	0x2007a6f4
   85c6c:	2007a70c 	.word	0x2007a70c
   85c70:	2007a6f8 	.word	0x2007a6f8

00085c74 <vStartSemaphoreTasks>:
static volatile short sNextCheckVariable = 0;

/*-----------------------------------------------------------*/

void vStartSemaphoreTasks( UBaseType_t uxPriority )
{
   85c74:	b590      	push	{r4, r7, lr}
   85c76:	b08b      	sub	sp, #44	; 0x2c
   85c78:	af04      	add	r7, sp, #16
   85c7a:	6078      	str	r0, [r7, #4]
xSemaphoreParameters *pxFirstSemaphoreParameters, *pxSecondSemaphoreParameters;
const TickType_t xBlockTime = ( TickType_t ) 100;
   85c7c:	2364      	movs	r3, #100	; 0x64
   85c7e:	617b      	str	r3, [r7, #20]

	/* Create the structure used to pass parameters to the first two tasks. */
	pxFirstSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
   85c80:	200c      	movs	r0, #12
   85c82:	4b45      	ldr	r3, [pc, #276]	; (85d98 <vStartSemaphoreTasks+0x124>)
   85c84:	4798      	blx	r3
   85c86:	6138      	str	r0, [r7, #16]

	if( pxFirstSemaphoreParameters != NULL )
   85c88:	693b      	ldr	r3, [r7, #16]
   85c8a:	2b00      	cmp	r3, #0
   85c8c:	d03c      	beq.n	85d08 <vStartSemaphoreTasks+0x94>
	{
		/* Create the semaphore used by the first two tasks. */
		pxFirstSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
   85c8e:	2001      	movs	r0, #1
   85c90:	2100      	movs	r1, #0
   85c92:	2203      	movs	r2, #3
   85c94:	4b41      	ldr	r3, [pc, #260]	; (85d9c <vStartSemaphoreTasks+0x128>)
   85c96:	4798      	blx	r3
   85c98:	4602      	mov	r2, r0
   85c9a:	693b      	ldr	r3, [r7, #16]
   85c9c:	601a      	str	r2, [r3, #0]
		xSemaphoreGive( pxFirstSemaphoreParameters->xSemaphore );
   85c9e:	693b      	ldr	r3, [r7, #16]
   85ca0:	681b      	ldr	r3, [r3, #0]
   85ca2:	4618      	mov	r0, r3
   85ca4:	2100      	movs	r1, #0
   85ca6:	2200      	movs	r2, #0
   85ca8:	2300      	movs	r3, #0
   85caa:	4c3d      	ldr	r4, [pc, #244]	; (85da0 <vStartSemaphoreTasks+0x12c>)
   85cac:	47a0      	blx	r4

		if( pxFirstSemaphoreParameters->xSemaphore != NULL )
   85cae:	693b      	ldr	r3, [r7, #16]
   85cb0:	681b      	ldr	r3, [r3, #0]
   85cb2:	2b00      	cmp	r3, #0
   85cb4:	d028      	beq.n	85d08 <vStartSemaphoreTasks+0x94>
		{
			/* Create the variable which is to be shared by the first two tasks. */
			pxFirstSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
   85cb6:	2004      	movs	r0, #4
   85cb8:	4b37      	ldr	r3, [pc, #220]	; (85d98 <vStartSemaphoreTasks+0x124>)
   85cba:	4798      	blx	r3
   85cbc:	4602      	mov	r2, r0
   85cbe:	693b      	ldr	r3, [r7, #16]
   85cc0:	605a      	str	r2, [r3, #4]

			/* Initialise the share variable to the value the tasks expect. */
			*( pxFirstSemaphoreParameters->pulSharedVariable ) = semtstNON_BLOCKING_EXPECTED_VALUE;
   85cc2:	693b      	ldr	r3, [r7, #16]
   85cc4:	685b      	ldr	r3, [r3, #4]
   85cc6:	22ff      	movs	r2, #255	; 0xff
   85cc8:	601a      	str	r2, [r3, #0]

			/* The first two tasks do not block on semaphore calls. */
			pxFirstSemaphoreParameters->xBlockTime = ( TickType_t ) 0;
   85cca:	693b      	ldr	r3, [r7, #16]
   85ccc:	2200      	movs	r2, #0
   85cce:	609a      	str	r2, [r3, #8]

			/* Spawn the first two tasks.  As they poll they operate at the idle priority. */
			xTaskCreate( prvSemaphoreTest, "PolSEM1", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
   85cd0:	2300      	movs	r3, #0
   85cd2:	9300      	str	r3, [sp, #0]
   85cd4:	2300      	movs	r3, #0
   85cd6:	9301      	str	r3, [sp, #4]
   85cd8:	2300      	movs	r3, #0
   85cda:	9302      	str	r3, [sp, #8]
   85cdc:	2300      	movs	r3, #0
   85cde:	9303      	str	r3, [sp, #12]
   85ce0:	4830      	ldr	r0, [pc, #192]	; (85da4 <vStartSemaphoreTasks+0x130>)
   85ce2:	4931      	ldr	r1, [pc, #196]	; (85da8 <vStartSemaphoreTasks+0x134>)
   85ce4:	2282      	movs	r2, #130	; 0x82
   85ce6:	693b      	ldr	r3, [r7, #16]
   85ce8:	4c30      	ldr	r4, [pc, #192]	; (85dac <vStartSemaphoreTasks+0x138>)
   85cea:	47a0      	blx	r4
			xTaskCreate( prvSemaphoreTest, "PolSEM2", semtstSTACK_SIZE, ( void * ) pxFirstSemaphoreParameters, tskIDLE_PRIORITY, ( TaskHandle_t * ) NULL );
   85cec:	2300      	movs	r3, #0
   85cee:	9300      	str	r3, [sp, #0]
   85cf0:	2300      	movs	r3, #0
   85cf2:	9301      	str	r3, [sp, #4]
   85cf4:	2300      	movs	r3, #0
   85cf6:	9302      	str	r3, [sp, #8]
   85cf8:	2300      	movs	r3, #0
   85cfa:	9303      	str	r3, [sp, #12]
   85cfc:	4829      	ldr	r0, [pc, #164]	; (85da4 <vStartSemaphoreTasks+0x130>)
   85cfe:	492c      	ldr	r1, [pc, #176]	; (85db0 <vStartSemaphoreTasks+0x13c>)
   85d00:	2282      	movs	r2, #130	; 0x82
   85d02:	693b      	ldr	r3, [r7, #16]
   85d04:	4c29      	ldr	r4, [pc, #164]	; (85dac <vStartSemaphoreTasks+0x138>)
   85d06:	47a0      	blx	r4
		}
	}

	/* Do exactly the same to create the second set of tasks, only this time 
	provide a block time for the semaphore calls. */
	pxSecondSemaphoreParameters = ( xSemaphoreParameters * ) pvPortMalloc( sizeof( xSemaphoreParameters ) );
   85d08:	200c      	movs	r0, #12
   85d0a:	4b23      	ldr	r3, [pc, #140]	; (85d98 <vStartSemaphoreTasks+0x124>)
   85d0c:	4798      	blx	r3
   85d0e:	60f8      	str	r0, [r7, #12]
	if( pxSecondSemaphoreParameters != NULL )
   85d10:	68fb      	ldr	r3, [r7, #12]
   85d12:	2b00      	cmp	r3, #0
   85d14:	d03d      	beq.n	85d92 <vStartSemaphoreTasks+0x11e>
	{
		pxSecondSemaphoreParameters->xSemaphore = xSemaphoreCreateBinary();
   85d16:	2001      	movs	r0, #1
   85d18:	2100      	movs	r1, #0
   85d1a:	2203      	movs	r2, #3
   85d1c:	4b1f      	ldr	r3, [pc, #124]	; (85d9c <vStartSemaphoreTasks+0x128>)
   85d1e:	4798      	blx	r3
   85d20:	4602      	mov	r2, r0
   85d22:	68fb      	ldr	r3, [r7, #12]
   85d24:	601a      	str	r2, [r3, #0]
		xSemaphoreGive( pxSecondSemaphoreParameters->xSemaphore );
   85d26:	68fb      	ldr	r3, [r7, #12]
   85d28:	681b      	ldr	r3, [r3, #0]
   85d2a:	4618      	mov	r0, r3
   85d2c:	2100      	movs	r1, #0
   85d2e:	2200      	movs	r2, #0
   85d30:	2300      	movs	r3, #0
   85d32:	4c1b      	ldr	r4, [pc, #108]	; (85da0 <vStartSemaphoreTasks+0x12c>)
   85d34:	47a0      	blx	r4

		if( pxSecondSemaphoreParameters->xSemaphore != NULL )
   85d36:	68fb      	ldr	r3, [r7, #12]
   85d38:	681b      	ldr	r3, [r3, #0]
   85d3a:	2b00      	cmp	r3, #0
   85d3c:	d029      	beq.n	85d92 <vStartSemaphoreTasks+0x11e>
		{
			pxSecondSemaphoreParameters->pulSharedVariable = ( uint32_t * ) pvPortMalloc( sizeof( uint32_t ) );
   85d3e:	2004      	movs	r0, #4
   85d40:	4b15      	ldr	r3, [pc, #84]	; (85d98 <vStartSemaphoreTasks+0x124>)
   85d42:	4798      	blx	r3
   85d44:	4602      	mov	r2, r0
   85d46:	68fb      	ldr	r3, [r7, #12]
   85d48:	605a      	str	r2, [r3, #4]
			*( pxSecondSemaphoreParameters->pulSharedVariable ) = semtstBLOCKING_EXPECTED_VALUE;
   85d4a:	68fb      	ldr	r3, [r7, #12]
   85d4c:	685b      	ldr	r3, [r3, #4]
   85d4e:	f640 72ff 	movw	r2, #4095	; 0xfff
   85d52:	601a      	str	r2, [r3, #0]
			pxSecondSemaphoreParameters->xBlockTime = xBlockTime / portTICK_PERIOD_MS;
   85d54:	68fb      	ldr	r3, [r7, #12]
   85d56:	697a      	ldr	r2, [r7, #20]
   85d58:	609a      	str	r2, [r3, #8]

			xTaskCreate( prvSemaphoreTest, "BlkSEM1", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
   85d5a:	687b      	ldr	r3, [r7, #4]
   85d5c:	9300      	str	r3, [sp, #0]
   85d5e:	2300      	movs	r3, #0
   85d60:	9301      	str	r3, [sp, #4]
   85d62:	2300      	movs	r3, #0
   85d64:	9302      	str	r3, [sp, #8]
   85d66:	2300      	movs	r3, #0
   85d68:	9303      	str	r3, [sp, #12]
   85d6a:	480e      	ldr	r0, [pc, #56]	; (85da4 <vStartSemaphoreTasks+0x130>)
   85d6c:	4911      	ldr	r1, [pc, #68]	; (85db4 <vStartSemaphoreTasks+0x140>)
   85d6e:	2282      	movs	r2, #130	; 0x82
   85d70:	68fb      	ldr	r3, [r7, #12]
   85d72:	4c0e      	ldr	r4, [pc, #56]	; (85dac <vStartSemaphoreTasks+0x138>)
   85d74:	47a0      	blx	r4
			xTaskCreate( prvSemaphoreTest, "BlkSEM2", semtstSTACK_SIZE, ( void * ) pxSecondSemaphoreParameters, uxPriority, ( TaskHandle_t * ) NULL );
   85d76:	687b      	ldr	r3, [r7, #4]
   85d78:	9300      	str	r3, [sp, #0]
   85d7a:	2300      	movs	r3, #0
   85d7c:	9301      	str	r3, [sp, #4]
   85d7e:	2300      	movs	r3, #0
   85d80:	9302      	str	r3, [sp, #8]
   85d82:	2300      	movs	r3, #0
   85d84:	9303      	str	r3, [sp, #12]
   85d86:	4807      	ldr	r0, [pc, #28]	; (85da4 <vStartSemaphoreTasks+0x130>)
   85d88:	490b      	ldr	r1, [pc, #44]	; (85db8 <vStartSemaphoreTasks+0x144>)
   85d8a:	2282      	movs	r2, #130	; 0x82
   85d8c:	68fb      	ldr	r3, [r7, #12]
   85d8e:	4c07      	ldr	r4, [pc, #28]	; (85dac <vStartSemaphoreTasks+0x138>)
   85d90:	47a0      	blx	r4
	is not being used.  The call to vQueueAddToRegistry() will be removed
	by the pre-processor if configQUEUE_REGISTRY_SIZE is not defined or is 
	defined to be less than 1. */
	vQueueAddToRegistry( ( QueueHandle_t ) pxFirstSemaphoreParameters->xSemaphore, "Counting_Sem_1" );
	vQueueAddToRegistry( ( QueueHandle_t ) pxSecondSemaphoreParameters->xSemaphore, "Counting_Sem_2" );
}
   85d92:	371c      	adds	r7, #28
   85d94:	46bd      	mov	sp, r7
   85d96:	bd90      	pop	{r4, r7, pc}
   85d98:	000814c1 	.word	0x000814c1
   85d9c:	00081919 	.word	0x00081919
   85da0:	00081b69 	.word	0x00081b69
   85da4:	00085dbd 	.word	0x00085dbd
   85da8:	000867a4 	.word	0x000867a4
   85dac:	000823d5 	.word	0x000823d5
   85db0:	000867ac 	.word	0x000867ac
   85db4:	000867b4 	.word	0x000867b4
   85db8:	000867bc 	.word	0x000867bc

00085dbc <prvSemaphoreTest>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvSemaphoreTest, pvParameters )
{
   85dbc:	b590      	push	{r4, r7, lr}
   85dbe:	b089      	sub	sp, #36	; 0x24
   85dc0:	af00      	add	r7, sp, #0
   85dc2:	6078      	str	r0, [r7, #4]
xSemaphoreParameters *pxParameters;
volatile uint32_t *pulSharedVariable, ulExpectedValue;
uint32_t ulCounter;
short sError = pdFALSE, sCheckVariableToUse;
   85dc4:	2300      	movs	r3, #0
   85dc6:	837b      	strh	r3, [r7, #26]

	/* See which check variable to use.  sNextCheckVariable is not semaphore 
	protected! */
	portENTER_CRITICAL();
   85dc8:	4b3c      	ldr	r3, [pc, #240]	; (85ebc <prvSemaphoreTest+0x100>)
   85dca:	4798      	blx	r3
		sCheckVariableToUse = sNextCheckVariable;
   85dcc:	4b3c      	ldr	r3, [pc, #240]	; (85ec0 <prvSemaphoreTest+0x104>)
   85dce:	881b      	ldrh	r3, [r3, #0]
   85dd0:	833b      	strh	r3, [r7, #24]
		sNextCheckVariable++;
   85dd2:	4b3b      	ldr	r3, [pc, #236]	; (85ec0 <prvSemaphoreTest+0x104>)
   85dd4:	881b      	ldrh	r3, [r3, #0]
   85dd6:	b29b      	uxth	r3, r3
   85dd8:	b29b      	uxth	r3, r3
   85dda:	3301      	adds	r3, #1
   85ddc:	b29a      	uxth	r2, r3
   85dde:	4b38      	ldr	r3, [pc, #224]	; (85ec0 <prvSemaphoreTest+0x104>)
   85de0:	801a      	strh	r2, [r3, #0]
	portEXIT_CRITICAL();
   85de2:	4b38      	ldr	r3, [pc, #224]	; (85ec4 <prvSemaphoreTest+0x108>)
   85de4:	4798      	blx	r3

	/* A structure is passed in as the parameter.  This contains the shared 
	variable being guarded. */
	pxParameters = ( xSemaphoreParameters * ) pvParameters;
   85de6:	687b      	ldr	r3, [r7, #4]
   85de8:	617b      	str	r3, [r7, #20]
	pulSharedVariable = pxParameters->pulSharedVariable;
   85dea:	697b      	ldr	r3, [r7, #20]
   85dec:	685b      	ldr	r3, [r3, #4]
   85dee:	613b      	str	r3, [r7, #16]

	/* If we are blocking we use a much higher count to ensure loads of context
	switches occur during the count. */
	if( pxParameters->xBlockTime > ( TickType_t ) 0 )
   85df0:	697b      	ldr	r3, [r7, #20]
   85df2:	689b      	ldr	r3, [r3, #8]
   85df4:	2b00      	cmp	r3, #0
   85df6:	d003      	beq.n	85e00 <prvSemaphoreTest+0x44>
	{
		ulExpectedValue = semtstBLOCKING_EXPECTED_VALUE;
   85df8:	f640 73ff 	movw	r3, #4095	; 0xfff
   85dfc:	60fb      	str	r3, [r7, #12]
   85dfe:	e001      	b.n	85e04 <prvSemaphoreTest+0x48>
	}
	else
	{
		ulExpectedValue = semtstNON_BLOCKING_EXPECTED_VALUE;
   85e00:	23ff      	movs	r3, #255	; 0xff
   85e02:	60fb      	str	r3, [r7, #12]
	}

	for( ;; )
	{
		/* Try to obtain the semaphore. */
		if( xSemaphoreTake( pxParameters->xSemaphore, pxParameters->xBlockTime ) == pdPASS )
   85e04:	697b      	ldr	r3, [r7, #20]
   85e06:	681a      	ldr	r2, [r3, #0]
   85e08:	697b      	ldr	r3, [r7, #20]
   85e0a:	689b      	ldr	r3, [r3, #8]
   85e0c:	4610      	mov	r0, r2
   85e0e:	2100      	movs	r1, #0
   85e10:	461a      	mov	r2, r3
   85e12:	2300      	movs	r3, #0
   85e14:	4c2c      	ldr	r4, [pc, #176]	; (85ec8 <prvSemaphoreTest+0x10c>)
   85e16:	47a0      	blx	r4
   85e18:	4603      	mov	r3, r0
   85e1a:	2b01      	cmp	r3, #1
   85e1c:	d145      	bne.n	85eaa <prvSemaphoreTest+0xee>
		{
			/* We have the semaphore and so expect any other tasks using the
			shared variable to have left it in the state we expect to find
			it. */
			if( *pulSharedVariable != ulExpectedValue )
   85e1e:	693b      	ldr	r3, [r7, #16]
   85e20:	681a      	ldr	r2, [r3, #0]
   85e22:	68fb      	ldr	r3, [r7, #12]
   85e24:	429a      	cmp	r2, r3
   85e26:	d001      	beq.n	85e2c <prvSemaphoreTest+0x70>
			{
				sError = pdTRUE;
   85e28:	2301      	movs	r3, #1
   85e2a:	837b      	strh	r3, [r7, #26]
			}
			
			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
   85e2c:	2300      	movs	r3, #0
   85e2e:	61fb      	str	r3, [r7, #28]
   85e30:	e00c      	b.n	85e4c <prvSemaphoreTest+0x90>
			{
				*pulSharedVariable = ulCounter;
   85e32:	693b      	ldr	r3, [r7, #16]
   85e34:	69fa      	ldr	r2, [r7, #28]
   85e36:	601a      	str	r2, [r3, #0]
				if( *pulSharedVariable != ulCounter )
   85e38:	693b      	ldr	r3, [r7, #16]
   85e3a:	681a      	ldr	r2, [r3, #0]
   85e3c:	69fb      	ldr	r3, [r7, #28]
   85e3e:	429a      	cmp	r2, r3
   85e40:	d001      	beq.n	85e46 <prvSemaphoreTest+0x8a>
				{
					sError = pdTRUE;
   85e42:	2301      	movs	r3, #1
   85e44:	837b      	strh	r3, [r7, #26]
			}
			
			/* Clear the variable, then count it back up to the expected value
			before releasing the semaphore.  Would expect a context switch or
			two during this time. */
			for( ulCounter = ( uint32_t ) 0; ulCounter <= ulExpectedValue; ulCounter++ )
   85e46:	69fb      	ldr	r3, [r7, #28]
   85e48:	3301      	adds	r3, #1
   85e4a:	61fb      	str	r3, [r7, #28]
   85e4c:	68fb      	ldr	r3, [r7, #12]
   85e4e:	69fa      	ldr	r2, [r7, #28]
   85e50:	429a      	cmp	r2, r3
   85e52:	d9ee      	bls.n	85e32 <prvSemaphoreTest+0x76>
				}
			}

			/* Release the semaphore, and if no errors have occurred increment the check
			variable. */
			if(	xSemaphoreGive( pxParameters->xSemaphore ) == pdFALSE )
   85e54:	697b      	ldr	r3, [r7, #20]
   85e56:	681b      	ldr	r3, [r3, #0]
   85e58:	4618      	mov	r0, r3
   85e5a:	2100      	movs	r1, #0
   85e5c:	2200      	movs	r2, #0
   85e5e:	2300      	movs	r3, #0
   85e60:	4c1a      	ldr	r4, [pc, #104]	; (85ecc <prvSemaphoreTest+0x110>)
   85e62:	47a0      	blx	r4
   85e64:	4603      	mov	r3, r0
   85e66:	2b00      	cmp	r3, #0
   85e68:	d101      	bne.n	85e6e <prvSemaphoreTest+0xb2>
			{
				sError = pdTRUE;
   85e6a:	2301      	movs	r3, #1
   85e6c:	837b      	strh	r3, [r7, #26]
			}

			if( sError == pdFALSE )
   85e6e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
   85e72:	2b00      	cmp	r3, #0
   85e74:	d10f      	bne.n	85e96 <prvSemaphoreTest+0xda>
			{
				if( sCheckVariableToUse < semtstNUM_TASKS )
   85e76:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
   85e7a:	2b03      	cmp	r3, #3
   85e7c:	dc0b      	bgt.n	85e96 <prvSemaphoreTest+0xda>
				{
					( sCheckVariables[ sCheckVariableToUse ] )++;
   85e7e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
   85e82:	4b13      	ldr	r3, [pc, #76]	; (85ed0 <prvSemaphoreTest+0x114>)
   85e84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   85e88:	b29b      	uxth	r3, r3
   85e8a:	b29b      	uxth	r3, r3
   85e8c:	3301      	adds	r3, #1
   85e8e:	b299      	uxth	r1, r3
   85e90:	4b0f      	ldr	r3, [pc, #60]	; (85ed0 <prvSemaphoreTest+0x114>)
   85e92:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			/* If we have a block time then we are running at a priority higher
			than the idle priority.  This task takes a long time to complete
			a cycle	(deliberately so to test the guarding) so will be starving
			out lower priority tasks.  Block for some time to allow give lower
			priority tasks some processor time. */
			vTaskDelay( pxParameters->xBlockTime * semtstDELAY_FACTOR );
   85e96:	697b      	ldr	r3, [r7, #20]
   85e98:	689a      	ldr	r2, [r3, #8]
   85e9a:	4613      	mov	r3, r2
   85e9c:	009b      	lsls	r3, r3, #2
   85e9e:	4413      	add	r3, r2
   85ea0:	005b      	lsls	r3, r3, #1
   85ea2:	4618      	mov	r0, r3
   85ea4:	4b0b      	ldr	r3, [pc, #44]	; (85ed4 <prvSemaphoreTest+0x118>)
   85ea6:	4798      	blx	r3
   85ea8:	e006      	b.n	85eb8 <prvSemaphoreTest+0xfc>
		}
		else
		{
			if( pxParameters->xBlockTime == ( TickType_t ) 0 )
   85eaa:	697b      	ldr	r3, [r7, #20]
   85eac:	689b      	ldr	r3, [r3, #8]
   85eae:	2b00      	cmp	r3, #0
   85eb0:	d102      	bne.n	85eb8 <prvSemaphoreTest+0xfc>
			{
				/* We have not got the semaphore yet, so no point using the
				processor.  We are not blocking when attempting to obtain the
				semaphore. */
				taskYIELD();
   85eb2:	4b09      	ldr	r3, [pc, #36]	; (85ed8 <prvSemaphoreTest+0x11c>)
   85eb4:	4798      	blx	r3
			}
		}
	}
   85eb6:	e7a5      	b.n	85e04 <prvSemaphoreTest+0x48>
   85eb8:	e7a4      	b.n	85e04 <prvSemaphoreTest+0x48>
   85eba:	bf00      	nop
   85ebc:	00081321 	.word	0x00081321
   85ec0:	2007a718 	.word	0x2007a718
   85ec4:	00081365 	.word	0x00081365
   85ec8:	00081e29 	.word	0x00081e29
   85ecc:	00081b69 	.word	0x00081b69
   85ed0:	2007a710 	.word	0x2007a710
   85ed4:	00082659 	.word	0x00082659
   85ed8:	00081301 	.word	0x00081301

00085edc <xAreSemaphoreTasksStillRunning>:
}
/*-----------------------------------------------------------*/

/* This is called to check that all the created tasks are still running. */
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
   85edc:	b480      	push	{r7}
   85ede:	b083      	sub	sp, #12
   85ee0:	af00      	add	r7, sp, #0
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;
   85ee2:	2301      	movs	r3, #1
   85ee4:	603b      	str	r3, [r7, #0]

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
   85ee6:	2300      	movs	r3, #0
   85ee8:	607b      	str	r3, [r7, #4]
   85eea:	e01a      	b.n	85f22 <xAreSemaphoreTasksStillRunning+0x46>
	{
		if( sLastCheckVariables[ xTask ] == sCheckVariables[ xTask ] )
   85eec:	4b12      	ldr	r3, [pc, #72]	; (85f38 <xAreSemaphoreTasksStillRunning+0x5c>)
   85eee:	687a      	ldr	r2, [r7, #4]
   85ef0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   85ef4:	4b11      	ldr	r3, [pc, #68]	; (85f3c <xAreSemaphoreTasksStillRunning+0x60>)
   85ef6:	6879      	ldr	r1, [r7, #4]
   85ef8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
   85efc:	b29b      	uxth	r3, r3
   85efe:	b212      	sxth	r2, r2
   85f00:	b21b      	sxth	r3, r3
   85f02:	429a      	cmp	r2, r3
   85f04:	d101      	bne.n	85f0a <xAreSemaphoreTasksStillRunning+0x2e>
		{
			xReturn = pdFALSE;
   85f06:	2300      	movs	r3, #0
   85f08:	603b      	str	r3, [r7, #0]
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
   85f0a:	4b0c      	ldr	r3, [pc, #48]	; (85f3c <xAreSemaphoreTasksStillRunning+0x60>)
   85f0c:	687a      	ldr	r2, [r7, #4]
   85f0e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   85f12:	b299      	uxth	r1, r3
   85f14:	4b08      	ldr	r3, [pc, #32]	; (85f38 <xAreSemaphoreTasksStillRunning+0x5c>)
   85f16:	687a      	ldr	r2, [r7, #4]
   85f18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
BaseType_t xAreSemaphoreTasksStillRunning( void )
{
static short sLastCheckVariables[ semtstNUM_TASKS ] = { 0 };
BaseType_t xTask, xReturn = pdTRUE;

	for( xTask = 0; xTask < semtstNUM_TASKS; xTask++ )
   85f1c:	687b      	ldr	r3, [r7, #4]
   85f1e:	3301      	adds	r3, #1
   85f20:	607b      	str	r3, [r7, #4]
   85f22:	687b      	ldr	r3, [r7, #4]
   85f24:	2b03      	cmp	r3, #3
   85f26:	dde1      	ble.n	85eec <xAreSemaphoreTasksStillRunning+0x10>
		}

		sLastCheckVariables[ xTask ] = sCheckVariables[ xTask ];
	}

	return xReturn;
   85f28:	683b      	ldr	r3, [r7, #0]
}
   85f2a:	4618      	mov	r0, r3
   85f2c:	370c      	adds	r7, #12
   85f2e:	46bd      	mov	sp, r7
   85f30:	f85d 7b04 	ldr.w	r7, [sp], #4
   85f34:	4770      	bx	lr
   85f36:	bf00      	nop
   85f38:	2007a71c 	.word	0x2007a71c
   85f3c:	2007a710 	.word	0x2007a710

00085f40 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   85f40:	b480      	push	{r7}
   85f42:	b085      	sub	sp, #20
   85f44:	af00      	add	r7, sp, #0
   85f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   85f48:	687b      	ldr	r3, [r7, #4]
   85f4a:	f003 0307 	and.w	r3, r3, #7
   85f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   85f50:	4b0c      	ldr	r3, [pc, #48]	; (85f84 <NVIC_SetPriorityGrouping+0x44>)
   85f52:	68db      	ldr	r3, [r3, #12]
   85f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   85f56:	68ba      	ldr	r2, [r7, #8]
   85f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   85f5c:	4013      	ands	r3, r2
   85f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   85f60:	68fb      	ldr	r3, [r7, #12]
   85f62:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   85f64:	68bb      	ldr	r3, [r7, #8]
   85f66:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   85f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   85f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   85f70:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   85f72:	4b04      	ldr	r3, [pc, #16]	; (85f84 <NVIC_SetPriorityGrouping+0x44>)
   85f74:	68ba      	ldr	r2, [r7, #8]
   85f76:	60da      	str	r2, [r3, #12]
}
   85f78:	3714      	adds	r7, #20
   85f7a:	46bd      	mov	sp, r7
   85f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   85f80:	4770      	bx	lr
   85f82:	bf00      	nop
   85f84:	e000ed00 	.word	0xe000ed00

00085f88 <main>:

/* See the documentation page for this demo on the FreeRTOS.org web site for
full information - including hardware setup requirements. */

int main( void )
{
   85f88:	b580      	push	{r7, lr}
   85f8a:	af00      	add	r7, sp, #0
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
   85f8c:	4b05      	ldr	r3, [pc, #20]	; (85fa4 <main+0x1c>)
   85f8e:	4798      	blx	r3
	gpio_configure_pin(PIO_PB14_IDX, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   85f90:	202e      	movs	r0, #46	; 0x2e
   85f92:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   85f96:	4b04      	ldr	r3, [pc, #16]	; (85fa8 <main+0x20>)
   85f98:	4798      	blx	r3
	{
		main_blinky();
	}
	#else
	{
		main_full();
   85f9a:	4b04      	ldr	r3, [pc, #16]	; (85fac <main+0x24>)
   85f9c:	4798      	blx	r3
	}
	#endif

	return 0;
   85f9e:	2300      	movs	r3, #0
}
   85fa0:	4618      	mov	r0, r3
   85fa2:	bd80      	pop	{r7, pc}
   85fa4:	00085fb1 	.word	0x00085fb1
   85fa8:	000807c1 	.word	0x000807c1
   85fac:	00085ffd 	.word	0x00085ffd

00085fb0 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
   85fb0:	b580      	push	{r7, lr}
   85fb2:	af00      	add	r7, sp, #0
extern void SystemCoreClockUpdate( void );

	/* ASF function to setup clocking. */
	sysclk_init();
   85fb4:	4b04      	ldr	r3, [pc, #16]	; (85fc8 <prvSetupHardware+0x18>)
   85fb6:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping( 0 );
   85fb8:	2000      	movs	r0, #0
   85fba:	4b04      	ldr	r3, [pc, #16]	; (85fcc <prvSetupHardware+0x1c>)
   85fbc:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   85fbe:	4b04      	ldr	r3, [pc, #16]	; (85fd0 <prvSetupHardware+0x20>)
   85fc0:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   85fc2:	4b04      	ldr	r3, [pc, #16]	; (85fd4 <prvSetupHardware+0x24>)
   85fc4:	4798      	blx	r3
}
   85fc6:	bd80      	pop	{r7, pc}
   85fc8:	00080431 	.word	0x00080431
   85fcc:	00085f41 	.word	0x00085f41
   85fd0:	00080499 	.word	0x00080499
   85fd4:	000861b1 	.word	0x000861b1

00085fd8 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
   85fd8:	b580      	push	{r7, lr}
   85fda:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   85fdc:	4b01      	ldr	r3, [pc, #4]	; (85fe4 <vApplicationMallocFailedHook+0xc>)
   85fde:	4798      	blx	r3
	for( ;; );
   85fe0:	e7fe      	b.n	85fe0 <vApplicationMallocFailedHook+0x8>
   85fe2:	bf00      	nop
   85fe4:	0008139d 	.word	0x0008139d

00085fe8 <vApplicationStackOverflowHook>:
	memory allocated by the kernel to any task that has since been deleted. */
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
   85fe8:	b580      	push	{r7, lr}
   85fea:	b082      	sub	sp, #8
   85fec:	af00      	add	r7, sp, #0
   85fee:	6078      	str	r0, [r7, #4]
   85ff0:	6039      	str	r1, [r7, #0]
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   85ff2:	4b01      	ldr	r3, [pc, #4]	; (85ff8 <vApplicationStackOverflowHook+0x10>)
   85ff4:	4798      	blx	r3
	for( ;; );
   85ff6:	e7fe      	b.n	85ff6 <vApplicationStackOverflowHook+0xe>
   85ff8:	0008139d 	.word	0x0008139d

00085ffc <main_full>:
static void prvCheckTimerCallback( TimerHandle_t xTimer );

/*-----------------------------------------------------------*/

void main_full( void )
{
   85ffc:	b590      	push	{r4, r7, lr}
   85ffe:	b085      	sub	sp, #20
   86000:	af02      	add	r7, sp, #8
TimerHandle_t xCheckTimer = NULL;
   86002:	2300      	movs	r3, #0
   86004:	607b      	str	r3, [r7, #4]

	/* Start all the other standard demo/test tasks.  The have not particular
	functionality, but do demonstrate how to use the FreeRTOS API and test the
	kernel port. */
	vStartIntegerMathTasks( tskIDLE_PRIORITY );
   86006:	2000      	movs	r0, #0
   86008:	4b1b      	ldr	r3, [pc, #108]	; (86078 <main_full+0x7c>)
   8600a:	4798      	blx	r3
	vStartDynamicPriorityTasks();
   8600c:	4b1b      	ldr	r3, [pc, #108]	; (8607c <main_full+0x80>)
   8600e:	4798      	blx	r3
	vStartBlockingQueueTasks( mainBLOCK_Q_PRIORITY );
   86010:	2002      	movs	r0, #2
   86012:	4b1b      	ldr	r3, [pc, #108]	; (86080 <main_full+0x84>)
   86014:	4798      	blx	r3
	vCreateBlockTimeTasks();
   86016:	4b1b      	ldr	r3, [pc, #108]	; (86084 <main_full+0x88>)
   86018:	4798      	blx	r3
	vStartCountingSemaphoreTasks();
   8601a:	4b1b      	ldr	r3, [pc, #108]	; (86088 <main_full+0x8c>)
   8601c:	4798      	blx	r3
	vStartGenericQueueTasks( tskIDLE_PRIORITY );
   8601e:	2000      	movs	r0, #0
   86020:	4b1a      	ldr	r3, [pc, #104]	; (8608c <main_full+0x90>)
   86022:	4798      	blx	r3
	vStartRecursiveMutexTasks();
   86024:	4b1a      	ldr	r3, [pc, #104]	; (86090 <main_full+0x94>)
   86026:	4798      	blx	r3
	vStartPolledQueueTasks( mainQUEUE_POLL_PRIORITY );
   86028:	2002      	movs	r0, #2
   8602a:	4b1a      	ldr	r3, [pc, #104]	; (86094 <main_full+0x98>)
   8602c:	4798      	blx	r3
	vStartSemaphoreTasks( mainSEM_TEST_PRIORITY );
   8602e:	2001      	movs	r0, #1
   86030:	4b19      	ldr	r3, [pc, #100]	; (86098 <main_full+0x9c>)
   86032:	4798      	blx	r3
	vStartLEDFlashTimers( mainNUMBER_OF_FLASH_TIMERS_LEDS );
   86034:	2002      	movs	r0, #2
   86036:	4b19      	ldr	r3, [pc, #100]	; (8609c <main_full+0xa0>)
   86038:	4798      	blx	r3
	//changed vAltStartComTestTasks( mainCOM_TEST_PRIORITY, mainCOM_TEST_BAUD_RATE, mainCOM_TEST_LED );

	/* Create the software timer that performs the 'check' functionality,
	as described at the top of this file. */
	xCheckTimer = xTimerCreate( "CheckTimer",					/* A text name, purely to help debugging. */
   8603a:	4b19      	ldr	r3, [pc, #100]	; (860a0 <main_full+0xa4>)
   8603c:	9300      	str	r3, [sp, #0]
   8603e:	4819      	ldr	r0, [pc, #100]	; (860a4 <main_full+0xa8>)
   86040:	f640 31b8 	movw	r1, #3000	; 0xbb8
   86044:	2201      	movs	r2, #1
   86046:	2300      	movs	r3, #0
   86048:	4c17      	ldr	r4, [pc, #92]	; (860a8 <main_full+0xac>)
   8604a:	47a0      	blx	r4
   8604c:	6078      	str	r0, [r7, #4]
								pdTRUE,							/* This is an auto-reload timer, so xAutoReload is set to pdTRUE. */
								( void * ) 0,					/* The ID is not used, so can be set to anything. */
								prvCheckTimerCallback			/* The callback function that inspects the status of all the other tasks. */
							  );

	if( xCheckTimer != NULL )
   8604e:	687b      	ldr	r3, [r7, #4]
   86050:	2b00      	cmp	r3, #0
   86052:	d00a      	beq.n	8606a <main_full+0x6e>
	{
		xTimerStart( xCheckTimer, mainDONT_BLOCK );
   86054:	4b15      	ldr	r3, [pc, #84]	; (860ac <main_full+0xb0>)
   86056:	4798      	blx	r3
   86058:	4603      	mov	r3, r0
   8605a:	2200      	movs	r2, #0
   8605c:	9200      	str	r2, [sp, #0]
   8605e:	6878      	ldr	r0, [r7, #4]
   86060:	2101      	movs	r1, #1
   86062:	461a      	mov	r2, r3
   86064:	2300      	movs	r3, #0
   86066:	4c12      	ldr	r4, [pc, #72]	; (860b0 <main_full+0xb4>)
   86068:	47a0      	blx	r4
	}

	/* The set of tasks created by the following function call have to be
	created last as they keep account of the number of tasks they expect to see
	running. */
	vCreateSuicidalTasks( mainCREATOR_TASK_PRIORITY );
   8606a:	2003      	movs	r0, #3
   8606c:	4b11      	ldr	r3, [pc, #68]	; (860b4 <main_full+0xb8>)
   8606e:	4798      	blx	r3

	/* Start the scheduler. */
	vTaskStartScheduler();
   86070:	4b11      	ldr	r3, [pc, #68]	; (860b8 <main_full+0xbc>)
   86072:	4798      	blx	r3
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details. */
	for( ;; );
   86074:	e7fe      	b.n	86074 <main_full+0x78>
   86076:	bf00      	nop
   86078:	00085619 	.word	0x00085619
   8607c:	00084a11 	.word	0x00084a11
   86080:	00083dc1 	.word	0x00083dc1
   86084:	000840f5 	.word	0x000840f5
   86088:	00084625 	.word	0x00084625
   8608c:	00084e61 	.word	0x00084e61
   86090:	000858f9 	.word	0x000858f9
   86094:	00085731 	.word	0x00085731
   86098:	00085c75 	.word	0x00085c75
   8609c:	00084dc9 	.word	0x00084dc9
   860a0:	000860bd 	.word	0x000860bd
   860a4:	000867c4 	.word	0x000867c4
   860a8:	000837e5 	.word	0x000837e5
   860ac:	00082c71 	.word	0x00082c71
   860b0:	00083861 	.word	0x00083861
   860b4:	0008483d 	.word	0x0008483d
   860b8:	00082ab1 	.word	0x00082ab1

000860bc <prvCheckTimerCallback>:
}
/*-----------------------------------------------------------*/

static void prvCheckTimerCallback( TimerHandle_t xTimer )
{
   860bc:	b590      	push	{r4, r7, lr}
   860be:	b087      	sub	sp, #28
   860c0:	af02      	add	r7, sp, #8
   860c2:	6078      	str	r0, [r7, #4]
static long lChangedTimerPeriodAlready = pdFALSE;
unsigned long ulErrorFound = pdFALSE;
   860c4:	2300      	movs	r3, #0
   860c6:	60fb      	str	r3, [r7, #12]

	/* Check all the demo tasks (other than the flash tasks) to ensure
	they are all still running, and that none have detected an error. */

	if( xAreIntegerMathsTaskStillRunning() != pdTRUE )
   860c8:	4b2c      	ldr	r3, [pc, #176]	; (8617c <prvCheckTimerCallback+0xc0>)
   860ca:	4798      	blx	r3
   860cc:	4603      	mov	r3, r0
   860ce:	2b01      	cmp	r3, #1
   860d0:	d001      	beq.n	860d6 <prvCheckTimerCallback+0x1a>
	{
		ulErrorFound = pdTRUE;
   860d2:	2301      	movs	r3, #1
   860d4:	60fb      	str	r3, [r7, #12]
	}

	if( xAreDynamicPriorityTasksStillRunning() != pdTRUE )
   860d6:	4b2a      	ldr	r3, [pc, #168]	; (86180 <prvCheckTimerCallback+0xc4>)
   860d8:	4798      	blx	r3
   860da:	4603      	mov	r3, r0
   860dc:	2b01      	cmp	r3, #1
   860de:	d001      	beq.n	860e4 <prvCheckTimerCallback+0x28>
	{
		ulErrorFound = pdTRUE;
   860e0:	2301      	movs	r3, #1
   860e2:	60fb      	str	r3, [r7, #12]
	}

	if( xAreBlockingQueuesStillRunning() != pdTRUE )
   860e4:	4b27      	ldr	r3, [pc, #156]	; (86184 <prvCheckTimerCallback+0xc8>)
   860e6:	4798      	blx	r3
   860e8:	4603      	mov	r3, r0
   860ea:	2b01      	cmp	r3, #1
   860ec:	d001      	beq.n	860f2 <prvCheckTimerCallback+0x36>
	{
		ulErrorFound = pdTRUE;
   860ee:	2301      	movs	r3, #1
   860f0:	60fb      	str	r3, [r7, #12]
	}

	if ( xAreBlockTimeTestTasksStillRunning() != pdTRUE )
   860f2:	4b25      	ldr	r3, [pc, #148]	; (86188 <prvCheckTimerCallback+0xcc>)
   860f4:	4798      	blx	r3
   860f6:	4603      	mov	r3, r0
   860f8:	2b01      	cmp	r3, #1
   860fa:	d001      	beq.n	86100 <prvCheckTimerCallback+0x44>
	{
		ulErrorFound = pdTRUE;
   860fc:	2301      	movs	r3, #1
   860fe:	60fb      	str	r3, [r7, #12]
	}

	if ( xAreGenericQueueTasksStillRunning() != pdTRUE )
   86100:	4b22      	ldr	r3, [pc, #136]	; (8618c <prvCheckTimerCallback+0xd0>)
   86102:	4798      	blx	r3
   86104:	4603      	mov	r3, r0
   86106:	2b01      	cmp	r3, #1
   86108:	d001      	beq.n	8610e <prvCheckTimerCallback+0x52>
	{
		ulErrorFound = pdTRUE;
   8610a:	2301      	movs	r3, #1
   8610c:	60fb      	str	r3, [r7, #12]
	}

	if ( xAreRecursiveMutexTasksStillRunning() != pdTRUE )
   8610e:	4b20      	ldr	r3, [pc, #128]	; (86190 <prvCheckTimerCallback+0xd4>)
   86110:	4798      	blx	r3
   86112:	4603      	mov	r3, r0
   86114:	2b01      	cmp	r3, #1
   86116:	d001      	beq.n	8611c <prvCheckTimerCallback+0x60>
	{
		ulErrorFound = pdTRUE;
   86118:	2301      	movs	r3, #1
   8611a:	60fb      	str	r3, [r7, #12]
	}

	if( xIsCreateTaskStillRunning() != pdTRUE )
   8611c:	4b1d      	ldr	r3, [pc, #116]	; (86194 <prvCheckTimerCallback+0xd8>)
   8611e:	4798      	blx	r3
   86120:	4603      	mov	r3, r0
   86122:	2b01      	cmp	r3, #1
   86124:	d001      	beq.n	8612a <prvCheckTimerCallback+0x6e>
	{
		ulErrorFound = pdTRUE;
   86126:	2301      	movs	r3, #1
   86128:	60fb      	str	r3, [r7, #12]
	}

	if( xArePollingQueuesStillRunning() != pdTRUE )
   8612a:	4b1b      	ldr	r3, [pc, #108]	; (86198 <prvCheckTimerCallback+0xdc>)
   8612c:	4798      	blx	r3
   8612e:	4603      	mov	r3, r0
   86130:	2b01      	cmp	r3, #1
   86132:	d001      	beq.n	86138 <prvCheckTimerCallback+0x7c>
	{
		ulErrorFound = pdTRUE;
   86134:	2301      	movs	r3, #1
   86136:	60fb      	str	r3, [r7, #12]
	}

	if( xAreSemaphoreTasksStillRunning() != pdTRUE )
   86138:	4b18      	ldr	r3, [pc, #96]	; (8619c <prvCheckTimerCallback+0xe0>)
   8613a:	4798      	blx	r3
   8613c:	4603      	mov	r3, r0
   8613e:	2b01      	cmp	r3, #1
   86140:	d001      	beq.n	86146 <prvCheckTimerCallback+0x8a>
	{
		ulErrorFound = pdTRUE;
   86142:	2301      	movs	r3, #1
   86144:	60fb      	str	r3, [r7, #12]
	}

	if( xAreComTestTasksStillRunning() != pdTRUE )
   86146:	4b16      	ldr	r3, [pc, #88]	; (861a0 <prvCheckTimerCallback+0xe4>)
   86148:	4798      	blx	r3
	}

	/* Toggle the check LED to give an indication of the system status.  If
	the LED toggles every mainCHECK_TIMER_PERIOD_MS milliseconds then
	everything is ok.  A faster toggle indicates an error. */
	vParTestToggleLED( mainCHECK_LED );
   8614a:	2002      	movs	r0, #2
   8614c:	4b15      	ldr	r3, [pc, #84]	; (861a4 <prvCheckTimerCallback+0xe8>)
   8614e:	4798      	blx	r3

	/* Have any errors been latch in ulErrorFound?  If so, shorten the
	period of the check timer to mainERROR_CHECK_TIMER_PERIOD_MS milliseconds.
	This will result in an increase in the rate at which mainCHECK_LED
	toggles. */
	if( ulErrorFound != pdFALSE )
   86150:	68fb      	ldr	r3, [r7, #12]
   86152:	2b00      	cmp	r3, #0
   86154:	d00e      	beq.n	86174 <prvCheckTimerCallback+0xb8>
	{
		if( lChangedTimerPeriodAlready == pdFALSE )
   86156:	4b14      	ldr	r3, [pc, #80]	; (861a8 <prvCheckTimerCallback+0xec>)
   86158:	681b      	ldr	r3, [r3, #0]
   8615a:	2b00      	cmp	r3, #0
   8615c:	d10a      	bne.n	86174 <prvCheckTimerCallback+0xb8>
		{
			lChangedTimerPeriodAlready = pdTRUE;
   8615e:	4b12      	ldr	r3, [pc, #72]	; (861a8 <prvCheckTimerCallback+0xec>)
   86160:	2201      	movs	r2, #1
   86162:	601a      	str	r2, [r3, #0]

			/* This call to xTimerChangePeriod() uses a zero block time.
			Functions called from inside of a timer callback function must
			*never* attempt	to block. */
			xTimerChangePeriod( xTimer, ( mainERROR_CHECK_TIMER_PERIOD_MS ), mainDONT_BLOCK );
   86164:	2300      	movs	r3, #0
   86166:	9300      	str	r3, [sp, #0]
   86168:	6878      	ldr	r0, [r7, #4]
   8616a:	2104      	movs	r1, #4
   8616c:	22c8      	movs	r2, #200	; 0xc8
   8616e:	2300      	movs	r3, #0
   86170:	4c0e      	ldr	r4, [pc, #56]	; (861ac <prvCheckTimerCallback+0xf0>)
   86172:	47a0      	blx	r4
		}
	}
}
   86174:	3714      	adds	r7, #20
   86176:	46bd      	mov	sp, r7
   86178:	bd90      	pop	{r4, r7, pc}
   8617a:	bf00      	nop
   8617c:	000856e1 	.word	0x000856e1
   86180:	00084d4d 	.word	0x00084d4d
   86184:	00084059 	.word	0x00084059
   86188:	0008458d 	.word	0x0008458d
   8618c:	000855b5 	.word	0x000855b5
   86190:	00085bdd 	.word	0x00085bdd
   86194:	00084999 	.word	0x00084999
   86198:	000858b5 	.word	0x000858b5
   8619c:	00085edd 	.word	0x00085edd
   861a0:	000845f5 	.word	0x000845f5
   861a4:	00086269 	.word	0x00086269
   861a8:	2007a724 	.word	0x2007a724
   861ac:	00083861 	.word	0x00083861

000861b0 <vParTestInitialise>:
static const uint32_t ulLED[] = { LED2_GPIO, LED0_GPIO, LED1_GPIO };

/*-----------------------------------------------------------*/

void vParTestInitialise( void )
{
   861b0:	b580      	push	{r7, lr}
   861b2:	b082      	sub	sp, #8
   861b4:	af00      	add	r7, sp, #0
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   861b6:	2300      	movs	r3, #0
   861b8:	607b      	str	r3, [r7, #4]
   861ba:	e00f      	b.n	861dc <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   861bc:	4b0a      	ldr	r3, [pc, #40]	; (861e8 <vParTestInitialise+0x38>)
   861be:	687a      	ldr	r2, [r7, #4]
   861c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   861c4:	4618      	mov	r0, r3
   861c6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   861ca:	4b08      	ldr	r3, [pc, #32]	; (861ec <vParTestInitialise+0x3c>)
   861cc:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   861ce:	6878      	ldr	r0, [r7, #4]
   861d0:	2100      	movs	r1, #0
   861d2:	4b07      	ldr	r3, [pc, #28]	; (861f0 <vParTestInitialise+0x40>)
   861d4:	4798      	blx	r3

void vParTestInitialise( void )
{
unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   861d6:	687b      	ldr	r3, [r7, #4]
   861d8:	3301      	adds	r3, #1
   861da:	607b      	str	r3, [r7, #4]
   861dc:	687b      	ldr	r3, [r7, #4]
   861de:	2b02      	cmp	r3, #2
   861e0:	d9ec      	bls.n	861bc <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   861e2:	3708      	adds	r7, #8
   861e4:	46bd      	mov	sp, r7
   861e6:	bd80      	pop	{r7, pc}
   861e8:	000867d0 	.word	0x000867d0
   861ec:	000807c1 	.word	0x000807c1
   861f0:	000861f5 	.word	0x000861f5

000861f4 <vParTestSetLED>:
/*-----------------------------------------------------------*/

void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   861f4:	b580      	push	{r7, lr}
   861f6:	b082      	sub	sp, #8
   861f8:	af00      	add	r7, sp, #0
   861fa:	6078      	str	r0, [r7, #4]
   861fc:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   861fe:	687b      	ldr	r3, [r7, #4]
   86200:	2b02      	cmp	r3, #2
   86202:	d823      	bhi.n	8624c <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   86204:	687b      	ldr	r3, [r7, #4]
   86206:	2b00      	cmp	r3, #0
   86208:	d106      	bne.n	86218 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   8620a:	683b      	ldr	r3, [r7, #0]
   8620c:	2b00      	cmp	r3, #0
   8620e:	bf14      	ite	ne
   86210:	2300      	movne	r3, #0
   86212:	2301      	moveq	r3, #1
   86214:	b2db      	uxtb	r3, r3
   86216:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   86218:	683b      	ldr	r3, [r7, #0]
   8621a:	2b00      	cmp	r3, #0
   8621c:	d00b      	beq.n	86236 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   8621e:	4b0d      	ldr	r3, [pc, #52]	; (86254 <vParTestSetLED+0x60>)
   86220:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   86222:	4b0d      	ldr	r3, [pc, #52]	; (86258 <vParTestSetLED+0x64>)
   86224:	687a      	ldr	r2, [r7, #4]
   86226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8622a:	4618      	mov	r0, r3
   8622c:	4b0b      	ldr	r3, [pc, #44]	; (8625c <vParTestSetLED+0x68>)
   8622e:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   86230:	4b0b      	ldr	r3, [pc, #44]	; (86260 <vParTestSetLED+0x6c>)
   86232:	4798      	blx	r3
   86234:	e00a      	b.n	8624c <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   86236:	4b07      	ldr	r3, [pc, #28]	; (86254 <vParTestSetLED+0x60>)
   86238:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   8623a:	4b07      	ldr	r3, [pc, #28]	; (86258 <vParTestSetLED+0x64>)
   8623c:	687a      	ldr	r2, [r7, #4]
   8623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   86242:	4618      	mov	r0, r3
   86244:	4b07      	ldr	r3, [pc, #28]	; (86264 <vParTestSetLED+0x70>)
   86246:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   86248:	4b05      	ldr	r3, [pc, #20]	; (86260 <vParTestSetLED+0x6c>)
   8624a:	4798      	blx	r3
		}
	}
}
   8624c:	3708      	adds	r7, #8
   8624e:	46bd      	mov	sp, r7
   86250:	bd80      	pop	{r7, pc}
   86252:	bf00      	nop
   86254:	00081321 	.word	0x00081321
   86258:	000867d0 	.word	0x000867d0
   8625c:	0008072d 	.word	0x0008072d
   86260:	00081365 	.word	0x00081365
   86264:	000806f9 	.word	0x000806f9

00086268 <vParTestToggleLED>:
/*-----------------------------------------------------------*/

void vParTestToggleLED( unsigned portBASE_TYPE uxLED )
{
   86268:	b580      	push	{r7, lr}
   8626a:	b082      	sub	sp, #8
   8626c:	af00      	add	r7, sp, #0
   8626e:	6078      	str	r0, [r7, #4]
	if( uxLED < partestNUM_LEDS )
   86270:	687b      	ldr	r3, [r7, #4]
   86272:	2b02      	cmp	r3, #2
   86274:	d806      	bhi.n	86284 <vParTestToggleLED+0x1c>
	{
		taskENTER_CRITICAL();
   86276:	4b05      	ldr	r3, [pc, #20]	; (8628c <vParTestToggleLED+0x24>)
   86278:	4798      	blx	r3
		{
			gpio_toggle_pin(PIO_PB14_IDX); //ulLED[ uxLED ] );
   8627a:	202e      	movs	r0, #46	; 0x2e
   8627c:	4b04      	ldr	r3, [pc, #16]	; (86290 <vParTestToggleLED+0x28>)
   8627e:	4798      	blx	r3
		}
		taskEXIT_CRITICAL();
   86280:	4b04      	ldr	r3, [pc, #16]	; (86294 <vParTestToggleLED+0x2c>)
   86282:	4798      	blx	r3
	}
}
   86284:	3708      	adds	r7, #8
   86286:	46bd      	mov	sp, r7
   86288:	bd80      	pop	{r7, pc}
   8628a:	bf00      	nop
   8628c:	00081321 	.word	0x00081321
   86290:	00080761 	.word	0x00080761
   86294:	00081365 	.word	0x00081365

00086298 <USART0_Handler>:
 * inside an interrupt service routine.  The serial driver used here is *not*
 * intended to represent an efficient implementation.  Real applications should
 * make use of the USARTS peripheral DMA channel (PDC).
 */
void USART0_Handler( void )
{
   86298:	b590      	push	{r4, r7, lr}
   8629a:	b087      	sub	sp, #28
   8629c:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   8629e:	2300      	movs	r3, #0
   862a0:	60fb      	str	r3, [r7, #12]
uint8_t ucChar;
uint32_t ulChar;
uint32_t ulUSARTStatus, ulUSARTMask;

	ulUSARTStatus = usart_get_status( serUSART_PORT );
   862a2:	4826      	ldr	r0, [pc, #152]	; (8633c <USART0_Handler+0xa4>)
   862a4:	4b26      	ldr	r3, [pc, #152]	; (86340 <USART0_Handler+0xa8>)
   862a6:	4798      	blx	r3
   862a8:	6178      	str	r0, [r7, #20]
	ulUSARTMask = usart_get_interrupt_mask( serUSART_PORT );
   862aa:	4824      	ldr	r0, [pc, #144]	; (8633c <USART0_Handler+0xa4>)
   862ac:	4b25      	ldr	r3, [pc, #148]	; (86344 <USART0_Handler+0xac>)
   862ae:	4798      	blx	r3
   862b0:	6138      	str	r0, [r7, #16]
	ulUSARTStatus &= ulUSARTMask;
   862b2:	697a      	ldr	r2, [r7, #20]
   862b4:	693b      	ldr	r3, [r7, #16]
   862b6:	4013      	ands	r3, r2
   862b8:	617b      	str	r3, [r7, #20]

	if( ( ulUSARTStatus & US_CSR_TXRDY ) != 0UL )
   862ba:	697b      	ldr	r3, [r7, #20]
   862bc:	f003 0302 	and.w	r3, r3, #2
   862c0:	2b00      	cmp	r3, #0
   862c2:	d017      	beq.n	862f4 <USART0_Handler+0x5c>
	{
		/* The interrupt was caused by the TX register becoming empty.  Are
		there any more characters to transmit? */
		if( xQueueReceiveFromISR( xCharsForTx, &ucChar, &xHigherPriorityTaskWoken ) == pdTRUE )
   862c4:	4b20      	ldr	r3, [pc, #128]	; (86348 <USART0_Handler+0xb0>)
   862c6:	6819      	ldr	r1, [r3, #0]
   862c8:	f107 020b 	add.w	r2, r7, #11
   862cc:	f107 030c 	add.w	r3, r7, #12
   862d0:	4608      	mov	r0, r1
   862d2:	4611      	mov	r1, r2
   862d4:	461a      	mov	r2, r3
   862d6:	4b1d      	ldr	r3, [pc, #116]	; (8634c <USART0_Handler+0xb4>)
   862d8:	4798      	blx	r3
   862da:	4603      	mov	r3, r0
   862dc:	2b01      	cmp	r3, #1
   862de:	d105      	bne.n	862ec <USART0_Handler+0x54>
		{
			/* A character was retrieved from the queue so can be sent to the
			USART now. */
			usart_putchar( serUSART_PORT, ( uint32_t ) ucChar );
   862e0:	7afb      	ldrb	r3, [r7, #11]
   862e2:	4816      	ldr	r0, [pc, #88]	; (8633c <USART0_Handler+0xa4>)
   862e4:	4619      	mov	r1, r3
   862e6:	4b1a      	ldr	r3, [pc, #104]	; (86350 <USART0_Handler+0xb8>)
   862e8:	4798      	blx	r3
   862ea:	e003      	b.n	862f4 <USART0_Handler+0x5c>
		}
		else
		{
			usart_disable_interrupt( serUSART_PORT, US_IER_TXRDY );
   862ec:	4813      	ldr	r0, [pc, #76]	; (8633c <USART0_Handler+0xa4>)
   862ee:	2102      	movs	r1, #2
   862f0:	4b18      	ldr	r3, [pc, #96]	; (86354 <USART0_Handler+0xbc>)
   862f2:	4798      	blx	r3
		}
	}

	if( ( ulUSARTStatus & US_CSR_RXRDY ) != 0UL )
   862f4:	697b      	ldr	r3, [r7, #20]
   862f6:	f003 0301 	and.w	r3, r3, #1
   862fa:	2b00      	cmp	r3, #0
   862fc:	d013      	beq.n	86326 <USART0_Handler+0x8e>
	{
		/* A character has been received on the USART, send it to the Rx
		handler task. */
		usart_getchar( serUSART_PORT, &ulChar );
   862fe:	1d3b      	adds	r3, r7, #4
   86300:	480e      	ldr	r0, [pc, #56]	; (8633c <USART0_Handler+0xa4>)
   86302:	4619      	mov	r1, r3
   86304:	4b14      	ldr	r3, [pc, #80]	; (86358 <USART0_Handler+0xc0>)
   86306:	4798      	blx	r3
		ucChar = ( uint8_t ) ( ulChar & 0xffUL );
   86308:	687b      	ldr	r3, [r7, #4]
   8630a:	b2db      	uxtb	r3, r3
   8630c:	72fb      	strb	r3, [r7, #11]
		xQueueSendFromISR( xRxedChars, &ucChar, &xHigherPriorityTaskWoken );
   8630e:	4b13      	ldr	r3, [pc, #76]	; (8635c <USART0_Handler+0xc4>)
   86310:	6819      	ldr	r1, [r3, #0]
   86312:	f107 020b 	add.w	r2, r7, #11
   86316:	f107 030c 	add.w	r3, r7, #12
   8631a:	4608      	mov	r0, r1
   8631c:	4611      	mov	r1, r2
   8631e:	461a      	mov	r2, r3
   86320:	2300      	movs	r3, #0
   86322:	4c0f      	ldr	r4, [pc, #60]	; (86360 <USART0_Handler+0xc8>)
   86324:	47a0      	blx	r4
	the unblocked task has a priority equal to or higher than the currently
	running task (the task this ISR interrupted), then xHigherPriorityTaskWoken
	will have automatically been set to pdTRUE within the queue send or receive
	function.  portEND_SWITCHING_ISR() will then ensure that this ISR returns
	directly to the higher priority unblocked task. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
   86326:	68fb      	ldr	r3, [r7, #12]
   86328:	2b00      	cmp	r3, #0
   8632a:	d003      	beq.n	86334 <USART0_Handler+0x9c>
   8632c:	4b0d      	ldr	r3, [pc, #52]	; (86364 <USART0_Handler+0xcc>)
   8632e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   86332:	601a      	str	r2, [r3, #0]
}
   86334:	371c      	adds	r7, #28
   86336:	46bd      	mov	sp, r7
   86338:	bd90      	pop	{r4, r7, pc}
   8633a:	bf00      	nop
   8633c:	40098000 	.word	0x40098000
   86340:	00080ca1 	.word	0x00080ca1
   86344:	00080c89 	.word	0x00080c89
   86348:	2007a72c 	.word	0x2007a72c
   8634c:	00082025 	.word	0x00082025
   86350:	00080cb9 	.word	0x00080cb9
   86354:	00080c6d 	.word	0x00080c6d
   86358:	00080cfd 	.word	0x00080cfd
   8635c:	2007a728 	.word	0x2007a728
   86360:	00081d2d 	.word	0x00081d2d
   86364:	e000ed04 	.word	0xe000ed04

00086368 <__libc_init_array>:
   86368:	b570      	push	{r4, r5, r6, lr}
   8636a:	4e0f      	ldr	r6, [pc, #60]	; (863a8 <__libc_init_array+0x40>)
   8636c:	4d0f      	ldr	r5, [pc, #60]	; (863ac <__libc_init_array+0x44>)
   8636e:	1b76      	subs	r6, r6, r5
   86370:	10b6      	asrs	r6, r6, #2
   86372:	d007      	beq.n	86384 <__libc_init_array+0x1c>
   86374:	3d04      	subs	r5, #4
   86376:	2400      	movs	r4, #0
   86378:	3401      	adds	r4, #1
   8637a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8637e:	4798      	blx	r3
   86380:	42a6      	cmp	r6, r4
   86382:	d1f9      	bne.n	86378 <__libc_init_array+0x10>
   86384:	4e0a      	ldr	r6, [pc, #40]	; (863b0 <__libc_init_array+0x48>)
   86386:	4d0b      	ldr	r5, [pc, #44]	; (863b4 <__libc_init_array+0x4c>)
   86388:	f000 fa2c 	bl	867e4 <_init>
   8638c:	1b76      	subs	r6, r6, r5
   8638e:	10b6      	asrs	r6, r6, #2
   86390:	d008      	beq.n	863a4 <__libc_init_array+0x3c>
   86392:	3d04      	subs	r5, #4
   86394:	2400      	movs	r4, #0
   86396:	3401      	adds	r4, #1
   86398:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8639c:	4798      	blx	r3
   8639e:	42a6      	cmp	r6, r4
   863a0:	d1f9      	bne.n	86396 <__libc_init_array+0x2e>
   863a2:	bd70      	pop	{r4, r5, r6, pc}
   863a4:	bd70      	pop	{r4, r5, r6, pc}
   863a6:	bf00      	nop
   863a8:	000867f0 	.word	0x000867f0
   863ac:	000867f0 	.word	0x000867f0
   863b0:	000867f8 	.word	0x000867f8
   863b4:	000867f0 	.word	0x000867f0

000863b8 <memcmp>:
   863b8:	2a03      	cmp	r2, #3
   863ba:	b470      	push	{r4, r5, r6}
   863bc:	d928      	bls.n	86410 <memcmp+0x58>
   863be:	ea40 0301 	orr.w	r3, r0, r1
   863c2:	079b      	lsls	r3, r3, #30
   863c4:	d013      	beq.n	863ee <memcmp+0x36>
   863c6:	7805      	ldrb	r5, [r0, #0]
   863c8:	780c      	ldrb	r4, [r1, #0]
   863ca:	42a5      	cmp	r5, r4
   863cc:	d124      	bne.n	86418 <memcmp+0x60>
   863ce:	3a01      	subs	r2, #1
   863d0:	2300      	movs	r3, #0
   863d2:	e005      	b.n	863e0 <memcmp+0x28>
   863d4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   863d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   863dc:	42a5      	cmp	r5, r4
   863de:	d11b      	bne.n	86418 <memcmp+0x60>
   863e0:	4293      	cmp	r3, r2
   863e2:	f103 0301 	add.w	r3, r3, #1
   863e6:	d1f5      	bne.n	863d4 <memcmp+0x1c>
   863e8:	2000      	movs	r0, #0
   863ea:	bc70      	pop	{r4, r5, r6}
   863ec:	4770      	bx	lr
   863ee:	460c      	mov	r4, r1
   863f0:	4603      	mov	r3, r0
   863f2:	6825      	ldr	r5, [r4, #0]
   863f4:	681e      	ldr	r6, [r3, #0]
   863f6:	4621      	mov	r1, r4
   863f8:	42ae      	cmp	r6, r5
   863fa:	4618      	mov	r0, r3
   863fc:	f104 0404 	add.w	r4, r4, #4
   86400:	f103 0304 	add.w	r3, r3, #4
   86404:	d104      	bne.n	86410 <memcmp+0x58>
   86406:	3a04      	subs	r2, #4
   86408:	2a03      	cmp	r2, #3
   8640a:	4618      	mov	r0, r3
   8640c:	4621      	mov	r1, r4
   8640e:	d8f0      	bhi.n	863f2 <memcmp+0x3a>
   86410:	2a00      	cmp	r2, #0
   86412:	d1d8      	bne.n	863c6 <memcmp+0xe>
   86414:	4610      	mov	r0, r2
   86416:	e7e8      	b.n	863ea <memcmp+0x32>
   86418:	1b28      	subs	r0, r5, r4
   8641a:	bc70      	pop	{r4, r5, r6}
   8641c:	4770      	bx	lr
   8641e:	bf00      	nop

00086420 <memcpy>:
   86420:	4684      	mov	ip, r0
   86422:	ea41 0300 	orr.w	r3, r1, r0
   86426:	f013 0303 	ands.w	r3, r3, #3
   8642a:	d149      	bne.n	864c0 <memcpy+0xa0>
   8642c:	3a40      	subs	r2, #64	; 0x40
   8642e:	d323      	bcc.n	86478 <memcpy+0x58>
   86430:	680b      	ldr	r3, [r1, #0]
   86432:	6003      	str	r3, [r0, #0]
   86434:	684b      	ldr	r3, [r1, #4]
   86436:	6043      	str	r3, [r0, #4]
   86438:	688b      	ldr	r3, [r1, #8]
   8643a:	6083      	str	r3, [r0, #8]
   8643c:	68cb      	ldr	r3, [r1, #12]
   8643e:	60c3      	str	r3, [r0, #12]
   86440:	690b      	ldr	r3, [r1, #16]
   86442:	6103      	str	r3, [r0, #16]
   86444:	694b      	ldr	r3, [r1, #20]
   86446:	6143      	str	r3, [r0, #20]
   86448:	698b      	ldr	r3, [r1, #24]
   8644a:	6183      	str	r3, [r0, #24]
   8644c:	69cb      	ldr	r3, [r1, #28]
   8644e:	61c3      	str	r3, [r0, #28]
   86450:	6a0b      	ldr	r3, [r1, #32]
   86452:	6203      	str	r3, [r0, #32]
   86454:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86456:	6243      	str	r3, [r0, #36]	; 0x24
   86458:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8645a:	6283      	str	r3, [r0, #40]	; 0x28
   8645c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8645e:	62c3      	str	r3, [r0, #44]	; 0x2c
   86460:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86462:	6303      	str	r3, [r0, #48]	; 0x30
   86464:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86466:	6343      	str	r3, [r0, #52]	; 0x34
   86468:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8646a:	6383      	str	r3, [r0, #56]	; 0x38
   8646c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8646e:	63c3      	str	r3, [r0, #60]	; 0x3c
   86470:	3040      	adds	r0, #64	; 0x40
   86472:	3140      	adds	r1, #64	; 0x40
   86474:	3a40      	subs	r2, #64	; 0x40
   86476:	d2db      	bcs.n	86430 <memcpy+0x10>
   86478:	3230      	adds	r2, #48	; 0x30
   8647a:	d30b      	bcc.n	86494 <memcpy+0x74>
   8647c:	680b      	ldr	r3, [r1, #0]
   8647e:	6003      	str	r3, [r0, #0]
   86480:	684b      	ldr	r3, [r1, #4]
   86482:	6043      	str	r3, [r0, #4]
   86484:	688b      	ldr	r3, [r1, #8]
   86486:	6083      	str	r3, [r0, #8]
   86488:	68cb      	ldr	r3, [r1, #12]
   8648a:	60c3      	str	r3, [r0, #12]
   8648c:	3010      	adds	r0, #16
   8648e:	3110      	adds	r1, #16
   86490:	3a10      	subs	r2, #16
   86492:	d2f3      	bcs.n	8647c <memcpy+0x5c>
   86494:	320c      	adds	r2, #12
   86496:	d305      	bcc.n	864a4 <memcpy+0x84>
   86498:	f851 3b04 	ldr.w	r3, [r1], #4
   8649c:	f840 3b04 	str.w	r3, [r0], #4
   864a0:	3a04      	subs	r2, #4
   864a2:	d2f9      	bcs.n	86498 <memcpy+0x78>
   864a4:	3204      	adds	r2, #4
   864a6:	d008      	beq.n	864ba <memcpy+0x9a>
   864a8:	07d2      	lsls	r2, r2, #31
   864aa:	bf1c      	itt	ne
   864ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   864b0:	f800 3b01 	strbne.w	r3, [r0], #1
   864b4:	d301      	bcc.n	864ba <memcpy+0x9a>
   864b6:	880b      	ldrh	r3, [r1, #0]
   864b8:	8003      	strh	r3, [r0, #0]
   864ba:	4660      	mov	r0, ip
   864bc:	4770      	bx	lr
   864be:	bf00      	nop
   864c0:	2a08      	cmp	r2, #8
   864c2:	d313      	bcc.n	864ec <memcpy+0xcc>
   864c4:	078b      	lsls	r3, r1, #30
   864c6:	d0b1      	beq.n	8642c <memcpy+0xc>
   864c8:	f010 0303 	ands.w	r3, r0, #3
   864cc:	d0ae      	beq.n	8642c <memcpy+0xc>
   864ce:	f1c3 0304 	rsb	r3, r3, #4
   864d2:	1ad2      	subs	r2, r2, r3
   864d4:	07db      	lsls	r3, r3, #31
   864d6:	bf1c      	itt	ne
   864d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   864dc:	f800 3b01 	strbne.w	r3, [r0], #1
   864e0:	d3a4      	bcc.n	8642c <memcpy+0xc>
   864e2:	f831 3b02 	ldrh.w	r3, [r1], #2
   864e6:	f820 3b02 	strh.w	r3, [r0], #2
   864ea:	e79f      	b.n	8642c <memcpy+0xc>
   864ec:	3a04      	subs	r2, #4
   864ee:	d3d9      	bcc.n	864a4 <memcpy+0x84>
   864f0:	3a01      	subs	r2, #1
   864f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   864f6:	f800 3b01 	strb.w	r3, [r0], #1
   864fa:	d2f9      	bcs.n	864f0 <memcpy+0xd0>
   864fc:	780b      	ldrb	r3, [r1, #0]
   864fe:	7003      	strb	r3, [r0, #0]
   86500:	784b      	ldrb	r3, [r1, #1]
   86502:	7043      	strb	r3, [r0, #1]
   86504:	788b      	ldrb	r3, [r1, #2]
   86506:	7083      	strb	r3, [r0, #2]
   86508:	4660      	mov	r0, ip
   8650a:	4770      	bx	lr

0008650c <memset>:
   8650c:	b4f0      	push	{r4, r5, r6, r7}
   8650e:	0784      	lsls	r4, r0, #30
   86510:	d043      	beq.n	8659a <memset+0x8e>
   86512:	1e54      	subs	r4, r2, #1
   86514:	2a00      	cmp	r2, #0
   86516:	d03e      	beq.n	86596 <memset+0x8a>
   86518:	b2cd      	uxtb	r5, r1
   8651a:	4603      	mov	r3, r0
   8651c:	e003      	b.n	86526 <memset+0x1a>
   8651e:	1e62      	subs	r2, r4, #1
   86520:	2c00      	cmp	r4, #0
   86522:	d038      	beq.n	86596 <memset+0x8a>
   86524:	4614      	mov	r4, r2
   86526:	f803 5b01 	strb.w	r5, [r3], #1
   8652a:	079a      	lsls	r2, r3, #30
   8652c:	d1f7      	bne.n	8651e <memset+0x12>
   8652e:	2c03      	cmp	r4, #3
   86530:	d92a      	bls.n	86588 <memset+0x7c>
   86532:	b2cd      	uxtb	r5, r1
   86534:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86538:	2c0f      	cmp	r4, #15
   8653a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8653e:	d915      	bls.n	8656c <memset+0x60>
   86540:	f1a4 0710 	sub.w	r7, r4, #16
   86544:	093f      	lsrs	r7, r7, #4
   86546:	f103 0610 	add.w	r6, r3, #16
   8654a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8654e:	461a      	mov	r2, r3
   86550:	6015      	str	r5, [r2, #0]
   86552:	6055      	str	r5, [r2, #4]
   86554:	6095      	str	r5, [r2, #8]
   86556:	60d5      	str	r5, [r2, #12]
   86558:	3210      	adds	r2, #16
   8655a:	42b2      	cmp	r2, r6
   8655c:	d1f8      	bne.n	86550 <memset+0x44>
   8655e:	f004 040f 	and.w	r4, r4, #15
   86562:	3701      	adds	r7, #1
   86564:	2c03      	cmp	r4, #3
   86566:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8656a:	d90d      	bls.n	86588 <memset+0x7c>
   8656c:	461e      	mov	r6, r3
   8656e:	4622      	mov	r2, r4
   86570:	3a04      	subs	r2, #4
   86572:	2a03      	cmp	r2, #3
   86574:	f846 5b04 	str.w	r5, [r6], #4
   86578:	d8fa      	bhi.n	86570 <memset+0x64>
   8657a:	1f22      	subs	r2, r4, #4
   8657c:	f022 0203 	bic.w	r2, r2, #3
   86580:	3204      	adds	r2, #4
   86582:	4413      	add	r3, r2
   86584:	f004 0403 	and.w	r4, r4, #3
   86588:	b12c      	cbz	r4, 86596 <memset+0x8a>
   8658a:	b2c9      	uxtb	r1, r1
   8658c:	441c      	add	r4, r3
   8658e:	f803 1b01 	strb.w	r1, [r3], #1
   86592:	42a3      	cmp	r3, r4
   86594:	d1fb      	bne.n	8658e <memset+0x82>
   86596:	bcf0      	pop	{r4, r5, r6, r7}
   86598:	4770      	bx	lr
   8659a:	4614      	mov	r4, r2
   8659c:	4603      	mov	r3, r0
   8659e:	e7c6      	b.n	8652e <memset+0x22>

000865a0 <register_fini>:
   865a0:	4b02      	ldr	r3, [pc, #8]	; (865ac <register_fini+0xc>)
   865a2:	b113      	cbz	r3, 865aa <register_fini+0xa>
   865a4:	4802      	ldr	r0, [pc, #8]	; (865b0 <register_fini+0x10>)
   865a6:	f000 b805 	b.w	865b4 <atexit>
   865aa:	4770      	bx	lr
   865ac:	00000000 	.word	0x00000000
   865b0:	000865c1 	.word	0x000865c1

000865b4 <atexit>:
   865b4:	4601      	mov	r1, r0
   865b6:	2000      	movs	r0, #0
   865b8:	4602      	mov	r2, r0
   865ba:	4603      	mov	r3, r0
   865bc:	f000 b818 	b.w	865f0 <__register_exitproc>

000865c0 <__libc_fini_array>:
   865c0:	b538      	push	{r3, r4, r5, lr}
   865c2:	4d09      	ldr	r5, [pc, #36]	; (865e8 <__libc_fini_array+0x28>)
   865c4:	4c09      	ldr	r4, [pc, #36]	; (865ec <__libc_fini_array+0x2c>)
   865c6:	1b64      	subs	r4, r4, r5
   865c8:	10a4      	asrs	r4, r4, #2
   865ca:	bf18      	it	ne
   865cc:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   865d0:	d005      	beq.n	865de <__libc_fini_array+0x1e>
   865d2:	3c01      	subs	r4, #1
   865d4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   865d8:	4798      	blx	r3
   865da:	2c00      	cmp	r4, #0
   865dc:	d1f9      	bne.n	865d2 <__libc_fini_array+0x12>
   865de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   865e2:	f000 b909 	b.w	867f8 <_fini>
   865e6:	bf00      	nop
   865e8:	00086804 	.word	0x00086804
   865ec:	00086808 	.word	0x00086808

000865f0 <__register_exitproc>:
   865f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   865f2:	4c27      	ldr	r4, [pc, #156]	; (86690 <__register_exitproc+0xa0>)
   865f4:	b085      	sub	sp, #20
   865f6:	6826      	ldr	r6, [r4, #0]
   865f8:	4607      	mov	r7, r0
   865fa:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   865fe:	2c00      	cmp	r4, #0
   86600:	d040      	beq.n	86684 <__register_exitproc+0x94>
   86602:	6865      	ldr	r5, [r4, #4]
   86604:	2d1f      	cmp	r5, #31
   86606:	dd1e      	ble.n	86646 <__register_exitproc+0x56>
   86608:	4822      	ldr	r0, [pc, #136]	; (86694 <__register_exitproc+0xa4>)
   8660a:	b918      	cbnz	r0, 86614 <__register_exitproc+0x24>
   8660c:	f04f 30ff 	mov.w	r0, #4294967295
   86610:	b005      	add	sp, #20
   86612:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86614:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86618:	9103      	str	r1, [sp, #12]
   8661a:	9202      	str	r2, [sp, #8]
   8661c:	9301      	str	r3, [sp, #4]
   8661e:	f3af 8000 	nop.w
   86622:	9903      	ldr	r1, [sp, #12]
   86624:	4604      	mov	r4, r0
   86626:	9a02      	ldr	r2, [sp, #8]
   86628:	9b01      	ldr	r3, [sp, #4]
   8662a:	2800      	cmp	r0, #0
   8662c:	d0ee      	beq.n	8660c <__register_exitproc+0x1c>
   8662e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   86632:	2000      	movs	r0, #0
   86634:	6025      	str	r5, [r4, #0]
   86636:	6060      	str	r0, [r4, #4]
   86638:	4605      	mov	r5, r0
   8663a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8663e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   86642:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   86646:	b93f      	cbnz	r7, 86658 <__register_exitproc+0x68>
   86648:	1c6b      	adds	r3, r5, #1
   8664a:	2000      	movs	r0, #0
   8664c:	3502      	adds	r5, #2
   8664e:	6063      	str	r3, [r4, #4]
   86650:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   86654:	b005      	add	sp, #20
   86656:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86658:	2601      	movs	r6, #1
   8665a:	40ae      	lsls	r6, r5
   8665c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   86660:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   86664:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   86668:	2f02      	cmp	r7, #2
   8666a:	ea42 0206 	orr.w	r2, r2, r6
   8666e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   86672:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   86676:	d1e7      	bne.n	86648 <__register_exitproc+0x58>
   86678:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8667c:	431e      	orrs	r6, r3
   8667e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   86682:	e7e1      	b.n	86648 <__register_exitproc+0x58>
   86684:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   86688:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8668c:	e7b9      	b.n	86602 <__register_exitproc+0x12>
   8668e:	bf00      	nop
   86690:	000867e0 	.word	0x000867e0
   86694:	00000000 	.word	0x00000000
   86698:	454c4449 	.word	0x454c4449
   8669c:	00000000 	.word	0x00000000

000866a0 <ucExpectedStackBytes.5295>:
   866a0:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   866b0:	a5a5a5a5 20726d54 00637653 6e6f4351     ....Tmr Svc.QCon
   866c0:	00314273 6f725051 00324264 6e6f4351     sB1.QProdB2.QCon
   866d0:	00334273 6f725051 00344264 6f725051     sB3.QProdB4.QPro
   866e0:	00354264 6e6f4351 00364273 73655442     dB5.QConsB6.BTes
   866f0:	00003174 73655442 00003274 31544e43     t1..BTest2..CNT1
   86700:	00000000 32544e43 00000000 41455243     ....CNT2....CREA
   86710:	00524f54 43495553 00314449 43495553     TOR.SUICID1.SUIC
   86720:	00324449 5f544e43 00434e49 5f4d494c     ID2.CNT_INC.LIM_
   86730:	00434e49 54435f43 00004c52 50535553     INC.C_CTRL..SUSP
   86740:	0058545f 50535553 0058525f 73616c46     _TX.SUSP_RX.Flas
   86750:	00726568 516e6547 00000000 6f4c754d     her.GenQ....MuLo
   86760:	00000077 654d754d 00000064 6948754d     w...MuMed...MuHi
   86770:	00006867 4d746e49 00687461 6e6f4351     gh..IntMath.QCon
   86780:	00424e73 6f725051 00424e64 31636552     sNB.QProdNB.Rec1
   86790:	00000000 32636552 00000000 33636552     ....Rec2....Rec3
   867a0:	00000000 536c6f50 00314d45 536c6f50     ....PolSEM1.PolS
   867b0:	00324d45 536b6c42 00314d45 536b6c42     EM2.BlkSEM1.BlkS
   867c0:	00324d45 63656843 6d69546b 00007265     EM2.CheckTimer..

000867d0 <ulLED>:
   867d0:	0000002c 0000000c 0000002d 00000043     ,.......-...C...

000867e0 <_global_impure_ptr>:
   867e0:	20070010                                ... 

000867e4 <_init>:
   867e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   867e6:	bf00      	nop
   867e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   867ea:	bc08      	pop	{r3}
   867ec:	469e      	mov	lr, r3
   867ee:	4770      	bx	lr

000867f0 <__init_array_start>:
   867f0:	000865a1 	.word	0x000865a1

000867f4 <__frame_dummy_init_array_entry>:
   867f4:	00080119                                ....

000867f8 <_fini>:
   867f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   867fa:	bf00      	nop
   867fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   867fe:	bc08      	pop	{r3}
   86800:	469e      	mov	lr, r3
   86802:	4770      	bx	lr

00086804 <__fini_array_start>:
   86804:	000800f5 	.word	0x000800f5
